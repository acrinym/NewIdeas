using System;
using System.Threading.Tasks;
using Xunit;
using Cycloside.Core;

namespace Cycloside.Tests
{
    public class BasicServiceTests
    {
        [Fact]
        public async Task EventBus_Should_Work_Basic()
        {
            // Arrange
            var eventBus = new EventBus();
            var receivedMessage = string.Empty;
            var receivedData = string.Empty;

            eventBus.Subscribe("test/topic", message =>
            {
                receivedMessage = message.Topic;
                receivedData = message.Payload.GetString();
            });

            // Act
            eventBus.Publish("test/topic", "test data");

            // Wait for async processing
            await Task.Delay(10);

            // Assert
            Assert.Equal("test/topic", receivedMessage);
            Assert.Equal("test data", receivedData);
        }

        [Fact]
        public async Task JsonConfig_Should_Save_And_Load_Basic()
        {
            // Arrange
            var testPath = "test-config.json";
            var testData = new { TestValue = "test", Number = 42 };

            // Act - Save
            JsonConfig.Save("Cycloside.Tests/" + testPath, testData);

            // Act - Load
            var loadedData = JsonConfig.LoadOrDefault("Cycloside.Tests/" + testPath, new { TestValue = "", Number = 0 });

            // Cleanup
            if (System.IO.File.Exists("Cycloside.Tests/" + testPath))
            {
                System.IO.File.Delete("Cycloside.Tests/" + testPath);
            }

            // Assert
            Assert.Equal("test", loadedData.TestValue);
            Assert.Equal(42, loadedData.Number);
        }

        [Fact]
        public void ExploitDatabase_Classes_Should_Exist()
        {
            // This test just verifies that the classes exist and can be instantiated
            // (We can't fully test without the main project reference)

            // Test that we can create basic objects
            var exploitEntry = new
            {
                CVE = "CVE-2021-44228",
                Title = "Test Exploit",
                Description = "Test description",
                Severity = "Critical",
                CVSS = 10.0,
                AffectedSoftware = new[] { "Test Software" },
                ExploitType = "Remote Code Execution",
                Mitigation = "Test mitigation",
                References = new[] { "https://example.com" },
                DateDiscovered = DateTime.Now,
                DateAdded = DateTime.Now
            };

            // This is just a basic smoke test
            Assert.Equal("CVE-2021-44228", exploitEntry.CVE);
            Assert.Equal("Critical", exploitEntry.Severity);
        }
    }
}
