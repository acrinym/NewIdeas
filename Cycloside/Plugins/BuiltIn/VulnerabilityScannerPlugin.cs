using System;
using System.Collections.ObjectModel;
using System.Linq;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Threading;
using Cycloside.Plugins;
using Cycloside.Services;
using Cycloside.Widgets;

namespace Cycloside.Plugins.BuiltIn
{
    /// <summary>
    /// VULNERABILITY SCANNER - Comprehensive automated security scanning and analysis
    /// Provides network vulnerability scanning, web application testing, and exploit suggestions
    /// </summary>
    public class VulnerabilityScannerPlugin : IPlugin
    {
        public string Name => "Vulnerability Scanner";
        public string Description => "Comprehensive automated security scanning and analysis";
        public Version Version => new(1, 0, 0);
        public bool ForceDefaultTheme => false;

        public class VulnerabilityScannerWidget : IWidget
        {
            public string Name => "Vulnerability Scanner";

            private TabControl? _mainTabControl;
            private TextBlock? _statusText;
            private ListBox? _scanTargets;
            private ListBox? _vulnerabilities;
            private ListBox? _services;
            private TextBox? _targetInput;
            private ComboBox? _scanTypeSelector;
            private ComboBox? _intensitySelector;

            public Control BuildView()
            {
                var mainPanel = new StackPanel
                {
                    Orientation = Orientation.Vertical,
                    Margin = new Thickness(10)
                };

                // Header
                var headerPanel = new StackPanel
                {
                    Orientation = Orientation.Horizontal,
                    Margin = new Thickness(0, 0, 0, 15)
                };

                var headerText = new TextBlock
                {
                    Text = "üîç Vulnerability Scanner",
                    FontSize = 18,
                    FontWeight = FontWeight.Bold
                };

                var statusPanel = new Border
                {
                    Background = Brushes.LightGray,
                    CornerRadius = new CornerRadius(5),
                    Padding = new Thickness(8, 4),
                    Margin = new Thickness(15, 0, 0, 0)
                };

                _statusText = new TextBlock
                {
                    Text = "Ready",
                    FontSize = 12
                };

                statusPanel.Child = _statusText;

                headerPanel.Children.Add(headerText);
                headerPanel.Children.Add(statusPanel);

                // Main tab control
                _mainTabControl = new TabControl();

                // Scanner Tab
                var scannerTab = CreateScannerTab();
                _mainTabControl.Items.Add(scannerTab);

                // Results Tab
                var resultsTab = CreateResultsTab();
                _mainTabControl.Items.Add(resultsTab);

                // Reports Tab
                var reportsTab = CreateReportsTab();
                _mainTabControl.Items.Add(reportsTab);

                mainPanel.Children.Add(headerPanel);
                mainPanel.Children.Add(_mainTabControl);

                var border = new Border
                {
                    Child = mainPanel,
                    Background = Brushes.White,
                    BorderBrush = Brushes.LightGray,
                    BorderThickness = new Thickness(1),
                    CornerRadius = new CornerRadius(8),
                    Margin = new Thickness(10)
                };

                return border;
            }

            private TabItem CreateScannerTab()
            {
                var tab = new TabItem { Header = "üîç Scanner" };

                var panel = new StackPanel { Margin = new Thickness(15) };

                // Target input
                var targetPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };

                var targetLabel = new TextBlock
                {
                    Text = "üéØ Scan Target:",
                    FontWeight = FontWeight.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                _targetInput = new TextBox
                {
                    Text = "localhost",
                    Width = 300,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                var targetHelp = new TextBlock
                {
                    Text = "Examples: localhost, 192.168.1.100, example.com, 10.0.0.0/24",
                    FontSize = 11,
                    Opacity = 0.7
                };

                targetPanel.Children.Add(targetLabel);
                targetPanel.Children.Add(_targetInput);
                targetPanel.Children.Add(targetHelp);

                // Scan configuration
                var configPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };

                var scanTypePanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 10) };
                var scanTypeLabel = new TextBlock { Text = "Scan Type:", Margin = new Thickness(0, 0, 10, 0) };
                _scanTypeSelector = new ComboBox { Width = 150 };

                _scanTypeSelector.Items.Add("Network");
                _scanTypeSelector.Items.Add("Web Application");
                _scanTypeSelector.Items.Add("Host");
                _scanTypeSelector.Items.Add("Comprehensive");
                _scanTypeSelector.SelectedIndex = 0;

                scanTypePanel.Children.Add(scanTypeLabel);
                scanTypePanel.Children.Add(_scanTypeSelector);

                var intensityPanel = new StackPanel { Orientation = Orientation.Horizontal };
                var intensityLabel = new TextBlock { Text = "Intensity:", Margin = new Thickness(0, 0, 10, 0) };
                _intensitySelector = new ComboBox { Width = 150 };

                _intensitySelector.Items.Add("Quick (1)");
                _intensitySelector.Items.Add("Standard (2)");
                _intensitySelector.Items.Add("Thorough (3)");
                _intensitySelector.Items.Add("Intensive (4)");
                _intensitySelector.SelectedIndex = 1;

                intensityPanel.Children.Add(intensityLabel);
                intensityPanel.Children.Add(_intensitySelector);

                configPanel.Children.Add(scanTypePanel);
                configPanel.Children.Add(intensityPanel);

                // Scan controls
                var controlsPanel = new StackPanel { Orientation = Orientation.Horizontal, Spacing = 10 };

                var startButton = new Button
                {
                    Content = "üîç Start Scan",
                    Background = Brushes.Green,
                    Foreground = Brushes.White,
                    FontWeight = FontWeight.Bold,
                    Padding = new Thickness(15, 8)
                };
                startButton.Click += OnStartScan;

                var stopButton = new Button
                {
                    Content = "üõë Stop Scan",
                    Background = Brushes.Red,
                    Foreground = Brushes.White,
                    Padding = new Thickness(15, 8)
                };
                stopButton.Click += OnStopScan;

                var clearButton = new Button
                {
                    Content = "üóëÔ∏è Clear Results",
                    Background = Brushes.Gray,
                    Foreground = Brushes.White,
                    Padding = new Thickness(15, 8)
                };
                clearButton.Click += OnClearResults;

                controlsPanel.Children.Add(startButton);
                controlsPanel.Children.Add(stopButton);
                controlsPanel.Children.Add(clearButton);

                // Scan targets
                var targetsPanel = new StackPanel { Margin = new Thickness(0, 20, 0, 0) };

                var targetsLabel = new TextBlock
                {
                    Text = "üìã Scan Targets:",
                    FontWeight = FontWeight.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                _scanTargets = new ListBox { Height = 200 };

                targetsPanel.Children.Add(targetsLabel);
                targetsPanel.Children.Add(_scanTargets);

                panel.Children.Add(targetPanel);
                panel.Children.Add(configPanel);
                panel.Children.Add(controlsPanel);
                panel.Children.Add(targetsPanel);

                tab.Content = panel;
                return tab;
            }

            private TabItem CreateResultsTab()
            {
                var tab = new TabItem { Header = "üìä Results" };

                var panel = new StackPanel { Margin = new Thickness(15) };

                // Vulnerabilities
                var vulnerabilitiesPanel = new StackPanel { Margin = new Thickness(0, 0, 0, 20) };

                var vulnerabilitiesLabel = new TextBlock
                {
                    Text = "üö® Vulnerabilities Found:",
                    FontWeight = FontWeight.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                _vulnerabilities = new ListBox { Height = 250 };

                vulnerabilitiesPanel.Children.Add(vulnerabilitiesLabel);
                vulnerabilitiesPanel.Children.Add(_vulnerabilities);

                // Services
                var servicesPanel = new StackPanel { Margin = new Thickness(0, 20, 0, 0) };

                var servicesLabel = new TextBlock
                {
                    Text = "üîß Discovered Services:",
                    FontWeight = FontWeight.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                _services = new ListBox { Height = 200 };

                servicesPanel.Children.Add(servicesLabel);
                servicesPanel.Children.Add(_services);

                panel.Children.Add(vulnerabilitiesPanel);
                panel.Children.Add(servicesPanel);

                tab.Content = panel;
                return tab;
            }

            private TabItem CreateReportsTab()
            {
                var tab = new TabItem { Header = "üìÑ Reports" };

                var panel = new StackPanel { Margin = new Thickness(15) };

                var reportLabel = new TextBlock
                {
                    Text = "üìÑ Generate Security Reports:",
                    FontWeight = FontWeight.Bold,
                    Margin = new Thickness(0, 0, 0, 15)
                };

                var reportButtons = new StackPanel { Spacing = 10 };

                var summaryButton = new Button
                {
                    Content = "üìã Executive Summary",
                    Background = Brushes.Blue,
                    Foreground = Brushes.White,
                    Padding = new Thickness(15, 8),
                    Margin = new Thickness(0, 0, 0, 10)
                };
                summaryButton.Click += OnGenerateSummaryReport;

                var technicalButton = new Button
                {
                    Content = "üîß Technical Report",
                    Background = Brushes.Purple,
                    Foreground = Brushes.White,
                    Padding = new Thickness(15, 8),
                    Margin = new Thickness(0, 0, 0, 10)
                };
                technicalButton.Click += OnGenerateTechnicalReport;

                var exportButton = new Button
                {
                    Content = "üì§ Export Results",
                    Background = Brushes.Green,
                    Foreground = Brushes.White,
                    Padding = new Thickness(15, 8)
                };
                exportButton.Click += OnExportResults;

                reportButtons.Children.Add(summaryButton);
                reportButtons.Children.Add(technicalButton);
                reportButtons.Children.Add(exportButton);

                // Report preview
                var previewPanel = new StackPanel { Margin = new Thickness(0, 20, 0, 0) };

                var previewLabel = new TextBlock
                {
                    Text = "üìÑ Report Preview:",
                    FontWeight = FontWeight.Bold,
                    Margin = new Thickness(0, 0, 0, 10)
                };

                var previewText = new TextBox
                {
                    Text = "Report preview will appear here...",
                    Height = 300,
                    IsReadOnly = true,
                    Background = new SolidColorBrush(Color.Parse("#f8f9fa")),
                    FontFamily = "Consolas"
                };

                previewPanel.Children.Add(previewLabel);
                previewPanel.Children.Add(previewText);

                panel.Children.Add(reportLabel);
                panel.Children.Add(reportButtons);
                panel.Children.Add(previewPanel);

                tab.Content = panel;
                return tab;
            }

            private async void OnStartScan(object? sender, RoutedEventArgs e)
            {
                var target = _targetInput?.Text?.Trim();
                if (string.IsNullOrEmpty(target))
                {
                    UpdateStatus("‚ùå Please enter a target to scan");
                    return;
                }

                var scanType = (ScanType)Enum.Parse(typeof(ScanType), _scanTypeSelector?.SelectedItem?.ToString() ?? "Network");
                var intensity = _intensitySelector?.SelectedIndex + 1 ?? 2;

                UpdateStatus($"üîç Starting {scanType} scan on {target} (intensity: {intensity})...");

                var success = await VulnerabilityScanner.StartVulnerabilityScanAsync(target, scanType, intensity);
                if (success)
                {
                    UpdateStatus("‚úÖ Scan started successfully");
                    SubscribeToScannerEvents();
                }
                else
                {
                    UpdateStatus("‚ùå Failed to start scan");
                }
            }

            private async void OnStopScan(object? sender, RoutedEventArgs e)
            {
                UpdateStatus("üõë Stopping scan...");
                await VulnerabilityScanner.StopVulnerabilityScanAsync();
                UpdateStatus("‚úÖ Scan stopped");
            }

            private void OnClearResults(object? sender, RoutedEventArgs e)
            {
                VulnerabilityScanner.Vulnerabilities.Clear();
                VulnerabilityScanner.DiscoveredServices.Clear();
                UpdateStatus("üóëÔ∏è Results cleared");
            }

            private void OnGenerateSummaryReport(object? sender, RoutedEventArgs e)
            {
                var report = GenerateExecutiveSummary();
                // In production, would show in report preview
                Logger.Log($"Executive summary generated: {report.Length} characters");
                UpdateStatus("üìã Executive summary generated");
            }

            private void OnGenerateTechnicalReport(object? sender, RoutedEventArgs e)
            {
                var report = GenerateTechnicalReport();
                // In production, would show in report preview
                Logger.Log($"Technical report generated: {report.Length} characters");
                UpdateStatus("üîß Technical report generated");
            }

            private void OnExportResults(object? sender, RoutedEventArgs e)
            {
                // In production, would export to file
                Logger.Log("Results exported");
                UpdateStatus("üì§ Results exported");
            }

            private void SubscribeToScannerEvents()
            {
                VulnerabilityScanner.ScanProgressUpdated += OnScanProgressUpdated;
                VulnerabilityScanner.VulnerabilityFound += OnVulnerabilityFound;
                VulnerabilityScanner.ScanCompleted += OnScanCompleted;
            }

            private void OnScanProgressUpdated(object? sender, ScanProgressEventArgs e)
            {
                Dispatcher.UIThread.Post(() =>
                {
                    UpdateStatus($"üìä {e.Status} ({e.Progress}%)");
                });
            }

            private void OnVulnerabilityFound(object? sender, VulnerabilityFoundEventArgs e)
            {
                Dispatcher.UIThread.Post(() =>
                {
                    if (_vulnerabilities != null)
                    {
                        var severityColor = e.Vulnerability.Severity switch
                        {
                            VulnerabilitySeverity.Critical => Brushes.Red,
                            VulnerabilitySeverity.High => Brushes.Orange,
                            VulnerabilitySeverity.Medium => Brushes.Yellow,
                            VulnerabilitySeverity.Low => Brushes.Green,
                            _ => Brushes.Gray
                        };

                        var vulnItem = $"{e.Vulnerability.Title} | {e.Vulnerability.Severity} | {e.Vulnerability.AffectedComponent}";
                        _vulnerabilities.Items.Add(vulnItem);

                        if (_vulnerabilities.Items.Count > 100)
                            _vulnerabilities.Items.RemoveAt(0);
                    }
                });
            }

            private void OnScanCompleted(object? sender, ScanCompletedEventArgs e)
            {
                Dispatcher.UIThread.Post(() =>
                {
                    if (_scanTargets != null)
                    {
                        var targetItem = $"{e.ScanTarget.Target} | {e.ScanTarget.ScanType} | {e.ScanTarget.Status} | {e.ScanTarget.EndTime}";
                        _scanTargets.Items.Add(targetItem);

                        if (_scanTargets.Items.Count > 20)
                            _scanTargets.Items.RemoveAt(0);
                    }

                    UpdateStatus($"‚úÖ Scan completed: {VulnerabilityScanner.Vulnerabilities.Count} vulnerabilities found");
                });
            }

            private string GenerateExecutiveSummary()
            {
                var vulnerabilities = VulnerabilityScanner.Vulnerabilities;
                var services = VulnerabilityScanner.DiscoveredServices;

                var summary = $@"# Executive Security Summary

## Scan Overview
- **Total Vulnerabilities**: {vulnerabilities.Count}
- **Critical**: {vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Critical)}
- **High**: {vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.High)}
- **Medium**: {vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Medium)}
- **Low**: {vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Low)}

## Discovered Services
- **Total Services**: {services.Count}
- **Open Ports**: {services.Count(s => s.Status == "Open")}
- **Service Types**: {string.Join(", ", services.Select(s => s.Service).Distinct())}

## Top Vulnerabilities
{string.Join("\n", vulnerabilities.Take(5).Select(v => $"- {v.Title} ({v.Severity})"))}

## Recommendations
1. Address critical vulnerabilities immediately
2. Implement proper input validation and sanitization
3. Keep all software updated and patched
4. Use strong authentication mechanisms
5. Implement proper access controls and authorization

Generated: {DateTime.Now}
";

                return summary;
            }

            private string GenerateTechnicalReport()
            {
                var vulnerabilities = VulnerabilityScanner.Vulnerabilities;
                var services = VulnerabilityScanner.DiscoveredServices;

                var report = $@"# Technical Security Report

## Detailed Vulnerability Analysis

### Vulnerabilities Found ({vulnerabilities.Count})

{string.Join("\n\n", vulnerabilities.Select((v, i) => $@"#### {i + 1}. {v.Title}
**Severity**: {v.Severity}
**Component**: {v.AffectedComponent}
**Description**: {v.Description}
**Impact**: {v.Impact}
**Remediation**: {v.Remediation}
**References**: {string.Join(", ", v.References)}
{(v.Cve != null ? $"**CVE**: {v.Cve}" : "")}
**Discovered**: {v.Discovered}
"))}

## Service Analysis

### Discovered Services ({services.Count})

{string.Join("\n", services.Select((s, i) => $@"#### {i + 1}. {s.Service}
- **Host**: {s.Host}
- **Port**: {s.Port}
- **Protocol**: {s.Protocol}
- **Status**: {s.Status}
{(s.Banner != null ? $"- **Banner**: {s.Banner}" : "")}
"))}

## Security Metrics

- **Vulnerability Density**: {vulnerabilities.Count / Math.Max(services.Count, 1):F2} vulnerabilities per service
- **Critical Risk Score**: {CalculateRiskScore(vulnerabilities):F1}/10
- **Compliance Score**: {CalculateComplianceScore(vulnerabilities):F1}/100

## Remediation Priority

1. **Critical Vulnerabilities**: Immediate attention required
2. **High Severity**: Address within 1 week
3. **Medium Severity**: Address within 1 month
4. **Low Severity**: Address during maintenance windows

Generated: {DateTime.Now}
";

                return report;
            }

            private double CalculateRiskScore(ObservableCollection<Vulnerability> vulnerabilities)
            {
                var critical = vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Critical) * 10;
                var high = vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.High) * 7;
                var medium = vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Medium) * 4;
                var low = vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Low) * 1;

                return Math.Min((critical + high + medium + low) / Math.Max(vulnerabilities.Count, 1), 10);
            }

            private double CalculateComplianceScore(ObservableCollection<Vulnerability> vulnerabilities)
            {
                // Simple compliance score based on vulnerability count
                return Math.Max(100 - (vulnerabilities.Count * 2), 0);
            }

            private void UpdateStatus(string message)
            {
                if (_statusText != null)
                {
                    _statusText.Text = message;
                }

                Logger.Log($"Vulnerability Scanner: {message}");
            }
        }

        public IWidget? Widget => new VulnerabilityScannerWidget();

        public void Start()
        {
            Logger.Log("üîç Vulnerability Scanner Plugin started - Ready for security analysis!");

            // Initialize Vulnerability Scanner service
            _ = VulnerabilityScanner.InitializeAsync();
        }

        public void Stop()
        {
            Logger.Log("üõë Vulnerability Scanner Plugin stopped");
        }
    }
}
