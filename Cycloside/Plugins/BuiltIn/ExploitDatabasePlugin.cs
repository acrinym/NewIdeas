using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Layout;
using Avalonia.Media;
using Cycloside.Plugins;
using Cycloside.Services;
using Cycloside.Widgets;

namespace Cycloside.Plugins.BuiltIn
{
    /// <summary>
    /// Exploit Database Plugin - Local vulnerability and exploit information database
    /// Provides offline access to CVE data, exploit information, and mitigation strategies
    /// </summary>
    public class ExploitDatabasePlugin : IPlugin
    {
        public string Name => "Exploit Database";
        public string Description => "Local vulnerability and exploit information database with offline CVE data";
        public Version Version => new(1, 0, 0);
        public bool ForceDefaultTheme => false;
        public IWidget? Widget => new ExploitDatabaseWidget();

        public void Start()
        {
            Logger.Log("üîç Exploit Database plugin started");
            _ = ExploitDatabase.InitializeAsync();
        }

        public void Stop()
        {
            Logger.Log("üîç Exploit Database plugin stopped");
        }
    }

    /// <summary>
    /// Exploit Database Widget
    /// </summary>
    public class ExploitDatabaseWidget : IWidget
    {
        public string Name => "Exploit Database";

        private TabControl? _mainTabControl;
        private TextBlock? _statusText;
        private TextBox? _searchInput;
        private ComboBox? _searchTypeCombo;
        private ListBox? _resultsList;
        private TextBlock? _statsText;

        public Control BuildView()
        {
            var mainPanel = new StackPanel
            {
                Orientation = Orientation.Vertical,
                Margin = new Thickness(10)
            };

            // Header
            var headerPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(0, 0, 0, 15)
            };

            var headerText = new TextBlock
            {
                Text = "üîç Exploit Database",
                FontSize = 18,
                FontWeight = FontWeight.Bold
            };

            _statusText = new TextBlock
            {
                Text = "Loading database...",
                Foreground = Brushes.Gray,
                Margin = new Thickness(15, 0, 0, 0)
            };

            headerPanel.Children.Add(headerText);
            headerPanel.Children.Add(_statusText);

            // Search panel
            var searchPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(0, 0, 0, 15)
            };

            _searchInput = new TextBox
            {
                Watermark = "Search exploits (CVE, software, description)...",
                Width = 300,
                Margin = new Thickness(0, 0, 10, 0)
            };

            _searchTypeCombo = new ComboBox
            {
                Width = 150,
                Margin = new Thickness(0, 0, 10, 0)
            };
            _searchTypeCombo.Items.Add("CVE");
            _searchTypeCombo.Items.Add("Software");
            _searchTypeCombo.Items.Add("Severity");
            _searchTypeCombo.Items.Add("Description");
            _searchTypeCombo.SelectedIndex = 0;

            var searchButton = new Button
            {
                Content = "üîç Search",
                Background = Brushes.Blue,
                Foreground = Brushes.White,
                Padding = new Thickness(15, 8)
            };

            var refreshButton = new Button
            {
                Content = "üîÑ Refresh",
                Background = Brushes.Green,
                Foreground = Brushes.White,
                Padding = new Thickness(15, 8),
                Margin = new Thickness(10, 0, 0, 0)
            };

            searchButton.Click += OnSearch;
            refreshButton.Click += OnRefresh;

            searchPanel.Children.Add(_searchInput);
            searchPanel.Children.Add(_searchTypeCombo);
            searchPanel.Children.Add(searchButton);
            searchPanel.Children.Add(refreshButton);

            // Results area
            var resultsPanel = new StackPanel
            {
                Margin = new Thickness(0, 0, 0, 15)
            };

            var resultsLabel = new TextBlock
            {
                Text = "Search Results:",
                FontWeight = FontWeight.Bold,
                Margin = new Thickness(0, 0, 0, 10)
            };

            _resultsList = new ListBox { Height = 300 };

            resultsPanel.Children.Add(resultsLabel);
            resultsPanel.Children.Add(_resultsList);

            // Statistics panel
            var statsPanel = new Border
            {
                Background = Brushes.LightGray,
                CornerRadius = new CornerRadius(5),
                Padding = new Thickness(10),
                Margin = new Thickness(0, 0, 0, 15)
            };

            _statsText = new TextBlock
            {
                Text = "Loading statistics...",
                TextWrapping = TextWrapping.Wrap
            };

            statsPanel.Child = _statsText;

            // Main tab control
            _mainTabControl = new TabControl();

            // Search Tab
            var searchTab = new TabItem { Header = "üîç Search" };
            var searchTabPanel = new StackPanel { Margin = new Thickness(15) };
            searchTabPanel.Children.Add(searchPanel);
            searchTabPanel.Children.Add(resultsPanel);
            searchTabPanel.Children.Add(statsPanel);
            searchTab.Content = searchTabPanel;

            // Browse Tab
            var browseTab = new TabItem { Header = "üìö Browse" };
            var browseTabPanel = new StackPanel { Margin = new Thickness(15) };
            browseTabPanel.Children.Add(CreateBrowsePanel());
            browseTab.Content = browseTabPanel;

            // Details Tab
            var detailsTab = new TabItem { Header = "üìã Details" };
            var detailsTabPanel = new StackPanel { Margin = new Thickness(15) };
            detailsTabPanel.Children.Add(CreateDetailsPanel());
            detailsTab.Content = detailsTabPanel;

            _mainTabControl.Items.Add(searchTab);
            _mainTabControl.Items.Add(browseTab);
            _mainTabControl.Items.Add(detailsTab);

            mainPanel.Children.Add(headerPanel);
            mainPanel.Children.Add(_mainTabControl);

            // Initialize data
            _ = InitializeAsync();

            return mainPanel;
        }

        private async Task InitializeAsync()
        {
            try
            {
                await ExploitDatabase.InitializeAsync();

                if (ExploitDatabase.IsLoaded)
                {
                    UpdateStatus($"‚úÖ Database loaded: {ExploitDatabase.Database.Count} entries");
                    UpdateStatistics();
                }
                else
                {
                    UpdateStatus("‚ùå Database loading failed");
                }
            }
            catch (Exception ex)
            {
                UpdateStatus($"‚ùå Initialization failed: {ex.Message}");
            }
        }

        private void OnSearch(object? sender, RoutedEventArgs e)
        {
            var searchTerm = _searchInput?.Text?.Trim();
            var searchType = _searchTypeCombo?.SelectedItem?.ToString();

            if (string.IsNullOrEmpty(searchTerm) || string.IsNullOrEmpty(searchType))
                return;

            _resultsList?.Items.Clear();

            try
            {
                List<ExploitEntry> results;

                switch (searchType)
                {
                    case "CVE":
                        var byCve = ExploitDatabase.FindByCVE(searchTerm);
                        results = byCve != null ? new List<ExploitEntry> { byCve } : new List<ExploitEntry>();
                        break;
                    case "Software":
                        results = ExploitDatabase.FindBySoftware(searchTerm);
                        break;
                    case "Severity":
                        results = ExploitDatabase.FindBySeverity(searchTerm);
                        break;
                    case "Description":
                        results = ExploitDatabase.Database.Where(e =>
                            e.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            e.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                        ).ToList();
                        break;
                    default:
                        results = new List<ExploitEntry>();
                        break;
                }

                if (results.Any())
                {
                    foreach (var exploit in results)
                    {
                        _resultsList?.Items.Add($"{exploit.CVE} - {exploit.Title} ({exploit.Severity})");
                    }
                    UpdateStatus($"‚úÖ Found {results.Count} results");
                }
                else
                {
                    _resultsList?.Items.Add("No results found.");
                    UpdateStatus("‚ùå No results found");
                }
            }
            catch (Exception ex)
            {
                _resultsList?.Items.Add($"‚ùå Search failed: {ex.Message}");
                UpdateStatus($"‚ùå Search failed: {ex.Message}");
            }
        }

        private void OnRefresh(object? sender, RoutedEventArgs e)
        {
            _ = InitializeAsync();
        }

        private void UpdateStatus(string message)
        {
            if (_statusText != null)
            {
                _statusText.Text = message;
            }

            Logger.Log($"Exploit Database: {message}");
        }

        private void UpdateStatistics()
        {
            var stats = ExploitDatabase.GetStats();

            if (_statsText != null)
            {
                _statsText.Text = $@"üìä Database Statistics:
‚Ä¢ Total Entries: {stats.TotalEntries}
‚Ä¢ Critical: {stats.CriticalCount}
‚Ä¢ High: {stats.HighCount}
‚Ä¢ Medium: {stats.MediumCount}
‚Ä¢ Low: {stats.LowCount}
‚Ä¢ Last Updated: {stats.LastUpdated.ToShortDateString()}";
            }
        }

        private Control CreateBrowsePanel()
        {
            var panel = new StackPanel { Margin = new Thickness(10) };

            var title = new TextBlock
            {
                Text = "Browse by Severity:",
                FontSize = 14,
                FontWeight = FontWeight.Bold,
                Margin = new Thickness(0, 0, 0, 10)
            };

            var severityPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(0, 0, 0, 15)
            };

            var criticalButton = new Button
            {
                Content = "üö® Critical",
                Background = Brushes.Red,
                Foreground = Brushes.White,
                Margin = new Thickness(0, 0, 10, 0),
                Padding = new Thickness(10, 5)
            };

            var highButton = new Button
            {
                Content = "‚ö†Ô∏è High",
                Background = Brushes.Orange,
                Foreground = Brushes.White,
                Margin = new Thickness(0, 0, 10, 0),
                Padding = new Thickness(10, 5)
            };

            var mediumButton = new Button
            {
                Content = "üü° Medium",
                Background = Brushes.Yellow,
                Foreground = Brushes.Black,
                Margin = new Thickness(0, 0, 10, 0),
                Padding = new Thickness(10, 5)
            };

            var lowButton = new Button
            {
                Content = "üü¢ Low",
                Background = Brushes.Green,
                Foreground = Brushes.White,
                Padding = new Thickness(10, 5)
            };

            criticalButton.Click += (_, _) => ShowSeverityResults("Critical");
            highButton.Click += (_, _) => ShowSeverityResults("High");
            mediumButton.Click += (_, _) => ShowSeverityResults("Medium");
            lowButton.Click += (_, _) => ShowSeverityResults("Low");

            severityPanel.Children.Add(criticalButton);
            severityPanel.Children.Add(highButton);
            severityPanel.Children.Add(mediumButton);
            severityPanel.Children.Add(lowButton);

            var resultsList = new ListBox { Height = 350 };

            panel.Children.Add(title);
            panel.Children.Add(severityPanel);
            panel.Children.Add(resultsList);

            return panel;
        }

        private Control CreateDetailsPanel()
        {
            var panel = new StackPanel { Margin = new Thickness(10) };

            var title = new TextBlock
            {
                Text = "Exploit Details:",
                FontSize = 14,
                FontWeight = FontWeight.Bold,
                Margin = new Thickness(0, 0, 0, 10)
            };

            var detailsText = new TextBox
            {
                Text = "Select an exploit from the search results to view details here.",
                Height = 400,
                IsReadOnly = true,
                TextWrapping = TextWrapping.Wrap,
                Background = Brushes.LightGray
            };

            panel.Children.Add(title);
            panel.Children.Add(detailsText);

            return panel;
        }

        private void ShowSeverityResults(string severity)
        {
            if (_resultsList == null) return;

            _resultsList.Items.Clear();

            var exploits = ExploitDatabase.FindBySeverity(severity);

            if (exploits.Any())
            {
                foreach (var exploit in exploits)
                {
                    _resultsList.Items.Add($"{exploit.CVE} - {exploit.Title}");
                }
                UpdateStatus($"‚úÖ Found {exploits.Count} {severity.ToLower()} severity exploits");
            }
            else
            {
                _resultsList.Items.Add($"No {severity.ToLower()} severity exploits found.");
                UpdateStatus($"‚ùå No {severity.ToLower()} severity exploits found");
            }
        }
    }
}
