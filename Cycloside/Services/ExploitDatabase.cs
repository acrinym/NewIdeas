using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Cycloside.Services;

namespace Cycloside.Services
{
    /// <summary>
    /// Exploit Database - Local vulnerability and exploit information database
    /// Provides offline access to CVE data, exploit information, and mitigation strategies
    /// </summary>
    public static class ExploitDatabase
    {
        private static readonly string _dbPath = Path.Combine(AppContext.BaseDirectory, "Data", "exploit-database.json");
        private static readonly ObservableCollection<ExploitEntry> _database = new();
        private static readonly Dictionary<string, ExploitEntry> _cveIndex = new();
        private static bool _isLoaded = false;

        public static ObservableCollection<ExploitEntry> Database => _database;
        public static bool IsLoaded => _isLoaded;

        /// <summary>
        /// Initialize the exploit database
        /// </summary>
        public static async Task InitializeAsync()
        {
            Logger.Log("üîç Initializing Exploit Database...");

            try
            {
                await LoadDatabaseAsync();
                _isLoaded = true;
                Logger.Log($"‚úÖ Exploit Database loaded: {_database.Count} entries");
            }
            catch (Exception ex)
            {
                Logger.Log($"‚ùå Exploit Database initialization failed: {ex.Message}");
            }
        }

        /// <summary>
        /// Load exploit database from file
        /// </summary>
        private static async Task LoadDatabaseAsync()
        {
            try
            {
                if (!File.Exists(_dbPath))
                {
                    await CreateSampleDatabaseAsync();
                    return;
                }

                var json = await File.ReadAllTextAsync(_dbPath);
                var entries = JsonSerializer.Deserialize<List<ExploitEntry>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (entries != null)
                {
                    foreach (var entry in entries)
                    {
                        _database.Add(entry);
                        if (!string.IsNullOrEmpty(entry.CVE))
                        {
                            _cveIndex[entry.CVE] = entry;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Log($"‚ùå Failed to load exploit database: {ex.Message}");
                await CreateSampleDatabaseAsync();
            }
        }

        /// <summary>
        /// Create a sample database for demonstration
        /// </summary>
        private static async Task CreateSampleDatabaseAsync()
        {
            Logger.Log("üìö Creating sample exploit database...");

            var sampleEntries = new List<ExploitEntry>
            {
                new ExploitEntry
                {
                    CVE = "CVE-2021-44228",
                    Title = "Apache Log4j Remote Code Execution",
                    Description = "Critical remote code execution vulnerability in Apache Log4j",
                    Severity = "Critical",
                    CVSS = 10.0,
                    AffectedSoftware = new[] { "Apache Log4j 2.0-beta9 through 2.14.1" },
                    ExploitType = "Remote Code Execution",
                    Mitigation = "Upgrade to Log4j 2.15.0 or later, or apply available patches",
                    References = new[] { "https://nvd.nist.gov/vuln/detail/CVE-2021-44228" },
                    DateDiscovered = new DateTime(2021, 11, 24),
                    DateAdded = DateTime.Now
                },
                new ExploitEntry
                {
                    CVE = "CVE-2023-23397",
                    Title = "Microsoft Outlook Elevation of Privilege",
                    Description = "Privilege escalation vulnerability in Microsoft Outlook",
                    Severity = "High",
                    CVSS = 9.8,
                    AffectedSoftware = new[] { "Microsoft Outlook 2013, 2016, 2019, 2021" },
                    ExploitType = "Privilege Escalation",
                    Mitigation = "Apply Microsoft security updates, disable NTLM authentication",
                    References = new[] { "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-23397" },
                    DateDiscovered = new DateTime(2023, 3, 14),
                    DateAdded = DateTime.Now
                },
                new ExploitEntry
                {
                    CVE = "CVE-2022-30190",
                    Title = "Microsoft Windows Support Diagnostic Tool RCE",
                    Description = "Remote code execution in Microsoft Windows MSDT",
                    Severity = "Critical",
                    CVSS = 7.8,
                    AffectedSoftware = new[] { "Windows 7 through Windows 11" },
                    ExploitType = "Remote Code Execution",
                    Mitigation = "Disable MSDT URL protocol, apply Windows security updates",
                    References = new[] { "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-30190" },
                    DateDiscovered = new DateTime(2022, 5, 30),
                    DateAdded = DateTime.Now
                },
                new ExploitEntry
                {
                    CVE = "CVE-2017-0144",
                    Title = "EternalBlue SMB Vulnerability",
                    Description = "Remote code execution vulnerability in Microsoft SMBv1",
                    Severity = "Critical",
                    CVSS = 9.3,
                    AffectedSoftware = new[] { "Windows XP, 7, 8, 10, Server 2003-2016" },
                    ExploitType = "Remote Code Execution",
                    Mitigation = "Disable SMBv1, apply MS17-010 patch, use SMBv3",
                    References = new[] { "https://nvd.nist.gov/vuln/detail/CVE-2017-0144" },
                    DateDiscovered = new DateTime(2017, 3, 14),
                    DateAdded = DateTime.Now
                },
                new ExploitEntry
                {
                    CVE = "CVE-2014-0160",
                    Title = "Heartbleed OpenSSL Vulnerability",
                    Description = "Memory disclosure vulnerability in OpenSSL",
                    Severity = "Critical",
                    CVSS = 7.5,
                    AffectedSoftware = new[] { "OpenSSL 1.0.1 through 1.0.1f" },
                    ExploitType = "Information Disclosure",
                    Mitigation = "Upgrade OpenSSL to 1.0.1g or later, regenerate private keys",
                    References = new[] { "https://heartbleed.com/" },
                    DateDiscovered = new DateTime(2014, 4, 7),
                    DateAdded = DateTime.Now
                }
            };

            // Save to file
            var json = JsonSerializer.Serialize(sampleEntries, new JsonSerializerOptions
            {
                WriteIndented = true
            });

            await File.WriteAllTextAsync(_dbPath, json);

            // Load into memory
            foreach (var entry in sampleEntries)
            {
                _database.Add(entry);
                if (!string.IsNullOrEmpty(entry.CVE))
                {
                    _cveIndex[entry.CVE] = entry;
                }
            }

            Logger.Log($"‚úÖ Sample exploit database created: {_database.Count} entries");
        }

        /// <summary>
        /// Search exploits by CVE ID
        /// </summary>
        public static ExploitEntry? FindByCVE(string cve)
        {
            if (_cveIndex.TryGetValue(cve, out var entry))
            {
                return entry;
            }
            return null;
        }

        /// <summary>
        /// Search exploits by severity
        /// </summary>
        public static List<ExploitEntry> FindBySeverity(string severity)
        {
            return _database.Where(e => e.Severity.Equals(severity, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        /// <summary>
        /// Search exploits by affected software
        /// </summary>
        public static List<ExploitEntry> FindBySoftware(string software)
        {
            return _database.Where(e =>
                e.AffectedSoftware?.Any(s => s.Contains(software, StringComparison.OrdinalIgnoreCase)) == true
            ).ToList();
        }

        /// <summary>
        /// Get exploits by date range
        /// </summary>
        public static List<ExploitEntry> GetExploitsByDateRange(DateTime startDate, DateTime endDate)
        {
            return _database.Where(e =>
                e.DateDiscovered >= startDate && e.DateDiscovered <= endDate
            ).ToList();
        }

        /// <summary>
        /// Get statistics about the exploit database
        /// </summary>
        public static ExploitDatabaseStats GetStats()
        {
            var stats = new ExploitDatabaseStats
            {
                TotalEntries = _database.Count,
                CriticalCount = _database.Count(e => e.Severity == "Critical"),
                HighCount = _database.Count(e => e.Severity == "High"),
                MediumCount = _database.Count(e => e.Severity == "Medium"),
                LowCount = _database.Count(e => e.Severity == "Low"),
                LastUpdated = _database.Any() ? _database.Max(e => e.DateAdded) : DateTime.MinValue
            };

            return stats;
        }

        /// <summary>
        /// Add a new exploit entry to the database
        /// </summary>
        public static async Task<bool> AddExploitAsync(ExploitEntry entry)
        {
            try
            {
                _database.Add(entry);
                if (!string.IsNullOrEmpty(entry.CVE))
                {
                    _cveIndex[entry.CVE] = entry;
                }

                await SaveDatabaseAsync();
                Logger.Log($"‚úÖ Added exploit entry: {entry.Title}");
                return true;
            }
            catch (Exception ex)
            {
                Logger.Log($"‚ùå Failed to add exploit entry: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Save database to file
        /// </summary>
        private static async Task SaveDatabaseAsync()
        {
            try
            {
                var entries = _database.ToList();
                var json = JsonSerializer.Serialize(entries, new JsonSerializerOptions
                {
                    WriteIndented = true
                });

                await File.WriteAllTextAsync(_dbPath, json);
            }
            catch (Exception ex)
            {
                Logger.Log($"‚ùå Failed to save exploit database: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Exploit database entry
    /// </summary>
    public class ExploitEntry
    {
        public string CVE { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Severity { get; set; } = "Medium";
        public double CVSS { get; set; }
        public string[]? AffectedSoftware { get; set; }
        public string ExploitType { get; set; } = "";
        public string Mitigation { get; set; } = "";
        public string[]? References { get; set; }
        public DateTime DateDiscovered { get; set; }
        public DateTime DateAdded { get; set; }
        public string ExploitCode { get; set; } = "";
        public string ProofOfConcept { get; set; } = "";
        public string[]? Tags { get; set; }
    }

    /// <summary>
    /// Exploit database statistics
    /// </summary>
    public class ExploitDatabaseStats
    {
        public int TotalEntries { get; set; }
        public int CriticalCount { get; set; }
        public int HighCount { get; set; }
        public int MediumCount { get; set; }
        public int LowCount { get; set; }
        public DateTime LastUpdated { get; set; }
    }
}
