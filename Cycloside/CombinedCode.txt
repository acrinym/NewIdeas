--- FILE: D:\github\newideas\Cycloside\bin\Debug\net8.0\Cycloside.deps.json ---

{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Cycloside/1.0.0": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.AvaloniaEdit": "11.3.0",
          "Avalonia.Controls.DataGrid": "11.3.1",
          "Avalonia.Desktop": "11.3.1",
          "Avalonia.Diagnostics": "11.3.1",
          "Avalonia.Fonts.Inter": "11.3.1",
          "Avalonia.Markup.Xaml.Loader": "11.3.1",
          "Avalonia.Themes.Fluent": "11.3.1",
          "CliWrap": "3.7.0",
          "CommunityToolkit.Mvvm": "8.2.0",
          "Microsoft.CodeAnalysis.CSharp": "4.9.2",
          "MoonSharp": "2.0.0",
          "NAudio": "2.2.1",
          "SharpHook": "5.0.0",
          "System.CommandLine": "2.0.0-beta4.22272.1",
          "System.Drawing.Common": "8.0.0"
        },
        "runtime": {
          "Cycloside.dll": {}
        }
      },
      "Avalonia/11.3.1": {
        "dependencies": {
          "Avalonia.BuildServices": "0.0.31",
          "Avalonia.Remote.Protocol": "11.3.1",
          "MicroCom.Runtime": "0.11.0"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Base.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Controls.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.DesignerSupport.dll": {
            "assemblyVersion": "0.7.0.0",
            "fileVersion": "0.7.0.0"
          },
          "lib/net8.0/Avalonia.Dialogs.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Markup.Xaml.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Markup.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Metal.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.MicroCom.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.OpenGL.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Vulkan.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
        "runtimeTargets": {
          "runtimes/win-arm64/native/av_libglesv2.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "2.1.25606.0"
          },
          "runtimes/win-x64/native/av_libglesv2.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "2.1.25606.0"
          },
          "runtimes/win-x86/native/av_libglesv2.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "2.1.25606.0"
          }
        }
      },
      "Avalonia.AvaloniaEdit/11.3.0": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net6.0/AvaloniaEdit.dll": {
            "assemblyVersion": "11.3.0.0",
            "fileVersion": "11.3.0.0"
          }
        }
      },
      "Avalonia.BuildServices/0.0.31": {},
      "Avalonia.Controls.ColorPicker/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Remote.Protocol": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Controls.ColorPicker.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Controls.DataGrid/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Controls.DataGrid.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Desktop/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Native": "11.3.1",
          "Avalonia.Skia": "11.3.1",
          "Avalonia.Win32": "11.3.1",
          "Avalonia.X11": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Desktop.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Diagnostics/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Controls.ColorPicker": "11.3.1",
          "Avalonia.Themes.Simple": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Diagnostics.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Fonts.Inter/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Fonts.Inter.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.FreeDesktop/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Tmds.DBus.Protocol": "0.21.2"
        },
        "runtime": {
          "lib/net8.0/Avalonia.FreeDesktop.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Markup.Xaml.Loader/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Markup.Xaml.Loader.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Native/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Native.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        },
        "runtimeTargets": {
          "runtimes/osx/native/libAvaloniaNative.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "Avalonia.Remote.Protocol/11.3.1": {
        "runtime": {
          "lib/net8.0/Avalonia.Remote.Protocol.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Skia/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "HarfBuzzSharp": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.Linux": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.WebAssembly": "8.3.1.1",
          "SkiaSharp": "2.88.9",
          "SkiaSharp.NativeAssets.Linux": "2.88.9",
          "SkiaSharp.NativeAssets.WebAssembly": "2.88.9"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Skia.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Themes.Fluent/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Fluent.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Themes.Simple/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Simple.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Win32/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Angle.Windows.Natives": "2.1.25547.20250602"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Win32.Automation.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Win32.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.X11/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.FreeDesktop": "11.3.1",
          "Avalonia.Skia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.X11.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "CliWrap/3.7.0": {
        "dependencies": {
          "System.Management": "9.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/CliWrap.dll": {
            "assemblyVersion": "3.7.0.0",
            "fileVersion": "3.7.0.0"
          }
        }
      },
      "CommunityToolkit.Mvvm/8.2.0": {
        "runtime": {
          "lib/net6.0/CommunityToolkit.Mvvm.dll": {
            "assemblyVersion": "8.2.0.0",
            "fileVersion": "8.2.0.1"
          }
        }
      },
      "HarfBuzzSharp/8.3.1.1": {
        "dependencies": {
          "HarfBuzzSharp.NativeAssets.Win32": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.macOS": "8.3.1.1"
        },
        "runtime": {
          "lib/net8.0/HarfBuzzSharp.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "8.3.1.1"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
        "runtimeTargets": {
          "runtimes/linux-arm/native/libHarfBuzzSharp.so": {
            "rid": "linux-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-arm64/native/libHarfBuzzSharp.so": {
            "rid": "linux-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-loongarch64/native/libHarfBuzzSharp.so": {
            "rid": "linux-loongarch64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-arm/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-arm64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-loongarch64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-loongarch64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-riscv64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-riscv64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-x64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-riscv64/native/libHarfBuzzSharp.so": {
            "rid": "linux-riscv64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x64/native/libHarfBuzzSharp.so": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x86/native/libHarfBuzzSharp.so": {
            "rid": "linux-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
        "runtimeTargets": {
          "runtimes/osx/native/libHarfBuzzSharp.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {},
      "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
        "runtimeTargets": {
          "runtimes/win-arm64/native/libHarfBuzzSharp.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/libHarfBuzzSharp.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x86/native/libHarfBuzzSharp.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "MicroCom.Runtime/0.11.0": {
        "runtime": {
          "lib/net5.0/MicroCom.Runtime.dll": {
            "assemblyVersion": "0.11.0.0",
            "fileVersion": "0.11.0.0"
          }
        }
      },
      "Microsoft.CodeAnalysis.Analyzers/3.3.4": {},
      "Microsoft.CodeAnalysis.Common/4.9.2": {
        "dependencies": {
          "Microsoft.CodeAnalysis.Analyzers": "3.3.4",
          "System.Collections.Immutable": "8.0.0",
          "System.Reflection.Metadata": "8.0.0",
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        },
        "runtime": {
          "lib/net7.0/Microsoft.CodeAnalysis.dll": {
            "assemblyVersion": "4.9.0.0",
            "fileVersion": "4.900.224.12906"
          }
        },
        "resources": {
          "lib/net7.0/cs/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "cs"
          },
          "lib/net7.0/de/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "de"
          },
          "lib/net7.0/es/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "es"
          },
          "lib/net7.0/fr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "fr"
          },
          "lib/net7.0/it/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "it"
          },
          "lib/net7.0/ja/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ja"
          },
          "lib/net7.0/ko/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ko"
          },
          "lib/net7.0/pl/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pl"
          },
          "lib/net7.0/pt-BR/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/net7.0/ru/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ru"
          },
          "lib/net7.0/tr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "tr"
          },
          "lib/net7.0/zh-Hans/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/net7.0/zh-Hant/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.CSharp/4.9.2": {
        "dependencies": {
          "Microsoft.CodeAnalysis.Common": "4.9.2"
        },
        "runtime": {
          "lib/net7.0/Microsoft.CodeAnalysis.CSharp.dll": {
            "assemblyVersion": "4.9.0.0",
            "fileVersion": "4.900.224.12906"
          }
        },
        "resources": {
          "lib/net7.0/cs/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "cs"
          },
          "lib/net7.0/de/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "de"
          },
          "lib/net7.0/es/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "es"
          },
          "lib/net7.0/fr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "fr"
          },
          "lib/net7.0/it/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "it"
          },
          "lib/net7.0/ja/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ja"
          },
          "lib/net7.0/ko/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ko"
          },
          "lib/net7.0/pl/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pl"
          },
          "lib/net7.0/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/net7.0/ru/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ru"
          },
          "lib/net7.0/tr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "tr"
          },
          "lib/net7.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/net7.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.NETCore.Platforms/3.1.0": {},
      "Microsoft.Win32.Registry/4.7.0": {
        "dependencies": {
          "System.Security.AccessControl": "4.7.0",
          "System.Security.Principal.Windows": "4.7.0"
        }
      },
      "Microsoft.Win32.SystemEvents/8.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Win32.SystemEvents.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net8.0/Microsoft.Win32.SystemEvents.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "MoonSharp/2.0.0": {
        "runtime": {
          "lib/netstandard1.6/MoonSharp.Interpreter.dll": {
            "assemblyVersion": "2.0.0.0",
            "fileVersion": "2.0.0.0"
          }
        }
      },
      "NAudio/2.2.1": {
        "dependencies": {
          "NAudio.Asio": "2.2.1",
          "NAudio.Core": "2.2.1",
          "NAudio.Midi": "2.2.1",
          "NAudio.Wasapi": "2.2.1",
          "NAudio.WinMM": "2.2.1"
        },
        "runtime": {
          "lib/net6.0/NAudio.dll": {
            "assemblyVersion": "2.2.1.0",
            "fileVersion": "2.2.1.0"
          }
        }
      },
      "NAudio.Asio/2.2.1": {
        "dependencies": {
          "Microsoft.Win32.Registry": "4.7.0",
          "NAudio.Core": "2.2.1"
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Asio.dll": {
            "assemblyVersion": "2.2.1.0",
            "fileVersion": "2.2.1.0"
          }
        }
      },
      "NAudio.Core/2.2.1": {
        "runtime": {
          "lib/netstandard2.0/NAudio.Core.dll": {
            "assemblyVersion": "2.2.1.0",
            "fileVersion": "2.2.1.0"
          }
        }
      },
      "NAudio.Midi/2.2.1": {
        "dependencies": {
          "NAudio.Core": "2.2.1"
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Midi.dll": {
            "assemblyVersion": "2.2.1.0",
            "fileVersion": "2.2.1.0"
          }
        }
      },
      "NAudio.Wasapi/2.2.1": {
        "dependencies": {
          "NAudio.Core": "2.2.1"
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Wasapi.dll": {
            "assemblyVersion": "2.2.1.0",
            "fileVersion": "2.2.1.0"
          }
        }
      },
      "NAudio.WinMM/2.2.1": {
        "dependencies": {
          "Microsoft.Win32.Registry": "4.7.0",
          "NAudio.Core": "2.2.1"
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.WinMM.dll": {
            "assemblyVersion": "2.2.1.0",
            "fileVersion": "2.2.1.0"
          }
        }
      },
      "SharpHook/5.0.0": {
        "runtime": {
          "lib/net7.0/SharpHook.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.0.0.0"
          }
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libuiohook.so": {
            "rid": "linux-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-arm64/native/libuiohook.so": {
            "rid": "linux-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x64/native/libuiohook.so": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/maccatalyst-arm64/native/libuiohook.dylib": {
            "rid": "maccatalyst-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/maccatalyst-x64/native/libuiohook.dylib": {
            "rid": "maccatalyst-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/osx-arm64/native/libuiohook.dylib": {
            "rid": "osx-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/osx-x64/native/libuiohook.dylib": {
            "rid": "osx-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-arm64/native/uiohook.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/uiohook.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x86/native/uiohook.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "SkiaSharp/2.88.9": {
        "dependencies": {
          "SkiaSharp.NativeAssets.Win32": "2.88.9",
          "SkiaSharp.NativeAssets.macOS": "2.88.9"
        },
        "runtime": {
          "lib/net6.0/SkiaSharp.dll": {
            "assemblyVersion": "2.88.0.0",
            "fileVersion": "2.88.9.0"
          }
        }
      },
      "SkiaSharp.NativeAssets.Linux/2.88.9": {
        "dependencies": {
          "SkiaSharp": "2.88.9"
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libSkiaSharp.so": {
            "rid": "linux-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-arm64/native/libSkiaSharp.so": {
            "rid": "linux-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-x64/native/libSkiaSharp.so": {
            "rid": "linux-musl-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x64/native/libSkiaSharp.so": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "SkiaSharp.NativeAssets.macOS/2.88.9": {
        "runtimeTargets": {
          "runtimes/osx/native/libSkiaSharp.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {},
      "SkiaSharp.NativeAssets.Win32/2.88.9": {
        "runtimeTargets": {
          "runtimes/win-arm64/native/libSkiaSharp.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/libSkiaSharp.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x86/native/libSkiaSharp.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "System.CodeDom/9.0.0": {
        "runtime": {
          "lib/net8.0/System.CodeDom.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Collections.Immutable/8.0.0": {},
      "System.CommandLine/2.0.0-beta4.22272.1": {
        "runtime": {
          "lib/net6.0/System.CommandLine.dll": {
            "assemblyVersion": "2.0.0.0",
            "fileVersion": "2.0.22.27201"
          }
        },
        "resources": {
          "lib/net6.0/cs/System.CommandLine.resources.dll": {
            "locale": "cs"
          },
          "lib/net6.0/de/System.CommandLine.resources.dll": {
            "locale": "de"
          },
          "lib/net6.0/es/System.CommandLine.resources.dll": {
            "locale": "es"
          },
          "lib/net6.0/fr/System.CommandLine.resources.dll": {
            "locale": "fr"
          },
          "lib/net6.0/it/System.CommandLine.resources.dll": {
            "locale": "it"
          },
          "lib/net6.0/ja/System.CommandLine.resources.dll": {
            "locale": "ja"
          },
          "lib/net6.0/ko/System.CommandLine.resources.dll": {
            "locale": "ko"
          },
          "lib/net6.0/pl/System.CommandLine.resources.dll": {
            "locale": "pl"
          },
          "lib/net6.0/pt-BR/System.CommandLine.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/net6.0/ru/System.CommandLine.resources.dll": {
            "locale": "ru"
          },
          "lib/net6.0/tr/System.CommandLine.resources.dll": {
            "locale": "tr"
          },
          "lib/net6.0/zh-Hans/System.CommandLine.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/net6.0/zh-Hant/System.CommandLine.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "System.Drawing.Common/8.0.0": {
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/System.Drawing.Common.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53105"
          }
        }
      },
      "System.IO.Pipelines/8.0.0": {
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "System.Management/9.0.0": {
        "dependencies": {
          "System.CodeDom": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/System.Management.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net8.0/System.Management.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Reflection.Metadata/8.0.0": {
        "dependencies": {
          "System.Collections.Immutable": "8.0.0"
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "System.Security.AccessControl/4.7.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "3.1.0",
          "System.Security.Principal.Windows": "4.7.0"
        }
      },
      "System.Security.Principal.Windows/4.7.0": {},
      "Tmds.DBus.Protocol/0.21.2": {
        "dependencies": {
          "System.IO.Pipelines": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Tmds.DBus.Protocol.dll": {
            "assemblyVersion": "0.21.2.0",
            "fileVersion": "0.21.2.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Cycloside/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Avalonia/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XHZAj64Ywp3su68NBckeccY1N4Cig8J/iTzMEszWDnAWQbH8xgHftcr+DhS7PrANM/uXyFGP9n4+4v3vhJDeWA==",
      "path": "avalonia/11.3.1",
      "hashPath": "avalonia.11.3.1.nupkg.sha512"
    },
    "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZL0VLc4s9rvNNFt19Pxm5UNAkmKNylugAwJPX9ulXZ6JWs/l6XZihPWWTyezaoNOVyEPU8YbURtW7XMAtqXH5A==",
      "path": "avalonia.angle.windows.natives/2.1.25547.20250602",
      "hashPath": "avalonia.angle.windows.natives.2.1.25547.20250602.nupkg.sha512"
    },
    "Avalonia.AvaloniaEdit/11.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9M/jJb4DPqQmKtNMZn6+vpqlf+ZGMtK8vEBpPVP3De1xRCu1hv4ZAtoA8hY6bYj2hgv/luete3ixoOsEQ++YJQ==",
      "path": "avalonia.avaloniaedit/11.3.0",
      "hashPath": "avalonia.avaloniaedit.11.3.0.nupkg.sha512"
    },
    "Avalonia.BuildServices/0.0.31": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KmCN6Hc+45q4OnF10ge450yVUvWuxU6bdQiyKqiSvrHKpahNrEdk0kG6Ip6GHk2SKOCttGQuA206JVdkldEENg==",
      "path": "avalonia.buildservices/0.0.31",
      "hashPath": "avalonia.buildservices.0.0.31.nupkg.sha512"
    },
    "Avalonia.Controls.ColorPicker/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+JXaqgsYtEhvi8KFYtdVriHX0P1f1PAdzNckYGbUc7s3COTLdtVRxAfbQ77SKIMx9nJu5H73X4A7y2EPB5pXdQ==",
      "path": "avalonia.controls.colorpicker/11.3.1",
      "hashPath": "avalonia.controls.colorpicker.11.3.1.nupkg.sha512"
    },
    "Avalonia.Controls.DataGrid/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-CWPot/hfe7vmkJBU/vsvhCMO3cxrvh/+WRX0jX65NBxARBUUdm/WOz9hlBlkm3GN796vdd1KJnBlXW/vsBgBLA==",
      "path": "avalonia.controls.datagrid/11.3.1",
      "hashPath": "avalonia.controls.datagrid.11.3.1.nupkg.sha512"
    },
    "Avalonia.Desktop/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uFldiNKdZIGGR49CglbWW1xx9aSfJBDf0Yx2jtntZxXQlew1edF8/JEja8tmDgcFjdsrz2HZtIpDbg4ilCjcZQ==",
      "path": "avalonia.desktop/11.3.1",
      "hashPath": "avalonia.desktop.11.3.1.nupkg.sha512"
    },
    "Avalonia.Diagnostics/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Jw6JgaJJRc3Y3f+je/WnyXgYixDLq/u74qW2isDC7s1/1nmRJR14oklF6Gc6cIVhLFw0JbFJEn6ZHSOwKAsLg==",
      "path": "avalonia.diagnostics/11.3.1",
      "hashPath": "avalonia.diagnostics.11.3.1.nupkg.sha512"
    },
    "Avalonia.Fonts.Inter/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-H/K3IGbo4Eo1jYTCk64mVBECX1TnSfNwVDwVhPoHVkpb6QVZmBB1UilImMLpBYtAYG49O4JILhB5p/rdfeCjZw==",
      "path": "avalonia.fonts.inter/11.3.1",
      "hashPath": "avalonia.fonts.inter.11.3.1.nupkg.sha512"
    },
    "Avalonia.FreeDesktop/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OXR5lDGz0ACWrvyJPisiLk6j97L8keDxKXFbSI6t4gfM9QiqIcBF7aATbEMx1d4oiey3tH5DgcpzVmop5jmvFA==",
      "path": "avalonia.freedesktop/11.3.1",
      "hashPath": "avalonia.freedesktop.11.3.1.nupkg.sha512"
    },
    "Avalonia.Markup.Xaml.Loader/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jHZUia8I/kyhtYLgnE5imXd9PPx3k5os3KGH0iILTrerAiVOnKCHHBwhFf82PW4OORNu2MaoNaby5u/Em7HPCg==",
      "path": "avalonia.markup.xaml.loader/11.3.1",
      "hashPath": "avalonia.markup.xaml.loader.11.3.1.nupkg.sha512"
    },
    "Avalonia.Native/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ts4PWrpql5mowsxAks/WBI/VheU329CwPE12grEZD46moOhmrQ/tuX8ge8lyAhhVy8h8LFC5KImdDIkhlbeVzQ==",
      "path": "avalonia.native/11.3.1",
      "hashPath": "avalonia.native.11.3.1.nupkg.sha512"
    },
    "Avalonia.Remote.Protocol/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IujOppxgsmjNP2oCas++LWNUTqwzSko7ey60+0tHfy7Q6vnTmtL+0vQidtmoKYea/NYvWqIw+YxLUY3XRwYhSQ==",
      "path": "avalonia.remote.protocol/11.3.1",
      "hashPath": "avalonia.remote.protocol.11.3.1.nupkg.sha512"
    },
    "Avalonia.Skia/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VSBecGRgd3xtBwFzWNuoSVP1gUO+BV9zX1zTUrw/ftdZKmtOe8m3VT7u2TCBvUSD6nJrSNe6JXHE585kCQFjcQ==",
      "path": "avalonia.skia/11.3.1",
      "hashPath": "avalonia.skia.11.3.1.nupkg.sha512"
    },
    "Avalonia.Themes.Fluent/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3ImtHxSaG1RGk3uY3+dLoAlxrmE3Y2QzqMbIaQgsdEbFxUqKvl2m32Yg/yw00+2nrMy2KGQLL9tkbnvHPWp5OA==",
      "path": "avalonia.themes.fluent/11.3.1",
      "hashPath": "avalonia.themes.fluent.11.3.1.nupkg.sha512"
    },
    "Avalonia.Themes.Simple/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bUr8cN1Wu9NUro/RHZZkBJdv08+KVtqSUGBMNQZLjyYhxQtgrAo5tTsqWPOjPCCKcIcH+db3VOktWlPfGvz8Fw==",
      "path": "avalonia.themes.simple/11.3.1",
      "hashPath": "avalonia.themes.simple.11.3.1.nupkg.sha512"
    },
    "Avalonia.Win32/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-H0jcthY+CHXJq/l/uVLG1SloNowp/6buIxuIv3J8RKiVW6L2XD2uv89KP/n1c2SMQrklvRdwPzOV8WGsYNv85w==",
      "path": "avalonia.win32/11.3.1",
      "hashPath": "avalonia.win32.11.3.1.nupkg.sha512"
    },
    "Avalonia.X11/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ldr9zW6BFlHvPUpc9UYUKtrtUJzgfZ8ggnp8NWBBZEs0iqIQmZbk9cYJcAxpsL9P1w1MKiaaOBYAKeSxHUJgJA==",
      "path": "avalonia.x11/11.3.1",
      "hashPath": "avalonia.x11.11.3.1.nupkg.sha512"
    },
    "CliWrap/3.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-2RgU3zmQDAD4S8Aq4igWRF31VzzH/zE6kdecLfeozoPZlibahBs9AGSqrk8B6U13K2A65dFRLg/0tNBtBaOH/A==",
      "path": "cliwrap/3.7.0",
      "hashPath": "cliwrap.3.7.0.nupkg.sha512"
    },
    "CommunityToolkit.Mvvm/8.2.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-F883u+B0AVUkRZS+VQBiZEJiqlGiiQhGA8Ejy1/Y8fl4ecBmSd+HYuDso0iiUhh+UxRDjp2aTQ7jGkuL2S4NrA==",
      "path": "communitytoolkit.mvvm/8.2.0",
      "hashPath": "communitytoolkit.mvvm.8.2.0.nupkg.sha512"
    },
    "HarfBuzzSharp/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tLZN66oe/uiRPTZfrCU4i8ScVGwqHNh5MHrXj0yVf4l7Mz0FhTGnQ71RGySROTmdognAs0JtluHkL41pIabWuQ==",
      "path": "harfbuzzsharp/8.3.1.1",
      "hashPath": "harfbuzzsharp.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3EZ1mpIiKWRLL5hUYA82ZHteeDIVaEA/Z0rA/wU6tjx6crcAkJnBPwDXZugBSfo8+J3EznvRJf49uMsqYfKrHg==",
      "path": "harfbuzzsharp.nativeassets.linux/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.linux.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jbtCsgftcaFLCA13tVKo5iWdElJScrulLTKJre36O4YQTIlwDtPPqhRZNk+Y0vv4D1gxbscasGRucUDfS44ofQ==",
      "path": "harfbuzzsharp.nativeassets.macos/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.macos.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-loJweK2u/mH/3C2zBa0ggJlITIszOkK64HLAZB7FUT670dTg965whLFYHDQo69NmC4+d9UN0icLC9VHidXaVCA==",
      "path": "harfbuzzsharp.nativeassets.webassembly/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.webassembly.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-UsJtQsfAJoFDZrXc4hCUfRPMqccfKZ0iumJ/upcUjz/cmsTgVFGNEL5yaJWmkqsuFYdMWbj/En5/kS4PFl9hBA==",
      "path": "harfbuzzsharp.nativeassets.win32/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.win32.8.3.1.1.nupkg.sha512"
    },
    "MicroCom.Runtime/0.11.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MEnrZ3UIiH40hjzMDsxrTyi8dtqB5ziv3iBeeU4bXsL/7NLSal9F1lZKpK+tfBRnUoDSdtcW3KufE4yhATOMCA==",
      "path": "microcom.runtime/0.11.0",
      "hashPath": "microcom.runtime.0.11.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Analyzers/3.3.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-AxkxcPR+rheX0SmvpLVIGLhOUXAKG56a64kV9VQZ4y9gR9ZmPXnqZvHJnmwLSwzrEP6junUF11vuc+aqo5r68g==",
      "path": "microsoft.codeanalysis.analyzers/3.3.4",
      "hashPath": "microsoft.codeanalysis.analyzers.3.3.4.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Common/4.9.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-M5PThug7b2AdxL7xKmQs50KzAQTl9jENw5jMT3iUt16k+DAFlw1S87juU3UuPs3gvBm8trMBSOEvSFDr31c9Vw==",
      "path": "microsoft.codeanalysis.common/4.9.2",
      "hashPath": "microsoft.codeanalysis.common.4.9.2.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.CSharp/4.9.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HGIo7E9Mf3exAJbUdYpDFfLoYkSVaHDJXPyusWTYUTBaOPCowGw+Gap5McE1w+K+ryIXre72oiqL88sQHmHBmg==",
      "path": "microsoft.codeanalysis.csharp/4.9.2",
      "hashPath": "microsoft.codeanalysis.csharp.4.9.2.nupkg.sha512"
    },
    "Microsoft.NETCore.Platforms/3.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-z7aeg8oHln2CuNulfhiLYxCVMPEwBl3rzicjvIX+4sUuCwvXw5oXQEtbiU2c0z4qYL5L3Kmx0mMA/+t/SbY67w==",
      "path": "microsoft.netcore.platforms/3.1.0",
      "hashPath": "microsoft.netcore.platforms.3.1.0.nupkg.sha512"
    },
    "Microsoft.Win32.Registry/4.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KSrRMb5vNi0CWSGG1++id2ZOs/1QhRqROt+qgbEAdQuGjGrFcl4AOl4/exGPUYz2wUnU42nvJqon1T3U0kPXLA==",
      "path": "microsoft.win32.registry/4.7.0",
      "hashPath": "microsoft.win32.registry.4.7.0.nupkg.sha512"
    },
    "Microsoft.Win32.SystemEvents/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9opKRyOKMCi2xJ7Bj7kxtZ1r9vbzosMvRrdEhVhDz8j8MoBGgB+WmC94yH839NPH+BclAjtQ/pyagvi/8gDLkw==",
      "path": "microsoft.win32.systemevents/8.0.0",
      "hashPath": "microsoft.win32.systemevents.8.0.0.nupkg.sha512"
    },
    "MoonSharp/2.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uiAcRh7d+53k3xW9pFDJfAFVw4RnjHVCJG05M3oPAVEVwPtFavhg1H/IpC6So4X1j9kJlzuLlA3OghhPcIvc5A==",
      "path": "moonsharp/2.0.0",
      "hashPath": "moonsharp.2.0.0.nupkg.sha512"
    },
    "NAudio/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-c0DzwiyyklM0TP39Y7RObwO3QkWecgM6H60ikiEnsV/aEAJPbj5MFCLaD8BSfKuZe0HGuh9GRGWWlJmSxDc9MA==",
      "path": "naudio/2.2.1",
      "hashPath": "naudio.2.2.1.nupkg.sha512"
    },
    "NAudio.Asio/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-hQglyOT5iT3XuGpBP8ZG0+aoqwRfidHjTNehpoWwX0g6KJEgtH2VaqM2nuJ2mheKZa/IBqB4YQTZVvrIapzfOA==",
      "path": "naudio.asio/2.2.1",
      "hashPath": "naudio.asio.2.2.1.nupkg.sha512"
    },
    "NAudio.Core/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-GgkdP6K/7FqXFo7uHvoqGZTJvW4z8g2IffhOO4JHaLzKCdDOUEzVKtveoZkCuUX8eV2HAINqi7VFqlFndrnz/g==",
      "path": "naudio.core/2.2.1",
      "hashPath": "naudio.core.2.2.1.nupkg.sha512"
    },
    "NAudio.Midi/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6r23ylGo5aeP02WFXsPquz0T0hFJWyh+7t++tz19tc3Kr38NHm+Z9j+FiAv+xkH8tZqXJqus9Q8p6u7bidIgbw==",
      "path": "naudio.midi/2.2.1",
      "hashPath": "naudio.midi.2.2.1.nupkg.sha512"
    },
    "NAudio.Wasapi/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lFfXoqacZZe0WqNChJgGYI+XV/n/61LzPHT3C1CJp4khoxeo2sziyX5wzNYWeCMNbsWxFvT3b3iXeY1UYjBhZw==",
      "path": "naudio.wasapi/2.2.1",
      "hashPath": "naudio.wasapi.2.2.1.nupkg.sha512"
    },
    "NAudio.WinMM/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-xFHRFwH4x6aq3IxRbewvO33ugJRvZFEOfO62i7uQJRUNW2cnu6BeBTHUS0JD5KBucZbHZaYqxQG8dwZ47ezQuQ==",
      "path": "naudio.winmm/2.2.1",
      "hashPath": "naudio.winmm.2.2.1.nupkg.sha512"
    },
    "SharpHook/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-m7Gji4beiOSaK9ljAeRivOLk0HRteeW+1ZITvwuWGRrzNdjAKOLRTv4pMF/JaY6ljzb9IocHY0tIgHT8ZZswkg==",
      "path": "sharphook/5.0.0",
      "hashPath": "sharphook.5.0.0.nupkg.sha512"
    },
    "SkiaSharp/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3MD5VHjXXieSHCleRLuaTXmL2pD0mB7CcOB1x2kA1I4bhptf4e3R27iM93264ZYuAq6mkUyX5XbcxnZvMJYc1Q==",
      "path": "skiasharp/2.88.9",
      "hashPath": "skiasharp.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.Linux/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cWSaJKVPWAaT/WIn9c8T5uT/l4ETwHxNJTkEOtNKjphNo8AW6TF9O32aRkxqw3l8GUdUo66Bu7EiqtFh/XG0Zg==",
      "path": "skiasharp.nativeassets.linux/2.88.9",
      "hashPath": "skiasharp.nativeassets.linux.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.macOS/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Nv5spmKc4505Ep7oUoJ5vp3KweFpeNqxpyGDWyeEPTX2uR6S6syXIm3gj75dM0YJz7NPvcix48mR5laqs8dPuA==",
      "path": "skiasharp.nativeassets.macos/2.88.9",
      "hashPath": "skiasharp.nativeassets.macos.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kt06RccBHSnAs2wDYdBSfsjIDbY3EpsOVqnlDgKdgvyuRA8ZFDaHRdWNx1VHjGgYzmnFCGiTJBnXFl5BqGwGnA==",
      "path": "skiasharp.nativeassets.webassembly/2.88.9",
      "hashPath": "skiasharp.nativeassets.webassembly.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.Win32/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wb2kYgU7iy84nQLYZwMeJXixvK++GoIuECjU4ECaUKNuflyRlJKyiRhN1MAHswvlvzuvkrjRWlK0Za6+kYQK7w==",
      "path": "skiasharp.nativeassets.win32/2.88.9",
      "hashPath": "skiasharp.nativeassets.win32.2.88.9.nupkg.sha512"
    },
    "System.CodeDom/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oTE5IfuMoET8yaZP/vdvy9xO47guAv/rOhe4DODuFBN3ySprcQOlXqO3j+e/H/YpKKR5sglrxRaZ2HYOhNJrqA==",
      "path": "system.codedom/9.0.0",
      "hashPath": "system.codedom.9.0.0.nupkg.sha512"
    },
    "System.Collections.Immutable/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-AurL6Y5BA1WotzlEvVaIDpqzpIPvYnnldxru8oXJU2yFxFUy3+pNXjXd1ymO+RA0rq0+590Q8gaz2l3Sr7fmqg==",
      "path": "system.collections.immutable/8.0.0",
      "hashPath": "system.collections.immutable.8.0.0.nupkg.sha512"
    },
    "System.CommandLine/2.0.0-beta4.22272.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1uqED/q2H0kKoLJ4+hI2iPSBSEdTuhfCYADeJrAqERmiGQ2NNacYKRNEQ+gFbU4glgVyK8rxI+ZOe1onEtr/Pg==",
      "path": "system.commandline/2.0.0-beta4.22272.1",
      "hashPath": "system.commandline.2.0.0-beta4.22272.1.nupkg.sha512"
    },
    "System.Drawing.Common/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JkbHJjtI/dWc5dfmEdJlbe3VwgZqCkZRtfuWFh5GOv0f+gGCfBtzMpIVkmdkj2AObO9y+oiOi81UGwH3aBYuqA==",
      "path": "system.drawing.common/8.0.0",
      "hashPath": "system.drawing.common.8.0.0.nupkg.sha512"
    },
    "System.IO.Pipelines/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FHNOatmUq0sqJOkTx+UF/9YK1f180cnW5FVqnQMvYUN0elp6wFzbtPSiqbo1/ru8ICp43JM1i7kKkk6GsNGHlA==",
      "path": "system.io.pipelines/8.0.0",
      "hashPath": "system.io.pipelines.8.0.0.nupkg.sha512"
    },
    "System.Management/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bVh4xAMI5grY5GZoklKcMBLirhC8Lqzp63Ft3zXJacwGAlLyFdF4k0qz4pnKIlO6HyL2Z4zqmHm9UkzEo6FFsA==",
      "path": "system.management/9.0.0",
      "hashPath": "system.management.9.0.0.nupkg.sha512"
    },
    "System.Reflection.Metadata/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ptvgrFh7PvWI8bcVqG5rsA/weWM09EnthFHR5SCnS6IN+P4mj6rE1lBDC4U8HL9/57htKAqy4KQ3bBj84cfYyQ==",
      "path": "system.reflection.metadata/8.0.0",
      "hashPath": "system.reflection.metadata.8.0.0.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "System.Security.AccessControl/4.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JECvTt5aFF3WT3gHpfofL2MNNP6v84sxtXxpqhLBCcDRzqsPBmHhQ6shv4DwwN2tRlzsUxtb3G9M3763rbXKDg==",
      "path": "system.security.accesscontrol/4.7.0",
      "hashPath": "system.security.accesscontrol.4.7.0.nupkg.sha512"
    },
    "System.Security.Principal.Windows/4.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ojD0PX0XhneCsUbAZVKdb7h/70vyYMDYs85lwEI+LngEONe/17A0cFaRFqZU+sOEidcVswYWikYOQ9PPfjlbtQ==",
      "path": "system.security.principal.windows/4.7.0",
      "hashPath": "system.security.principal.windows.4.7.0.nupkg.sha512"
    },
    "Tmds.DBus.Protocol/0.21.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ScSMrUrrw8px4kK1Glh0fZv/HQUlg1078bNXNPfRPKQ3WbRzV9HpsydYEOgSoMK5LWICMf2bMwIFH0pGjxjcMA==",
      "path": "tmds.dbus.protocol/0.21.2",
      "hashPath": "tmds.dbus.protocol.0.21.2.nupkg.sha512"
    }
  }
}


--- FILE: D:\github\newideas\Cycloside\bin\Debug\net8.0\Cycloside.runtimeconfig.json ---

{
  "runtimeOptions": {
    "tfm": "net8.0",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "8.0.0"
    },
    "configProperties": {
      "System.Runtime.InteropServices.BuiltInComInterop.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}


--- FILE: D:\github\newideas\Cycloside\bin\Debug\net8.0\profiles.json ---

{
  "Justin": {
    "Name": "Justin",
    "Plugins": {
      "Date/Time Overlay": true,
      "MP3 Player": true,
      "Macro": true,
      "Text Editor": true,
      "Wallpaper": true,
      "Clipboard Manager": true,
      "File Watcher": true,
      "Process Monitor": true,
      "Task Scheduler": true,
      "Disk Usage": true,
      "Log Viewer": true,
      "Environment Editor": true,
      "Jezzball": true,
      "Widget Host": true,
      "Winamp Vis Host": true,
      "QBasic Retro IDE": true
    },
    "Wallpaper": ""
  }
}


--- FILE: D:\github\newideas\Cycloside\bin\Debug\net8.0\settings.json ---

{
  "LaunchAtStartup": false,
  "PluginEnabled": {
    "Date/Time Overlay": true,
    "MP3 Player": true,
    "Macro": true,
    "Text Editor": true,
    "Wallpaper": true,
    "Clipboard Manager": true,
    "File Watcher": true,
    "Process Monitor": true,
    "Task Scheduler": true,
    "Disk Usage": true,
    "Log Viewer": true,
    "Environment Editor": true,
    "Jezzball": true,
    "Widget Host": true,
    "Winamp Vis Host": true,
    "QBasic Retro IDE": true
  },
  "PluginVersions": {
    "Date/Time Overlay": "1.0.0",
    "MP3 Player": "1.0.0",
    "Macro Engine": "1.0.0",
    "Text Editor": "0.2.0",
    "Wallpaper Changer": "0.2.0",
    "Clipboard Manager": "0.1.0",
    "File Watcher": "0.2.0",
    "Process Monitor": "0.1.0",
    "Task Scheduler": "0.1.0",
    "Disk Usage": "0.2.0",
    "Log Viewer": "0.4.1",
    "Environment Editor": "0.1.0",
    "Jezzball": "0.1.0",
    "Widget Host": "0.1.0",
    "Winamp Visual Host": "0.1.0",
    "QBasic Retro IDE": "0.3.0"
  },
  "PluginIsolation": true,
  "PluginCrashLogging": true,
  "DisableBuiltInPlugins": false,
  "ActiveSkin": "",
  "Theme": "MintGreen",
  "ComponentThemes": {},
  "Cursor": "Arrow",
  "ComponentCursors": {},
  "WindowEffects": {},
  "SavedThemes": {},
  "ActiveProfile": "Justin",
  "RemoteApiToken": "secret",
  "FirstRun": false
}


--- FILE: D:\github\newideas\Cycloside\docs\avalonia-usage.md ---

# Using Avalonia in Cycloside

The Cycloside desktop utility leverages the [Avalonia](https://avaloniaui.net/) framework for its cross-platform user interface. The developer sometimes refers to "FMEO" ("For My Eyes Only") when discussing internal code, but the visible application is powered entirely by Avalonia.

## Cross-Platform Foundation

Avalonia handles the windowing and styling layers so that Cycloside behaves the same on Windows and Linux. The project README notes that it is "built with Avalonia" and "cross-platform by design" which allows plugin developers to work on either OS.

## Plugin Loading and Hot Reload

Cycloside watches the `Plugins` folder and loads any `*.dll` files it finds at runtime. Avalonia's reactive UI makes it easy to update elements when plugins change. Hot reload is triggered via file watching so plugins can be updated without restarting the app.

## Plugin Manager Interface

The tray menu includes a **Plugin Manager** implemented with Avalonia controls. From here you can toggle or reload plugins and open the plugin directory. All plugin states are stored so settings persist between sessions.

## Theming and Skins

Avalonia's styling system lets Cycloside apply XAML-based themes. Place style resources in the `Skins` folder and select an active skin from **Settings → Runtime Settings**. The chosen skin name is stored in `settings.json`.

## Why Avalonia?

By building on Avalonia, Cycloside remains lightweight while offering a modern UI toolkit. Plugins are regular .NET classes so you can tap into the wider ecosystem, and the same setup runs on both Windows and Linux.



--- FILE: D:\github\newideas\Cycloside\docs\plugin-lifecycle.md ---

# Plugin Lifecycle

Plugins implement `IPlugin` from the `Cycloside.Plugins` namespace. Cycloside loads all DLLs from the `Plugins` folder at startup and calls `Start()` on those that are enabled. `Stop()` is invoked when a plugin is disabled or when Cycloside exits.

Additional optional hooks can be implemented by inheriting `IPluginExtended`:

```csharp
namespace Cycloside.Plugins;

public interface IPluginExtended : IPlugin
{
    void OnSettingsSaved();
    void OnCrash(Exception ex);
}
```

The plugin manager catches exceptions thrown during `Start` and `Stop` when isolation mode is enabled. Crashes are logged if crash logging is turned on. Plugins exposing a widget should return an implementation via the `Widget` property.

## Plugin Bus

Plugins communicate by publishing messages to the global `PluginBus` and subscribing to topics of interest:

```csharp
PluginBus.Subscribe("my:event", data => Handle(data));
PluginBus.Publish("my:event", payload);
```

Unsubscribing removes the handler so plugins can clean up during `Stop()`.

## Remote API

`RemoteApiServer` exposes `http://localhost:4123/trigger`. Posting a topic name to this endpoint publishes that event on the bus. This allows scripts or other applications to control your plugins without direct references.
`RemoteApiServer` exposes `http://localhost:4123/trigger`. Include your pre‑shared token using the `X-Api-Token` header or a `token` query string when POSTing a topic name. Invalid or missing tokens result in `401 Unauthorized`. The token is configured in `settings.json` under `RemoteApiToken`.

Example:

```bash
curl -X POST -H "X-Api-Token: <token>" http://localhost:4123/trigger -d "my:event"




--- FILE: D:\github\newideas\Cycloside\docs\skin-api.md ---

# Skinning API

Skins are Avalonia resource dictionaries stored in the `Skins/` folder with the extension `.axaml`. You can assign one or more skins to a plugin or component in `settings.json` under `ComponentSkins`.

Use `SkinManager.ApplySkinTo(element, "MySkin")` to layer a skin on top of the global theme at runtime.

A minimal skin file looks like this:

```xml
<ResourceDictionary xmlns="https://github.com/avaloniaui">
    <Style Selector="Window">
        <Setter Property="Background" Value="#222" />
        <Setter Property="Foreground" Value="White" />
    </Style>
</ResourceDictionary>
```

Styles cascade like regular Avalonia themes so widgets and plugin windows automatically adopt the new look.



--- FILE: D:\github\newideas\Cycloside\docs\widget-interface.md ---

# Cycloside Widget Interface

Cycloside aims to provide a lightweight and flexible widget system alongside its tray-based plugin model. This document explains the goals for the widget interface and how it differs from other solutions such as Microsoft Widgets or Rainmeter. The `WidgetHost` plugin in the main project demonstrates the current implementation.


## Purpose

Widgets allow small, skinnable user interface components to live on the desktop. They can display information or provide quick controls without opening full windows. In Cycloside, widgets are an extension of the existing plugin system and let you surface plugin features directly on your desktop.

## What It Offers

- **Dockable and Movable:** Widgets can float freely or snap to each other. Users can arrange them anywhere and create stacks of related widgets.
- **Resizable:** Each widget supports live resizing, letting you pick the perfect footprint on your desktop.
- **Skinning:** We plan to leverage Avalonia's styling engine so themes can be shared. Developers can bundle default styles or ship a library of skins.
- **Plugin Integration:** Built-in modules such as the MP3 player or future weather plugins can expose a widget, providing quick access without opening menus.

## How It's Different from Rainmeter

Rainmeter is a powerful, scriptable desktop customization tool focusing primarily on Windows. Cycloside shares the idea of modular widgets but takes a cross-platform approach using Avalonia. Instead of the Lua-based scripting found in Rainmeter, Cycloside relies on compiled plugins (or volatile C# and Lua scripts) to provide functionality. The goal is to remain lightweight while still allowing deeper integration with existing .NET libraries.

## Implementation Sketch

The widget system is built as a plugin host:

1. **WidgetHostWindow:** an always-on-top container that manages a set of widget controls.
2. **IWidget** interface for widget plugins to implement.
3. **WidgetManager:** responsible for loading widget assemblies from a `Widgets` folder, similar to `Plugins`.
4. **Docking Layout:** uses Avalonia's layout panels to allow snapping widgets next to each other.

This is currently a design document and serves as a guide for future development. Community contributions and feedback are welcome!

## Built-in Widgets

The repository includes a handful of sample widgets to show how the interface works:

- **ClockWidget** – simple digital clock
- **Mp3Widget** – pick MP3 files and control playback
- **WeatherWidget** – fetches temperature data from Open‑Meteo

Double‑click the Weather widget to set your city or latitude and longitude. The values
are stored in `settings.json` and used when requesting weather data.




--- FILE: D:\github\newideas\Cycloside\docs\windowfx-design.md ---

# Cycloside WindowFX/Compositor Effects – Technical Design

## I. Core Concept
Provide a cross-platform system for adding compositor and physics effects to Cycloside windows, widgets and plugin panels. Effects are modular, configurable and may be extended via plugins.

## II. Core Architecture
### A. Effects Manager
`WindowEffectsManager` tracks which windows or widgets have effects enabled, loads effect plugins and applies them on demand.

### B. Effect Interface
```csharp
public interface IWindowEffect
{
    string Name { get; }
    string Description { get; }
    void Attach(Avalonia.Controls.Window window);
    void Detach(Avalonia.Controls.Window window);
    void ApplyEvent(WindowEventType type, object? args);
}
```

### C. Effect Configuration
Extend the settings file with a dictionary where the key is the component name and the value is a list of enabled effect names:
```csharp
public Dictionary<string, List<string>> WindowEffects { get; set; }
```

## III. Built-In Effects
The system is designed to replicate many classic desktop effects. Planned samples include:
- Roll‑up / shade (collapse to titlebar)
- Wobbly windows with spring physics
- Explode on close (fade or particle burst)
- Magic lamp minimize
- Fold/fold‑in animations
- Live blur or "glass" transparency
- Drop shadows and outer glow
- Shake on error dialogs
- Rubber‑band resizing
- Snap‑to‑grid tiling with animation
- Ripple or water‑drop feedback
- Retro burn or pixelate close
- Portal/zoom close
- Morphing window corners
- Ghost drag previews
- Widget dock/undock animations
- Classic transparency and opacity control


## IV. Technical Notes
- Use Avalonia animation primitives for easing and keyframes.
- Wrap windows or panels in an `EffectHost` so effects can be toggled at runtime.
- GUI settings allow per-component configuration.
- Effects can be distributed as plugins and loaded from an `Effects` directory.
- Multiple effects may be stacked on the same window and tuned with settings such as intensity or speed.

## V. Example: Wobbly Windows
Hook into drag events and apply a spring function so the window lags slightly behind the cursor, snapping smoothly when released.

## VI. Usage Example
```csharp
WindowEffectsManager.RegisterEffect("Wobbly", new WobblyWindowEffect());
WindowEffectsManager.EnableEffectFor("PluginHostWindow", "Wobbly");
```

## VII. Open Sourcing
Place the engine in a `Cycloside.WindowFX` subproject and document the plugin API for community contributions.



--- FILE: D:\github\newideas\Cycloside\Effects\IWindowEffect.cs ---

using Avalonia.Controls;

namespace Cycloside.Effects;

public interface IWindowEffect
{
    string Name { get; }
    string Description { get; }

    void Attach(Window window);
    void Detach(Window window);
    void ApplyEvent(WindowEventType type, object? args);
}



--- FILE: D:\github\newideas\Cycloside\Effects\RollUpEffect.cs ---

using System;
using System.Collections.Generic;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Animation;
using Avalonia.Animation.Easings;
using Avalonia.Styling;

namespace Cycloside.Effects;

public class RollUpEffect : IWindowEffect
{
    public string Name => "RollUp";
    public string Description => "Collapses the window to its titlebar";

    private readonly Dictionary<Window, double> _heights = new();

    public void Attach(Window window)
    {
        window.PointerPressed += OnPointerPressed;
    }

    private void OnPointerPressed(object? sender, PointerPressedEventArgs e)
    {
        if (e.ClickCount != 2 || sender is not Window win)
            return;

        if (!_heights.ContainsKey(win))
            _heights[win] = win.Height;

        var target = Math.Abs(win.Height - win.MinHeight) < 1 ? _heights[win] : win.MinHeight;
        var anim = new Animation
        {
            Duration = TimeSpan.FromMilliseconds(200),
            Easing = new QuadraticEaseOut(),
            Children =
            {
                new KeyFrame
                {
                    Cue = new Cue(1d),
                    Setters = { new Setter(Window.HeightProperty, target) }
                }
            }
        };
        anim.RunAsync(win); // or anim.RunAsync(win, null); if required by your Avalonia version
    }

    public void Detach(Window window)
    {
        window.PointerPressed -= OnPointerPressed;
        _heights.Remove(window);
    }

    public void ApplyEvent(WindowEventType type, object? args) { }
}



--- FILE: D:\github\newideas\Cycloside\Effects\ShadowEffect.cs ---

using Avalonia.Controls;
using Avalonia.Media;

namespace Cycloside.Effects;

public class ShadowEffect : IWindowEffect
{
    public string Name => "Shadow";
    public string Description => "Adds a simple drop shadow";

    public void Attach(Window window)
    {
        if (window.Effect is not DropShadowEffect)
        {
            window.Effect = new DropShadowEffect
            {
                BlurRadius = 10,
                Color = Colors.Black,
                Opacity = 0.5
            };
        }
    }

    public void Detach(Window window)
    {
        if (window.Effect is DropShadowEffect)
            window.Effect = null;
    }

    public void ApplyEvent(WindowEventType type, object? args) { }
}



--- FILE: D:\github\newideas\Cycloside\Effects\TransparencyEffect.cs ---

using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Animation.Easings;
using Avalonia.Styling;
using System;

namespace Cycloside.Effects;

public class TransparencyEffect : IWindowEffect
{
    public string Name => "Transparency";
    public string Description => "Adjusts opacity on focus and blur";

    public void Attach(Window window)
    {
        window.GotFocus += OnFocus;
        window.LostFocus += OnBlur;
    }

    private void OnFocus(object? sender, EventArgs e)
    {
        if (sender is Window win)
            Animate(win, 1.0);
    }

    private void OnBlur(object? sender, EventArgs e)
    {
        if (sender is Window win)
            Animate(win, 0.8);
    }

    private static void Animate(Window win, double value)
    {
        var anim = new Animation
        {
            Duration = TimeSpan.FromMilliseconds(200),
            Easing = new QuadraticEaseOut(),
            Children = { new KeyFrame{ Cue = new Cue(1d), Setters = { new Setter(Window.OpacityProperty, value) } } }
        };
        anim.RunAsync(win);
    }

    public void Detach(Window window)
    {
        window.GotFocus -= OnFocus;
        window.LostFocus -= OnBlur;
    }

    public void ApplyEvent(WindowEventType type, object? args) { }
}



--- FILE: D:\github\newideas\Cycloside\Effects\WindowEffectsManager.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Avalonia.Controls;

namespace Cycloside.Effects;

public class WindowEffectsManager
{
    private readonly Dictionary<string, IWindowEffect> _registered = new();
    private readonly Dictionary<Window, List<IWindowEffect>> _active = new();
    private readonly Dictionary<string, List<string>> _config;

    public static WindowEffectsManager Instance { get; } = new();

    private WindowEffectsManager()
    {
        _config = SettingsManager.Settings.WindowEffects;

        RegisterEffect(new RollUpEffect());
        RegisterEffect(new WobblyWindowEffect());
        RegisterEffect(new TransparencyEffect());
        RegisterEffect(new ShadowEffect());

        var path = Path.Combine(AppContext.BaseDirectory, "Effects");
        LoadEffectPlugins(path);
    }

    public void RegisterEffect(IWindowEffect effect)
    {
        _registered[effect.Name] = effect;
    }

    public void LoadEffectPlugins(string directory)
    {
        if (!Directory.Exists(directory))
            return;

        foreach (var dll in Directory.GetFiles(directory, "*.dll"))
        {
            try
            {
                var asm = Assembly.LoadFrom(dll);
                var types = asm.GetTypes().Where(t => typeof(IWindowEffect).IsAssignableFrom(t) && !t.IsAbstract);
                foreach (var t in types)
                {
                    if (Activator.CreateInstance(t) is IWindowEffect effect)
                        RegisterEffect(effect);
                }
            }
            catch { }
        }
    }

    public void EnableEffectFor(string key, string effectName)
    {
        if (!_config.TryGetValue(key, out var list))
        {
            list = new List<string>();
            _config[key] = list;
        }

        if (!list.Contains(effectName))
            list.Add(effectName);

        SettingsManager.Save();
    }

    public void DisableEffectFor(string key, string effectName)
    {
        if (_config.TryGetValue(key, out var list))
        {
            list.Remove(effectName);
            if (list.Count == 0)
                _config.Remove(key);
            SettingsManager.Save();
        }
    }

    public void ApplyConfiguredEffects(Window window, string key)
    {
        if (_config.TryGetValue("*", out var global))
        {
            foreach (var name in global)
                AttachEffect(window, name);
        }

        if (_config.TryGetValue(key, out var specific))
        {
            foreach (var name in specific)
                AttachEffect(window, name);
        }
    }

    public void AttachEffect(Window window, string effectName)
    {
        if (!_registered.TryGetValue(effectName, out var effect))
            return;

        if (!_active.TryGetValue(window, out var list))
        {
            list = new List<IWindowEffect>();
            _active[window] = list;
            window.Closed += (_, _) => DetachAll(window);
        }

        if (list.Contains(effect))
            return;

        effect.Attach(window);
        list.Add(effect);
    }

    public void DetachAll(Window window)
    {
        if (!_active.TryGetValue(window, out var list))
            return;

        foreach (var effect in list)
            effect.Detach(window);

        _active.Remove(window);
    }
}



--- FILE: D:\github\newideas\Cycloside\Effects\WindowEventType.cs ---

namespace Cycloside.Effects;

public enum WindowEventType
{
    Move,
    Resize,
    Close,
    Minimize,
    Focus,
    Blur,
    DragStart,
    DragEnd
}



--- FILE: D:\github\newideas\Cycloside\Effects\WobblyWindowEffect.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Threading;
using System;
using System.Collections.Generic;

namespace Cycloside.Effects;

public class WobblyWindowEffect : IWindowEffect
{
    public string Name => "Wobbly";
    public string Description => "Adds a springy wobble when moving the window";

    private readonly Dictionary<Window, PixelPoint> _target = new();
    private readonly Dictionary<Window, DispatcherTimer> _timers = new();

    public void Attach(Window window)
    {
        _target[window] = window.Position;
        window.PositionChanged += OnPosChanged;
        var timer = new DispatcherTimer
        {
            Interval = TimeSpan.FromMilliseconds(16)
        };
        timer.Tick += (_, _) => Animate(window);
        _timers[window] = timer;
        timer.Start();
    }

    private void OnPosChanged(object? sender, PixelPointEventArgs e)
    {
        if (sender is Window win)
            _target[win] = e.Point;
    }

    private void Animate(Window window)
    {
        if (!_target.TryGetValue(window, out var target))
            return;

        var current = window.Position;
        var dx = (target.X - current.X) * 0.25;
        var dy = (target.Y - current.Y) * 0.25;
        if (Math.Abs(dx) < 1 && Math.Abs(dy) < 1)
            return;

        window.Position = new PixelPoint(current.X + (int)dx, current.Y + (int)dy);
    }

    public void Detach(Window window)
    {
        window.PositionChanged -= OnPosChanged;
        if (_timers.TryGetValue(window, out var timer))
        {
            timer.Stop();
            _timers.Remove(window);
        }
        _target.Remove(window);
    }

    public void ApplyEvent(WindowEventType type, object? args) { }
}



--- FILE: D:\github\newideas\Cycloside\Hotkeys\MacGlobalHotkeyManager.cs ---

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Avalonia.Input;

namespace Cycloside.Hotkeys;

internal sealed class MacGlobalHotkeyManager
{
    private delegate void NativeCallback(ushort keyCode, ulong modifiers);

    [DllImport("libHotkeyMonitor", CallingConvention = CallingConvention.Cdecl)]
    private static extern IntPtr RegisterGlobalHotkeyMonitor(NativeCallback cb);

    [DllImport("libHotkeyMonitor", CallingConvention = CallingConvention.Cdecl)]
    private static extern void UnregisterGlobalHotkeyMonitor(IntPtr handle);

    private readonly List<KeyGesture> _gestures = new();
    private NativeCallback? _callback;
    private IntPtr _monitor;

    public event Action<KeyGesture>? HotKeyPressed;

    public void Register(KeyGesture gesture)
    {
        _gestures.Add(gesture);
        if (_monitor == IntPtr.Zero)
            Start();
    }

    public void UnregisterAll()
    {
        _gestures.Clear();
        if (_monitor != IntPtr.Zero)
        {
            try { UnregisterGlobalHotkeyMonitor(_monitor); } catch (Exception ex) { Logger.Log($"Mac monitor cleanup failed: {ex.Message}"); }
            _monitor = IntPtr.Zero;
        }
        _callback = null;
    }

    private void Start()
    {
        _callback = OnKeyEvent;
        _monitor = RegisterGlobalHotkeyMonitor(_callback);
    }

    private void OnKeyEvent(ushort keyCode, ulong modifiers)
    {
        var key = KeyFromCode(keyCode);
        var mods = ModifiersFromFlags(modifiers);
        foreach (var g in _gestures)
        {
            if (g.Key == key && g.KeyModifiers == mods)
            {
                HotKeyPressed?.Invoke(g);
                break;
            }
        }
    }

    private static KeyModifiers ModifiersFromFlags(ulong flags)
    {
        KeyModifiers mods = KeyModifiers.None;
        if ((flags & (1UL << 17)) != 0) mods |= KeyModifiers.Shift;
        if ((flags & (1UL << 18)) != 0) mods |= KeyModifiers.Control;
        if ((flags & (1UL << 19)) != 0) mods |= KeyModifiers.Alt;
        if ((flags & (1UL << 20)) != 0) mods |= KeyModifiers.Meta;
        return mods;
    }

    private static Key KeyFromCode(ushort code)
    {
        return code switch
        {
            0 => Key.A,
            1 => Key.S,
            2 => Key.D,
            3 => Key.F,
            4 => Key.H,
            5 => Key.G,
            6 => Key.Z,
            7 => Key.X,
            8 => Key.C,
            9 => Key.V,
            11 => Key.B,
            12 => Key.Q,
            13 => Key.W,
            14 => Key.E,
            15 => Key.R,
            16 => Key.Y,
            17 => Key.T,
            18 => Key.D1,
            19 => Key.D2,
            20 => Key.D3,
            21 => Key.D4,
            22 => Key.D6,
            23 => Key.D5,
            24 => Key.OemMinus,
            25 => Key.D9,
            26 => Key.D7,
            27 => Key.D8,
            28 => Key.D0,
            29 => Key.OemCloseBrackets,
            30 => Key.O,
            31 => Key.U,
            32 => Key.OemOpenBrackets,
            33 => Key.I,
            34 => Key.P,
            35 => Key.Return,
            36 => Key.L,
            37 => Key.J,
            38 => Key.OemQuotes,
            39 => Key.K,
            40 => Key.OemSemicolon,
            41 => Key.Back,
            42 => Key.OemComma,
            43 => Key.OemPeriod,
            44 => Key.Oem2,
            45 => Key.RightShift,
            46 => Key.N,
            47 => Key.M,
            48 => Key.Tab,
            49 => Key.Space,
            50 => Key.Escape,
            _ => Key.None
        };
    }
}



--- FILE: D:\github\newideas\Cycloside\Hotkeys\SharpGlobalHotkeyManager.cs ---

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Avalonia.Input;
using SharpHook;
using SharpHook.Native;

namespace Cycloside.Hotkeys;

internal sealed class SharpGlobalHotkeyManager : IDisposable
{
    private readonly IGlobalHook _hook = new TaskPoolGlobalHook();
    private readonly List<KeyGesture> _gestures = new();
    private bool _running;

    public event Action<KeyGesture>? HotKeyPressed;

    public void Register(KeyGesture gesture)
    {
        _gestures.Add(gesture);
        if (!_running)
            Start();
    }

    public void UnregisterAll()
    {
        _gestures.Clear();
        if (_running)
            Stop();
    }

    private void Start()
    {
        _hook.KeyPressed += OnKeyPressed;
        _hook.RunAsync();
        _running = true;
    }

    private void Stop()
    {
        _hook.KeyPressed -= OnKeyPressed;
        _hook.Dispose();
        _running = false;
    }

    private void OnKeyPressed(object? sender, KeyboardHookEventArgs e)
    {
        var key = KeyFromCode(e.Data.KeyCode);
        var mods = ModifiersFromMask(e.RawEvent.Mask);
        foreach (var g in _gestures)
        {
            if (g.Key == key && g.KeyModifiers == mods)
            {
                HotKeyPressed?.Invoke(g);
                break;
            }
        }
    }

    private static KeyModifiers ModifiersFromMask(ModifierMask mask)
    {
        KeyModifiers mods = KeyModifiers.None;
        if (ModifierMaskExtensions.HasShift(mask)) mods |= KeyModifiers.Shift;
        if (ModifierMaskExtensions.HasCtrl(mask)) mods |= KeyModifiers.Control;
        if (ModifierMaskExtensions.HasAlt(mask)) mods |= KeyModifiers.Alt;
        if (ModifierMaskExtensions.HasMeta(mask)) mods |= KeyModifiers.Meta;
        return mods;
    }

    private static readonly Dictionary<KeyCode, Key> KeyMap = new()
    {
        { KeyCode.VcA, Key.A },{ KeyCode.VcB, Key.B },{ KeyCode.VcC, Key.C },
        { KeyCode.VcD, Key.D },{ KeyCode.VcE, Key.E },{ KeyCode.VcF, Key.F },
        { KeyCode.VcG, Key.G },{ KeyCode.VcH, Key.H },{ KeyCode.VcI, Key.I },
        { KeyCode.VcJ, Key.J },{ KeyCode.VcK, Key.K },{ KeyCode.VcL, Key.L },
        { KeyCode.VcM, Key.M },{ KeyCode.VcN, Key.N },{ KeyCode.VcO, Key.O },
        { KeyCode.VcP, Key.P },{ KeyCode.VcQ, Key.Q },{ KeyCode.VcR, Key.R },
        { KeyCode.VcS, Key.S },{ KeyCode.VcT, Key.T },{ KeyCode.VcU, Key.U },
        { KeyCode.VcV, Key.V },{ KeyCode.VcW, Key.W },{ KeyCode.VcX, Key.X },
        { KeyCode.VcY, Key.Y },{ KeyCode.VcZ, Key.Z },
        { KeyCode.Vc0, Key.D0 },{ KeyCode.Vc1, Key.D1 },{ KeyCode.Vc2, Key.D2 },
        { KeyCode.Vc3, Key.D3 },{ KeyCode.Vc4, Key.D4 },{ KeyCode.Vc5, Key.D5 },
        { KeyCode.Vc6, Key.D6 },{ KeyCode.Vc7, Key.D7 },{ KeyCode.Vc8, Key.D8 },
        { KeyCode.Vc9, Key.D9 },
        { KeyCode.VcEscape, Key.Escape },
        { KeyCode.VcEnter, Key.Enter },
        { KeyCode.VcSpace, Key.Space },
        { KeyCode.VcTab, Key.Tab },
        { KeyCode.VcBackspace, Key.Back },
        { KeyCode.VcMinus, Key.OemMinus },
        { KeyCode.VcEquals, Key.OemPlus },
        { KeyCode.VcOpenBracket, Key.OemOpenBrackets },
        { KeyCode.VcCloseBracket, Key.OemCloseBrackets },
        { KeyCode.VcSemicolon, Key.OemSemicolon },
        { KeyCode.VcQuote, Key.OemQuotes },
        { KeyCode.VcBackQuote, Key.OemTilde },
        { KeyCode.VcComma, Key.OemComma },
        { KeyCode.VcPeriod, Key.OemPeriod },
        { KeyCode.VcSlash, Key.Oem2 },
        { KeyCode.VcBackslash, Key.Oem5 },
        { KeyCode.VcF1, Key.F1 },{ KeyCode.VcF2, Key.F2 },{ KeyCode.VcF3, Key.F3 },
        { KeyCode.VcF4, Key.F4 },{ KeyCode.VcF5, Key.F5 },{ KeyCode.VcF6, Key.F6 },
        { KeyCode.VcF7, Key.F7 },{ KeyCode.VcF8, Key.F8 },{ KeyCode.VcF9, Key.F9 },
        { KeyCode.VcF10, Key.F10 },{ KeyCode.VcF11, Key.F11 },{ KeyCode.VcF12, Key.F12 }
    };

    private static Key KeyFromCode(KeyCode code)
    {
        return KeyMap.TryGetValue(code, out var k) ? k : Key.None;
    }

    public void Dispose() => Stop();
}



--- FILE: D:\github\newideas\Cycloside\Interop\WinampVisInterop.cs ---

using System;
using System.Runtime.InteropServices;

namespace Cycloside.Interop;

[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct winampVisModule
{
    public string description;
    public IntPtr hwndParent;
    public IntPtr hDllInstance;
    public int sRate;
    public int nCh;
    public int latencyMs;
    public int delayMs;
    public int spectrumNch;
    public int waveformNch;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1152)]
    public byte[] spectrumData;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1152)]
    public byte[] waveformData;
    public IntPtr Config;
    public IntPtr Init;
    public IntPtr Render;
    public IntPtr Quit;
    public IntPtr userData;
}

[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct winampVisHeader
{
    public int version;
    public string description;
    public IntPtr getModule;
}

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr winampVisGetHeaderType();

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr getModuleDelegate(int which);

internal static class NativeMethods
{
    [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Unicode)]
    public static extern IntPtr LoadLibrary(string lpFileName);

    [DllImport("kernel32", SetLastError = true)]
    public static extern bool FreeLibrary(IntPtr hModule);

    [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Ansi)]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
}



--- FILE: D:\github\newideas\Cycloside\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ---

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



--- FILE: D:\github\newideas\Cycloside\obj\Debug\net8.0\Cycloside.AssemblyInfo.cs ---

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Cycloside")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+94c1c5db3be71d430499af224b466761b823b61c")]
[assembly: System.Reflection.AssemblyProductAttribute("Cycloside")]
[assembly: System.Reflection.AssemblyTitleAttribute("Cycloside")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




--- FILE: D:\github\newideas\Cycloside\obj\Debug\net8.0\Cycloside.sourcelink.json ---

{"documents":{"d:\\GitHub\\NewIdeas\\*":"https://raw.githubusercontent.com/acrinym/NewIdeas/94c1c5db3be71d430499af224b466761b823b61c/*"}}


--- FILE: D:\github\newideas\Cycloside\obj\Cycloside.csproj.nuget.dgspec.json ---

{
  "format": 1,
  "restore": {
    "d:\\GitHub\\NewIdeas\\Cycloside\\Cycloside.csproj": {}
  },
  "projects": {
    "d:\\GitHub\\NewIdeas\\Cycloside\\Cycloside.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "d:\\GitHub\\NewIdeas\\Cycloside\\Cycloside.csproj",
        "projectName": "Cycloside",
        "projectPath": "d:\\GitHub\\NewIdeas\\Cycloside\\Cycloside.csproj",
        "packagesPath": "C:\\Users\\User\\.nuget\\packages\\",
        "outputPath": "d:\\GitHub\\NewIdeas\\Cycloside\\obj\\",
        "projectStyle": "PackageReference",
        "configFilePaths": [
          "C:\\Users\\User\\AppData\\Roaming\\NuGet\\NuGet.Config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        }
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "Avalonia": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.AvaloniaEdit": {
              "target": "Package",
              "version": "[11.3.0, )"
            },
            "Avalonia.Controls.DataGrid": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Desktop": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Diagnostics": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Fonts.Inter": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Markup.Xaml.Loader": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Themes.Fluent": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "CliWrap": {
              "target": "Package",
              "version": "[3.7.0, )"
            },
            "CommunityToolkit.Mvvm": {
              "target": "Package",
              "version": "[8.2.0, )"
            },
            "Microsoft.CodeAnalysis.CSharp": {
              "target": "Package",
              "version": "[4.9.2, )"
            },
            "MoonSharp": {
              "target": "Package",
              "version": "[2.0.0, )"
            },
            "NAudio": {
              "target": "Package",
              "version": "[2.2.1, )"
            },
            "SharpHook": {
              "target": "Package",
              "version": "[5.0.0, )"
            },
            "System.CommandLine": {
              "target": "Package",
              "version": "[2.0.0-beta4.22272.1, )"
            },
            "System.Drawing.Common": {
              "target": "Package",
              "version": "[8.0.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\8.0.411/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}


--- FILE: D:\github\newideas\Cycloside\obj\project.assets.json ---

{
  "version": 3,
  "targets": {
    "net8.0": {
      "Avalonia/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia.BuildServices": "0.0.31",
          "Avalonia.Remote.Protocol": "11.3.1",
          "MicroCom.Runtime": "0.11.0"
        },
        "compile": {
          "ref/net8.0/Avalonia.Base.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Controls.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.DesignerSupport.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Dialogs.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Markup.Xaml.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Markup.dll": {
            "related": ".Xaml.xml;.xml"
          },
          "ref/net8.0/Avalonia.Metal.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.MicroCom.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.OpenGL.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Vulkan.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.dll": {
            "related": ".Base.xml;.Controls.xml;.DesignerSupport.xml;.Dialogs.xml;.Markup.Xaml.xml;.Markup.xml;.Metal.xml;.MicroCom.xml;.OpenGL.xml;.Vulkan.xml;.xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Base.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Controls.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.DesignerSupport.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Dialogs.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Markup.Xaml.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Markup.dll": {
            "related": ".Xaml.xml;.xml"
          },
          "lib/net8.0/Avalonia.Metal.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.MicroCom.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.OpenGL.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Vulkan.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.dll": {
            "related": ".Base.xml;.Controls.xml;.DesignerSupport.xml;.Dialogs.xml;.Markup.Xaml.xml;.Markup.xml;.Metal.xml;.MicroCom.xml;.OpenGL.xml;.Vulkan.xml;.xml"
          }
        },
        "build": {
          "buildTransitive/Avalonia.props": {},
          "buildTransitive/Avalonia.targets": {}
        }
      },
      "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
        "type": "package",
        "runtimeTargets": {
          "runtimes/win-arm64/native/av_libglesv2.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/av_libglesv2.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/av_libglesv2.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "Avalonia.AvaloniaEdit/11.3.0": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.0.0"
        },
        "compile": {
          "lib/net6.0/AvaloniaEdit.dll": {}
        },
        "runtime": {
          "lib/net6.0/AvaloniaEdit.dll": {}
        }
      },
      "Avalonia.BuildServices/0.0.31": {
        "type": "package",
        "build": {
          "buildTransitive/Avalonia.BuildServices.targets": {}
        }
      },
      "Avalonia.Controls.ColorPicker/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Remote.Protocol": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Controls.ColorPicker.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Controls.ColorPicker.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Controls.DataGrid/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Controls.DataGrid.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Controls.DataGrid.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Desktop/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Native": "11.3.1",
          "Avalonia.Skia": "11.3.1",
          "Avalonia.Win32": "11.3.1",
          "Avalonia.X11": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Desktop.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Desktop.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Diagnostics/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Controls.ColorPicker": "11.3.1",
          "Avalonia.Themes.Simple": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Diagnostics.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Diagnostics.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Fonts.Inter/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Fonts.Inter.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Fonts.Inter.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.FreeDesktop/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Tmds.DBus.Protocol": "0.21.2"
        },
        "compile": {
          "lib/net8.0/Avalonia.FreeDesktop.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.FreeDesktop.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Markup.Xaml.Loader/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Markup.Xaml.Loader.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Markup.Xaml.Loader.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Native/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Native.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Native.dll": {
            "related": ".xml"
          }
        },
        "runtimeTargets": {
          "runtimes/osx/native/libAvaloniaNative.dylib": {
            "assetType": "native",
            "rid": "osx"
          }
        }
      },
      "Avalonia.Remote.Protocol/11.3.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/Avalonia.Remote.Protocol.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Remote.Protocol.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Skia/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "HarfBuzzSharp": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.Linux": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.WebAssembly": "8.3.1.1",
          "SkiaSharp": "2.88.9",
          "SkiaSharp.NativeAssets.Linux": "2.88.9",
          "SkiaSharp.NativeAssets.WebAssembly": "2.88.9"
        },
        "compile": {
          "lib/net8.0/Avalonia.Skia.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Skia.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Themes.Fluent/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Themes.Fluent.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Fluent.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Themes.Simple/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Themes.Simple.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Simple.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Win32/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Angle.Windows.Natives": "2.1.25547.20250602"
        },
        "compile": {
          "lib/net8.0/Avalonia.Win32.Automation.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Win32.dll": {
            "related": ".Automation.xml;.xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Win32.Automation.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Win32.dll": {
            "related": ".Automation.xml;.xml"
          }
        }
      },
      "Avalonia.X11/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.FreeDesktop": "11.3.1",
          "Avalonia.Skia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.X11.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.X11.dll": {
            "related": ".xml"
          }
        }
      },
      "CliWrap/3.7.0": {
        "type": "package",
        "dependencies": {
          "System.Management": "9.0.0"
        },
        "compile": {
          "lib/netstandard2.1/CliWrap.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/CliWrap.dll": {
            "related": ".xml"
          }
        }
      },
      "CommunityToolkit.Mvvm/8.2.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/CommunityToolkit.Mvvm.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/CommunityToolkit.Mvvm.dll": {
            "related": ".pdb;.xml"
          }
        },
        "build": {
          "buildTransitive/netstandard2.1/CommunityToolkit.Mvvm.targets": {}
        }
      },
      "HarfBuzzSharp/8.3.1.1": {
        "type": "package",
        "dependencies": {
          "HarfBuzzSharp.NativeAssets.Win32": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.macOS": "8.3.1.1"
        },
        "compile": {
          "lib/net8.0/HarfBuzzSharp.dll": {
            "related": ".pdb"
          }
        },
        "runtime": {
          "lib/net8.0/HarfBuzzSharp.dll": {
            "related": ".pdb"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-arm"
          },
          "runtimes/linux-arm64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-arm64"
          },
          "runtimes/linux-loongarch64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-loongarch64"
          },
          "runtimes/linux-musl-arm/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-arm"
          },
          "runtimes/linux-musl-arm64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-arm64"
          },
          "runtimes/linux-musl-loongarch64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-loongarch64"
          },
          "runtimes/linux-musl-riscv64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-riscv64"
          },
          "runtimes/linux-musl-x64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-x64"
          },
          "runtimes/linux-riscv64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-riscv64"
          },
          "runtimes/linux-x64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-x64"
          },
          "runtimes/linux-x86/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-x86"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/osx/native/libHarfBuzzSharp.dylib": {
            "assetType": "native",
            "rid": "osx"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "build": {
          "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.props": {},
          "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.targets": {}
        }
      },
      "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win-arm64/native/libHarfBuzzSharp.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/libHarfBuzzSharp.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/libHarfBuzzSharp.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "MicroCom.Runtime/0.11.0": {
        "type": "package",
        "compile": {
          "lib/net5.0/MicroCom.Runtime.dll": {}
        },
        "runtime": {
          "lib/net5.0/MicroCom.Runtime.dll": {}
        }
      },
      "Microsoft.CodeAnalysis.Analyzers/3.3.4": {
        "type": "package",
        "build": {
          "buildTransitive/Microsoft.CodeAnalysis.Analyzers.props": {},
          "buildTransitive/Microsoft.CodeAnalysis.Analyzers.targets": {}
        }
      },
      "Microsoft.CodeAnalysis.Common/4.9.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.CodeAnalysis.Analyzers": "3.3.4",
          "System.Collections.Immutable": "8.0.0",
          "System.Reflection.Metadata": "8.0.0",
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        },
        "compile": {
          "lib/net7.0/Microsoft.CodeAnalysis.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net7.0/Microsoft.CodeAnalysis.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/net7.0/cs/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "cs"
          },
          "lib/net7.0/de/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "de"
          },
          "lib/net7.0/es/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "es"
          },
          "lib/net7.0/fr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "fr"
          },
          "lib/net7.0/it/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "it"
          },
          "lib/net7.0/ja/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ja"
          },
          "lib/net7.0/ko/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ko"
          },
          "lib/net7.0/pl/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pl"
          },
          "lib/net7.0/pt-BR/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/net7.0/ru/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ru"
          },
          "lib/net7.0/tr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "tr"
          },
          "lib/net7.0/zh-Hans/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/net7.0/zh-Hant/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.CSharp/4.9.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.CodeAnalysis.Common": "[4.9.2]"
        },
        "compile": {
          "lib/net7.0/Microsoft.CodeAnalysis.CSharp.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net7.0/Microsoft.CodeAnalysis.CSharp.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/net7.0/cs/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "cs"
          },
          "lib/net7.0/de/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "de"
          },
          "lib/net7.0/es/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "es"
          },
          "lib/net7.0/fr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "fr"
          },
          "lib/net7.0/it/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "it"
          },
          "lib/net7.0/ja/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ja"
          },
          "lib/net7.0/ko/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ko"
          },
          "lib/net7.0/pl/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pl"
          },
          "lib/net7.0/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/net7.0/ru/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ru"
          },
          "lib/net7.0/tr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "tr"
          },
          "lib/net7.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/net7.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.NETCore.Platforms/3.1.0": {
        "type": "package",
        "compile": {
          "lib/netstandard1.0/_._": {}
        },
        "runtime": {
          "lib/netstandard1.0/_._": {}
        }
      },
      "Microsoft.Win32.Registry/4.7.0": {
        "type": "package",
        "dependencies": {
          "System.Security.AccessControl": "4.7.0",
          "System.Security.Principal.Windows": "4.7.0"
        },
        "compile": {
          "ref/netstandard2.0/Microsoft.Win32.Registry.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/Microsoft.Win32.Registry.dll": {
            "related": ".xml"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/netstandard2.0/Microsoft.Win32.Registry.dll": {
            "assetType": "runtime",
            "rid": "unix"
          },
          "runtimes/win/lib/netstandard2.0/Microsoft.Win32.Registry.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "Microsoft.Win32.SystemEvents/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Win32.SystemEvents.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Win32.SystemEvents.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win/lib/net8.0/Microsoft.Win32.SystemEvents.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "MoonSharp/2.0.0": {
        "type": "package",
        "compile": {
          "lib/netstandard1.6/MoonSharp.Interpreter.dll": {
            "related": ".deps.json;.pdb;.xml"
          }
        },
        "runtime": {
          "lib/netstandard1.6/MoonSharp.Interpreter.dll": {
            "related": ".deps.json;.pdb;.xml"
          }
        }
      },
      "NAudio/2.2.1": {
        "type": "package",
        "dependencies": {
          "NAudio.Asio": "2.2.1",
          "NAudio.Core": "2.2.1",
          "NAudio.Midi": "2.2.1",
          "NAudio.Wasapi": "2.2.1",
          "NAudio.WinMM": "2.2.1"
        },
        "compile": {
          "lib/net6.0/NAudio.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/NAudio.dll": {
            "related": ".xml"
          }
        }
      },
      "NAudio.Asio/2.2.1": {
        "type": "package",
        "dependencies": {
          "Microsoft.Win32.Registry": "4.7.0",
          "NAudio.Core": "2.2.1"
        },
        "compile": {
          "lib/netstandard2.0/NAudio.Asio.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Asio.dll": {
            "related": ".xml"
          }
        }
      },
      "NAudio.Core/2.2.1": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/NAudio.Core.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Core.dll": {
            "related": ".xml"
          }
        }
      },
      "NAudio.Midi/2.2.1": {
        "type": "package",
        "dependencies": {
          "NAudio.Core": "2.2.1"
        },
        "compile": {
          "lib/netstandard2.0/NAudio.Midi.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Midi.dll": {
            "related": ".xml"
          }
        }
      },
      "NAudio.Wasapi/2.2.1": {
        "type": "package",
        "dependencies": {
          "NAudio.Core": "2.2.1"
        },
        "compile": {
          "lib/netstandard2.0/NAudio.Wasapi.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.Wasapi.dll": {
            "related": ".xml"
          }
        }
      },
      "NAudio.WinMM/2.2.1": {
        "type": "package",
        "dependencies": {
          "Microsoft.Win32.Registry": "4.7.0",
          "NAudio.Core": "2.2.1"
        },
        "compile": {
          "lib/netstandard2.0/NAudio.WinMM.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/NAudio.WinMM.dll": {
            "related": ".xml"
          }
        }
      },
      "SharpHook/5.0.0": {
        "type": "package",
        "compile": {
          "lib/net7.0/SharpHook.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net7.0/SharpHook.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "build/SharpHook.targets": {}
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libuiohook.so": {
            "assetType": "native",
            "rid": "linux-arm"
          },
          "runtimes/linux-arm64/native/libuiohook.so": {
            "assetType": "native",
            "rid": "linux-arm64"
          },
          "runtimes/linux-x64/native/libuiohook.so": {
            "assetType": "native",
            "rid": "linux-x64"
          },
          "runtimes/maccatalyst-arm64/native/libuiohook.dylib": {
            "assetType": "native",
            "rid": "maccatalyst-arm64"
          },
          "runtimes/maccatalyst-x64/native/libuiohook.dylib": {
            "assetType": "native",
            "rid": "maccatalyst-x64"
          },
          "runtimes/osx-arm64/native/libuiohook.dylib": {
            "assetType": "native",
            "rid": "osx-arm64"
          },
          "runtimes/osx-x64/native/libuiohook.dylib": {
            "assetType": "native",
            "rid": "osx-x64"
          },
          "runtimes/win-arm64/native/uiohook.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/uiohook.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/uiohook.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "SkiaSharp/2.88.9": {
        "type": "package",
        "dependencies": {
          "SkiaSharp.NativeAssets.Win32": "2.88.9",
          "SkiaSharp.NativeAssets.macOS": "2.88.9"
        },
        "compile": {
          "lib/net6.0/SkiaSharp.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/SkiaSharp.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "SkiaSharp.NativeAssets.Linux/2.88.9": {
        "type": "package",
        "dependencies": {
          "SkiaSharp": "2.88.9"
        },
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-arm"
          },
          "runtimes/linux-arm64/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-arm64"
          },
          "runtimes/linux-musl-x64/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-x64"
          },
          "runtimes/linux-x64/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-x64"
          }
        }
      },
      "SkiaSharp.NativeAssets.macOS/2.88.9": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/osx/native/libSkiaSharp.dylib": {
            "assetType": "native",
            "rid": "osx"
          }
        }
      },
      "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {
        "type": "package",
        "compile": {
          "lib/netstandard1.0/_._": {}
        },
        "runtime": {
          "lib/netstandard1.0/_._": {}
        },
        "build": {
          "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.props": {},
          "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.targets": {}
        }
      },
      "SkiaSharp.NativeAssets.Win32/2.88.9": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win-arm64/native/libSkiaSharp.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/libSkiaSharp.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/libSkiaSharp.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "System.CodeDom/9.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/System.CodeDom.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.CodeDom.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "System.Collections.Immutable/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/System.Collections.Immutable.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Collections.Immutable.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "System.CommandLine/2.0.0-beta4.22272.1": {
        "type": "package",
        "compile": {
          "lib/net6.0/System.CommandLine.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.CommandLine.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/net6.0/cs/System.CommandLine.resources.dll": {
            "locale": "cs"
          },
          "lib/net6.0/de/System.CommandLine.resources.dll": {
            "locale": "de"
          },
          "lib/net6.0/es/System.CommandLine.resources.dll": {
            "locale": "es"
          },
          "lib/net6.0/fr/System.CommandLine.resources.dll": {
            "locale": "fr"
          },
          "lib/net6.0/it/System.CommandLine.resources.dll": {
            "locale": "it"
          },
          "lib/net6.0/ja/System.CommandLine.resources.dll": {
            "locale": "ja"
          },
          "lib/net6.0/ko/System.CommandLine.resources.dll": {
            "locale": "ko"
          },
          "lib/net6.0/pl/System.CommandLine.resources.dll": {
            "locale": "pl"
          },
          "lib/net6.0/pt-BR/System.CommandLine.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/net6.0/ru/System.CommandLine.resources.dll": {
            "locale": "ru"
          },
          "lib/net6.0/tr/System.CommandLine.resources.dll": {
            "locale": "tr"
          },
          "lib/net6.0/zh-Hans/System.CommandLine.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/net6.0/zh-Hant/System.CommandLine.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "System.Drawing.Common/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "8.0.0"
        },
        "compile": {
          "lib/net8.0/System.Drawing.Common.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Drawing.Common.dll": {
            "related": ".pdb;.xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "System.IO.Pipelines/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "System.Management/9.0.0": {
        "type": "package",
        "dependencies": {
          "System.CodeDom": "9.0.0"
        },
        "compile": {
          "lib/net8.0/System.Management.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Management.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win/lib/net8.0/System.Management.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "System.Reflection.Metadata/8.0.0": {
        "type": "package",
        "dependencies": {
          "System.Collections.Immutable": "8.0.0"
        },
        "compile": {
          "lib/net8.0/System.Reflection.Metadata.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Reflection.Metadata.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Security.AccessControl/4.7.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.NETCore.Platforms": "3.1.0",
          "System.Security.Principal.Windows": "4.7.0"
        },
        "compile": {
          "ref/netstandard2.0/System.Security.AccessControl.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/System.Security.AccessControl.dll": {
            "related": ".xml"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/netcoreapp2.0/System.Security.AccessControl.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "System.Security.Principal.Windows/4.7.0": {
        "type": "package",
        "compile": {
          "ref/netcoreapp3.0/System.Security.Principal.Windows.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/System.Security.Principal.Windows.dll": {
            "related": ".xml"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/netcoreapp2.1/System.Security.Principal.Windows.dll": {
            "assetType": "runtime",
            "rid": "unix"
          },
          "runtimes/win/lib/netcoreapp2.1/System.Security.Principal.Windows.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "Tmds.DBus.Protocol/0.21.2": {
        "type": "package",
        "dependencies": {
          "System.IO.Pipelines": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Tmds.DBus.Protocol.dll": {}
        },
        "runtime": {
          "lib/net8.0/Tmds.DBus.Protocol.dll": {}
        }
      }
    }
  },
  "libraries": {
    "Avalonia/11.3.1": {
      "sha512": "XHZAj64Ywp3su68NBckeccY1N4Cig8J/iTzMEszWDnAWQbH8xgHftcr+DhS7PrANM/uXyFGP9n4+4v3vhJDeWA==",
      "type": "package",
      "path": "avalonia/11.3.1",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "analyzers/dotnet/cs/Avalonia.Analyzers.dll",
        "analyzers/dotnet/cs/Avalonia.Generators.dll",
        "avalonia.11.3.1.nupkg.sha512",
        "avalonia.nuspec",
        "build/Avalonia.Generators.props",
        "build/Avalonia.props",
        "build/Avalonia.targets",
        "build/AvaloniaBuildTasks.props",
        "build/AvaloniaBuildTasks.targets",
        "build/AvaloniaItemSchema.xaml",
        "build/AvaloniaPrivateApis.targets",
        "build/AvaloniaRules.Project.xml",
        "build/AvaloniaSingleProject.targets",
        "build/AvaloniaVersion.props",
        "buildTransitive/Avalonia.Generators.props",
        "buildTransitive/Avalonia.props",
        "buildTransitive/Avalonia.targets",
        "buildTransitive/AvaloniaBuildTasks.props",
        "buildTransitive/AvaloniaBuildTasks.targets",
        "buildTransitive/AvaloniaItemSchema.xaml",
        "buildTransitive/AvaloniaPrivateApis.targets",
        "buildTransitive/AvaloniaRules.Project.xml",
        "buildTransitive/AvaloniaSingleProject.targets",
        "lib/net6.0/Avalonia.Base.dll",
        "lib/net6.0/Avalonia.Base.xml",
        "lib/net6.0/Avalonia.Controls.dll",
        "lib/net6.0/Avalonia.Controls.xml",
        "lib/net6.0/Avalonia.DesignerSupport.dll",
        "lib/net6.0/Avalonia.DesignerSupport.xml",
        "lib/net6.0/Avalonia.Dialogs.dll",
        "lib/net6.0/Avalonia.Dialogs.xml",
        "lib/net6.0/Avalonia.Markup.Xaml.dll",
        "lib/net6.0/Avalonia.Markup.Xaml.xml",
        "lib/net6.0/Avalonia.Markup.dll",
        "lib/net6.0/Avalonia.Markup.xml",
        "lib/net6.0/Avalonia.Metal.dll",
        "lib/net6.0/Avalonia.Metal.xml",
        "lib/net6.0/Avalonia.MicroCom.dll",
        "lib/net6.0/Avalonia.MicroCom.xml",
        "lib/net6.0/Avalonia.OpenGL.dll",
        "lib/net6.0/Avalonia.OpenGL.xml",
        "lib/net6.0/Avalonia.Vulkan.dll",
        "lib/net6.0/Avalonia.Vulkan.xml",
        "lib/net6.0/Avalonia.dll",
        "lib/net6.0/Avalonia.xml",
        "lib/net8.0/Avalonia.Base.dll",
        "lib/net8.0/Avalonia.Base.xml",
        "lib/net8.0/Avalonia.Controls.dll",
        "lib/net8.0/Avalonia.Controls.xml",
        "lib/net8.0/Avalonia.DesignerSupport.dll",
        "lib/net8.0/Avalonia.DesignerSupport.xml",
        "lib/net8.0/Avalonia.Dialogs.dll",
        "lib/net8.0/Avalonia.Dialogs.xml",
        "lib/net8.0/Avalonia.Markup.Xaml.dll",
        "lib/net8.0/Avalonia.Markup.Xaml.xml",
        "lib/net8.0/Avalonia.Markup.dll",
        "lib/net8.0/Avalonia.Markup.xml",
        "lib/net8.0/Avalonia.Metal.dll",
        "lib/net8.0/Avalonia.Metal.xml",
        "lib/net8.0/Avalonia.MicroCom.dll",
        "lib/net8.0/Avalonia.MicroCom.xml",
        "lib/net8.0/Avalonia.OpenGL.dll",
        "lib/net8.0/Avalonia.OpenGL.xml",
        "lib/net8.0/Avalonia.Vulkan.dll",
        "lib/net8.0/Avalonia.Vulkan.xml",
        "lib/net8.0/Avalonia.dll",
        "lib/net8.0/Avalonia.xml",
        "lib/netstandard2.0/Avalonia.Base.dll",
        "lib/netstandard2.0/Avalonia.Base.xml",
        "lib/netstandard2.0/Avalonia.Controls.dll",
        "lib/netstandard2.0/Avalonia.Controls.xml",
        "lib/netstandard2.0/Avalonia.DesignerSupport.dll",
        "lib/netstandard2.0/Avalonia.DesignerSupport.xml",
        "lib/netstandard2.0/Avalonia.Dialogs.dll",
        "lib/netstandard2.0/Avalonia.Dialogs.xml",
        "lib/netstandard2.0/Avalonia.Markup.Xaml.dll",
        "lib/netstandard2.0/Avalonia.Markup.Xaml.xml",
        "lib/netstandard2.0/Avalonia.Markup.dll",
        "lib/netstandard2.0/Avalonia.Markup.xml",
        "lib/netstandard2.0/Avalonia.Metal.dll",
        "lib/netstandard2.0/Avalonia.Metal.xml",
        "lib/netstandard2.0/Avalonia.MicroCom.dll",
        "lib/netstandard2.0/Avalonia.MicroCom.xml",
        "lib/netstandard2.0/Avalonia.OpenGL.dll",
        "lib/netstandard2.0/Avalonia.OpenGL.xml",
        "lib/netstandard2.0/Avalonia.Vulkan.dll",
        "lib/netstandard2.0/Avalonia.Vulkan.xml",
        "lib/netstandard2.0/Avalonia.dll",
        "lib/netstandard2.0/Avalonia.xml",
        "ref/net6.0/Avalonia.Base.dll",
        "ref/net6.0/Avalonia.Base.xml",
        "ref/net6.0/Avalonia.Controls.dll",
        "ref/net6.0/Avalonia.Controls.xml",
        "ref/net6.0/Avalonia.DesignerSupport.dll",
        "ref/net6.0/Avalonia.DesignerSupport.xml",
        "ref/net6.0/Avalonia.Dialogs.dll",
        "ref/net6.0/Avalonia.Dialogs.xml",
        "ref/net6.0/Avalonia.Markup.Xaml.dll",
        "ref/net6.0/Avalonia.Markup.Xaml.xml",
        "ref/net6.0/Avalonia.Markup.dll",
        "ref/net6.0/Avalonia.Markup.xml",
        "ref/net6.0/Avalonia.Metal.dll",
        "ref/net6.0/Avalonia.Metal.xml",
        "ref/net6.0/Avalonia.MicroCom.dll",
        "ref/net6.0/Avalonia.MicroCom.xml",
        "ref/net6.0/Avalonia.OpenGL.dll",
        "ref/net6.0/Avalonia.OpenGL.xml",
        "ref/net6.0/Avalonia.Vulkan.dll",
        "ref/net6.0/Avalonia.Vulkan.xml",
        "ref/net6.0/Avalonia.dll",
        "ref/net6.0/Avalonia.xml",
        "ref/net8.0/Avalonia.Base.dll",
        "ref/net8.0/Avalonia.Base.xml",
        "ref/net8.0/Avalonia.Controls.dll",
        "ref/net8.0/Avalonia.Controls.xml",
        "ref/net8.0/Avalonia.DesignerSupport.dll",
        "ref/net8.0/Avalonia.DesignerSupport.xml",
        "ref/net8.0/Avalonia.Dialogs.dll",
        "ref/net8.0/Avalonia.Dialogs.xml",
        "ref/net8.0/Avalonia.Markup.Xaml.dll",
        "ref/net8.0/Avalonia.Markup.Xaml.xml",
        "ref/net8.0/Avalonia.Markup.dll",
        "ref/net8.0/Avalonia.Markup.xml",
        "ref/net8.0/Avalonia.Metal.dll",
        "ref/net8.0/Avalonia.Metal.xml",
        "ref/net8.0/Avalonia.MicroCom.dll",
        "ref/net8.0/Avalonia.MicroCom.xml",
        "ref/net8.0/Avalonia.OpenGL.dll",
        "ref/net8.0/Avalonia.OpenGL.xml",
        "ref/net8.0/Avalonia.Vulkan.dll",
        "ref/net8.0/Avalonia.Vulkan.xml",
        "ref/net8.0/Avalonia.dll",
        "ref/net8.0/Avalonia.xml",
        "ref/netstandard2.0/Avalonia.Base.dll",
        "ref/netstandard2.0/Avalonia.Base.xml",
        "ref/netstandard2.0/Avalonia.Controls.dll",
        "ref/netstandard2.0/Avalonia.Controls.xml",
        "ref/netstandard2.0/Avalonia.DesignerSupport.dll",
        "ref/netstandard2.0/Avalonia.DesignerSupport.xml",
        "ref/netstandard2.0/Avalonia.Dialogs.dll",
        "ref/netstandard2.0/Avalonia.Dialogs.xml",
        "ref/netstandard2.0/Avalonia.Markup.Xaml.dll",
        "ref/netstandard2.0/Avalonia.Markup.Xaml.xml",
        "ref/netstandard2.0/Avalonia.Markup.dll",
        "ref/netstandard2.0/Avalonia.Markup.xml",
        "ref/netstandard2.0/Avalonia.Metal.dll",
        "ref/netstandard2.0/Avalonia.Metal.xml",
        "ref/netstandard2.0/Avalonia.MicroCom.dll",
        "ref/netstandard2.0/Avalonia.MicroCom.xml",
        "ref/netstandard2.0/Avalonia.OpenGL.dll",
        "ref/netstandard2.0/Avalonia.OpenGL.xml",
        "ref/netstandard2.0/Avalonia.Vulkan.dll",
        "ref/netstandard2.0/Avalonia.Vulkan.xml",
        "ref/netstandard2.0/Avalonia.dll",
        "ref/netstandard2.0/Avalonia.xml",
        "tools/net461/designer/Avalonia.Designer.HostApp.exe",
        "tools/netstandard2.0/Avalonia.Build.Tasks.dll",
        "tools/netstandard2.0/designer/Avalonia.Designer.HostApp.dll"
      ]
    },
    "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
      "sha512": "ZL0VLc4s9rvNNFt19Pxm5UNAkmKNylugAwJPX9ulXZ6JWs/l6XZihPWWTyezaoNOVyEPU8YbURtW7XMAtqXH5A==",
      "type": "package",
      "path": "avalonia.angle.windows.natives/2.1.25547.20250602",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE",
        "avalonia.angle.windows.natives.2.1.25547.20250602.nupkg.sha512",
        "avalonia.angle.windows.natives.nuspec",
        "runtimes/win-arm64/native/av_libglesv2.dll",
        "runtimes/win-x64/native/av_libglesv2.dll",
        "runtimes/win-x86/native/av_libglesv2.dll"
      ]
    },
    "Avalonia.AvaloniaEdit/11.3.0": {
      "sha512": "9M/jJb4DPqQmKtNMZn6+vpqlf+ZGMtK8vEBpPVP3De1xRCu1hv4ZAtoA8hY6bYj2hgv/luete3ixoOsEQ++YJQ==",
      "type": "package",
      "path": "avalonia.avaloniaedit/11.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.avaloniaedit.11.3.0.nupkg.sha512",
        "avalonia.avaloniaedit.nuspec",
        "lib/net6.0/AvaloniaEdit.dll",
        "lib/netstandard2.0/AvaloniaEdit.dll"
      ]
    },
    "Avalonia.BuildServices/0.0.31": {
      "sha512": "KmCN6Hc+45q4OnF10ge450yVUvWuxU6bdQiyKqiSvrHKpahNrEdk0kG6Ip6GHk2SKOCttGQuA206JVdkldEENg==",
      "type": "package",
      "path": "avalonia.buildservices/0.0.31",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.buildservices.0.0.31.nupkg.sha512",
        "avalonia.buildservices.nuspec",
        "build/Avalonia.BuildServices.targets",
        "buildTransitive/Avalonia.BuildServices.targets",
        "tools/netstandard2.0/Avalonia.BuildServices.Collector.dll",
        "tools/netstandard2.0/Avalonia.BuildServices.dll",
        "tools/netstandard2.0/runtimeconfig.json"
      ]
    },
    "Avalonia.Controls.ColorPicker/11.3.1": {
      "sha512": "+JXaqgsYtEhvi8KFYtdVriHX0P1f1PAdzNckYGbUc7s3COTLdtVRxAfbQ77SKIMx9nJu5H73X4A7y2EPB5pXdQ==",
      "type": "package",
      "path": "avalonia.controls.colorpicker/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.controls.colorpicker.11.3.1.nupkg.sha512",
        "avalonia.controls.colorpicker.nuspec",
        "lib/net6.0/Avalonia.Controls.ColorPicker.dll",
        "lib/net6.0/Avalonia.Controls.ColorPicker.xml",
        "lib/net8.0/Avalonia.Controls.ColorPicker.dll",
        "lib/net8.0/Avalonia.Controls.ColorPicker.xml",
        "lib/netstandard2.0/Avalonia.Controls.ColorPicker.dll",
        "lib/netstandard2.0/Avalonia.Controls.ColorPicker.xml"
      ]
    },
    "Avalonia.Controls.DataGrid/11.3.1": {
      "sha512": "CWPot/hfe7vmkJBU/vsvhCMO3cxrvh/+WRX0jX65NBxARBUUdm/WOz9hlBlkm3GN796vdd1KJnBlXW/vsBgBLA==",
      "type": "package",
      "path": "avalonia.controls.datagrid/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.controls.datagrid.11.3.1.nupkg.sha512",
        "avalonia.controls.datagrid.nuspec",
        "lib/net6.0/Avalonia.Controls.DataGrid.dll",
        "lib/net6.0/Avalonia.Controls.DataGrid.xml",
        "lib/net8.0/Avalonia.Controls.DataGrid.dll",
        "lib/net8.0/Avalonia.Controls.DataGrid.xml",
        "lib/netstandard2.0/Avalonia.Controls.DataGrid.dll",
        "lib/netstandard2.0/Avalonia.Controls.DataGrid.xml",
        "readme.md"
      ]
    },
    "Avalonia.Desktop/11.3.1": {
      "sha512": "uFldiNKdZIGGR49CglbWW1xx9aSfJBDf0Yx2jtntZxXQlew1edF8/JEja8tmDgcFjdsrz2HZtIpDbg4ilCjcZQ==",
      "type": "package",
      "path": "avalonia.desktop/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.desktop.11.3.1.nupkg.sha512",
        "avalonia.desktop.nuspec",
        "lib/net6.0/Avalonia.Desktop.dll",
        "lib/net6.0/Avalonia.Desktop.xml",
        "lib/net8.0/Avalonia.Desktop.dll",
        "lib/net8.0/Avalonia.Desktop.xml",
        "lib/netstandard2.0/Avalonia.Desktop.dll",
        "lib/netstandard2.0/Avalonia.Desktop.xml"
      ]
    },
    "Avalonia.Diagnostics/11.3.1": {
      "sha512": "/Jw6JgaJJRc3Y3f+je/WnyXgYixDLq/u74qW2isDC7s1/1nmRJR14oklF6Gc6cIVhLFw0JbFJEn6ZHSOwKAsLg==",
      "type": "package",
      "path": "avalonia.diagnostics/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.diagnostics.11.3.1.nupkg.sha512",
        "avalonia.diagnostics.nuspec",
        "lib/net6.0/Avalonia.Diagnostics.dll",
        "lib/net6.0/Avalonia.Diagnostics.xml",
        "lib/net8.0/Avalonia.Diagnostics.dll",
        "lib/net8.0/Avalonia.Diagnostics.xml",
        "lib/netstandard2.0/Avalonia.Diagnostics.dll",
        "lib/netstandard2.0/Avalonia.Diagnostics.xml"
      ]
    },
    "Avalonia.Fonts.Inter/11.3.1": {
      "sha512": "H/K3IGbo4Eo1jYTCk64mVBECX1TnSfNwVDwVhPoHVkpb6QVZmBB1UilImMLpBYtAYG49O4JILhB5p/rdfeCjZw==",
      "type": "package",
      "path": "avalonia.fonts.inter/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.fonts.inter.11.3.1.nupkg.sha512",
        "avalonia.fonts.inter.nuspec",
        "lib/net6.0/Avalonia.Fonts.Inter.dll",
        "lib/net6.0/Avalonia.Fonts.Inter.xml",
        "lib/net8.0/Avalonia.Fonts.Inter.dll",
        "lib/net8.0/Avalonia.Fonts.Inter.xml",
        "lib/netstandard2.0/Avalonia.Fonts.Inter.dll",
        "lib/netstandard2.0/Avalonia.Fonts.Inter.xml"
      ]
    },
    "Avalonia.FreeDesktop/11.3.1": {
      "sha512": "OXR5lDGz0ACWrvyJPisiLk6j97L8keDxKXFbSI6t4gfM9QiqIcBF7aATbEMx1d4oiey3tH5DgcpzVmop5jmvFA==",
      "type": "package",
      "path": "avalonia.freedesktop/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.freedesktop.11.3.1.nupkg.sha512",
        "avalonia.freedesktop.nuspec",
        "lib/net6.0/Avalonia.FreeDesktop.dll",
        "lib/net6.0/Avalonia.FreeDesktop.xml",
        "lib/net8.0/Avalonia.FreeDesktop.dll",
        "lib/net8.0/Avalonia.FreeDesktop.xml",
        "lib/netstandard2.0/Avalonia.FreeDesktop.dll",
        "lib/netstandard2.0/Avalonia.FreeDesktop.xml"
      ]
    },
    "Avalonia.Markup.Xaml.Loader/11.3.1": {
      "sha512": "jHZUia8I/kyhtYLgnE5imXd9PPx3k5os3KGH0iILTrerAiVOnKCHHBwhFf82PW4OORNu2MaoNaby5u/Em7HPCg==",
      "type": "package",
      "path": "avalonia.markup.xaml.loader/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.markup.xaml.loader.11.3.1.nupkg.sha512",
        "avalonia.markup.xaml.loader.nuspec",
        "lib/net6.0/Avalonia.Markup.Xaml.Loader.dll",
        "lib/net6.0/Avalonia.Markup.Xaml.Loader.xml",
        "lib/net8.0/Avalonia.Markup.Xaml.Loader.dll",
        "lib/net8.0/Avalonia.Markup.Xaml.Loader.xml",
        "lib/netstandard2.0/Avalonia.Markup.Xaml.Loader.dll",
        "lib/netstandard2.0/Avalonia.Markup.Xaml.Loader.xml"
      ]
    },
    "Avalonia.Native/11.3.1": {
      "sha512": "Ts4PWrpql5mowsxAks/WBI/VheU329CwPE12grEZD46moOhmrQ/tuX8ge8lyAhhVy8h8LFC5KImdDIkhlbeVzQ==",
      "type": "package",
      "path": "avalonia.native/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.native.11.3.1.nupkg.sha512",
        "avalonia.native.nuspec",
        "lib/net6.0/Avalonia.Native.dll",
        "lib/net6.0/Avalonia.Native.xml",
        "lib/net8.0/Avalonia.Native.dll",
        "lib/net8.0/Avalonia.Native.xml",
        "lib/netstandard2.0/Avalonia.Native.dll",
        "lib/netstandard2.0/Avalonia.Native.xml",
        "runtimes/osx/native/libAvaloniaNative.dylib"
      ]
    },
    "Avalonia.Remote.Protocol/11.3.1": {
      "sha512": "IujOppxgsmjNP2oCas++LWNUTqwzSko7ey60+0tHfy7Q6vnTmtL+0vQidtmoKYea/NYvWqIw+YxLUY3XRwYhSQ==",
      "type": "package",
      "path": "avalonia.remote.protocol/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.remote.protocol.11.3.1.nupkg.sha512",
        "avalonia.remote.protocol.nuspec",
        "lib/net6.0/Avalonia.Remote.Protocol.dll",
        "lib/net6.0/Avalonia.Remote.Protocol.xml",
        "lib/net8.0/Avalonia.Remote.Protocol.dll",
        "lib/net8.0/Avalonia.Remote.Protocol.xml",
        "lib/netstandard2.0/Avalonia.Remote.Protocol.dll",
        "lib/netstandard2.0/Avalonia.Remote.Protocol.xml"
      ]
    },
    "Avalonia.Skia/11.3.1": {
      "sha512": "VSBecGRgd3xtBwFzWNuoSVP1gUO+BV9zX1zTUrw/ftdZKmtOe8m3VT7u2TCBvUSD6nJrSNe6JXHE585kCQFjcQ==",
      "type": "package",
      "path": "avalonia.skia/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.skia.11.3.1.nupkg.sha512",
        "avalonia.skia.nuspec",
        "lib/net6.0/Avalonia.Skia.dll",
        "lib/net6.0/Avalonia.Skia.xml",
        "lib/net8.0/Avalonia.Skia.dll",
        "lib/net8.0/Avalonia.Skia.xml",
        "lib/netstandard2.0/Avalonia.Skia.dll",
        "lib/netstandard2.0/Avalonia.Skia.xml"
      ]
    },
    "Avalonia.Themes.Fluent/11.3.1": {
      "sha512": "3ImtHxSaG1RGk3uY3+dLoAlxrmE3Y2QzqMbIaQgsdEbFxUqKvl2m32Yg/yw00+2nrMy2KGQLL9tkbnvHPWp5OA==",
      "type": "package",
      "path": "avalonia.themes.fluent/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.themes.fluent.11.3.1.nupkg.sha512",
        "avalonia.themes.fluent.nuspec",
        "lib/net6.0/Avalonia.Themes.Fluent.dll",
        "lib/net6.0/Avalonia.Themes.Fluent.xml",
        "lib/net8.0/Avalonia.Themes.Fluent.dll",
        "lib/net8.0/Avalonia.Themes.Fluent.xml",
        "lib/netstandard2.0/Avalonia.Themes.Fluent.dll",
        "lib/netstandard2.0/Avalonia.Themes.Fluent.xml"
      ]
    },
    "Avalonia.Themes.Simple/11.3.1": {
      "sha512": "bUr8cN1Wu9NUro/RHZZkBJdv08+KVtqSUGBMNQZLjyYhxQtgrAo5tTsqWPOjPCCKcIcH+db3VOktWlPfGvz8Fw==",
      "type": "package",
      "path": "avalonia.themes.simple/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.themes.simple.11.3.1.nupkg.sha512",
        "avalonia.themes.simple.nuspec",
        "lib/net6.0/Avalonia.Themes.Simple.dll",
        "lib/net6.0/Avalonia.Themes.Simple.xml",
        "lib/net8.0/Avalonia.Themes.Simple.dll",
        "lib/net8.0/Avalonia.Themes.Simple.xml",
        "lib/netstandard2.0/Avalonia.Themes.Simple.dll",
        "lib/netstandard2.0/Avalonia.Themes.Simple.xml"
      ]
    },
    "Avalonia.Win32/11.3.1": {
      "sha512": "H0jcthY+CHXJq/l/uVLG1SloNowp/6buIxuIv3J8RKiVW6L2XD2uv89KP/n1c2SMQrklvRdwPzOV8WGsYNv85w==",
      "type": "package",
      "path": "avalonia.win32/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.win32.11.3.1.nupkg.sha512",
        "avalonia.win32.nuspec",
        "lib/net6.0/Avalonia.Win32.Automation.dll",
        "lib/net6.0/Avalonia.Win32.Automation.xml",
        "lib/net6.0/Avalonia.Win32.dll",
        "lib/net6.0/Avalonia.Win32.xml",
        "lib/net8.0/Avalonia.Win32.Automation.dll",
        "lib/net8.0/Avalonia.Win32.Automation.xml",
        "lib/net8.0/Avalonia.Win32.dll",
        "lib/net8.0/Avalonia.Win32.xml",
        "lib/netstandard2.0/Avalonia.Win32.Automation.dll",
        "lib/netstandard2.0/Avalonia.Win32.Automation.xml",
        "lib/netstandard2.0/Avalonia.Win32.dll",
        "lib/netstandard2.0/Avalonia.Win32.xml"
      ]
    },
    "Avalonia.X11/11.3.1": {
      "sha512": "Ldr9zW6BFlHvPUpc9UYUKtrtUJzgfZ8ggnp8NWBBZEs0iqIQmZbk9cYJcAxpsL9P1w1MKiaaOBYAKeSxHUJgJA==",
      "type": "package",
      "path": "avalonia.x11/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.x11.11.3.1.nupkg.sha512",
        "avalonia.x11.nuspec",
        "lib/net6.0/Avalonia.X11.dll",
        "lib/net6.0/Avalonia.X11.xml",
        "lib/net8.0/Avalonia.X11.dll",
        "lib/net8.0/Avalonia.X11.xml",
        "lib/netstandard2.0/Avalonia.X11.dll",
        "lib/netstandard2.0/Avalonia.X11.xml"
      ]
    },
    "CliWrap/3.7.0": {
      "sha512": "2RgU3zmQDAD4S8Aq4igWRF31VzzH/zE6kdecLfeozoPZlibahBs9AGSqrk8B6U13K2A65dFRLg/0tNBtBaOH/A==",
      "type": "package",
      "path": "cliwrap/3.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "cliwrap.3.7.0.nupkg.sha512",
        "cliwrap.nuspec",
        "favicon.png",
        "lib/net9.0/CliWrap.dll",
        "lib/net9.0/CliWrap.xml",
        "lib/netstandard2.0/CliWrap.dll",
        "lib/netstandard2.0/CliWrap.xml",
        "lib/netstandard2.1/CliWrap.dll",
        "lib/netstandard2.1/CliWrap.xml"
      ]
    },
    "CommunityToolkit.Mvvm/8.2.0": {
      "sha512": "F883u+B0AVUkRZS+VQBiZEJiqlGiiQhGA8Ejy1/Y8fl4ecBmSd+HYuDso0iiUhh+UxRDjp2aTQ7jGkuL2S4NrA==",
      "type": "package",
      "path": "communitytoolkit.mvvm/8.2.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "License.md",
        "ThirdPartyNotices.txt",
        "analyzers/dotnet/roslyn4.0/cs/CommunityToolkit.Mvvm.CodeFixers.dll",
        "analyzers/dotnet/roslyn4.0/cs/CommunityToolkit.Mvvm.SourceGenerators.dll",
        "analyzers/dotnet/roslyn4.3/cs/CommunityToolkit.Mvvm.CodeFixers.dll",
        "analyzers/dotnet/roslyn4.3/cs/CommunityToolkit.Mvvm.SourceGenerators.dll",
        "build/netstandard2.0/CommunityToolkit.Mvvm.targets",
        "build/netstandard2.1/CommunityToolkit.Mvvm.targets",
        "buildTransitive/netstandard2.0/CommunityToolkit.Mvvm.targets",
        "buildTransitive/netstandard2.1/CommunityToolkit.Mvvm.targets",
        "communitytoolkit.mvvm.8.2.0.nupkg.sha512",
        "communitytoolkit.mvvm.nuspec",
        "lib/net6.0/CommunityToolkit.Mvvm.dll",
        "lib/net6.0/CommunityToolkit.Mvvm.pdb",
        "lib/net6.0/CommunityToolkit.Mvvm.xml",
        "lib/netstandard2.0/CommunityToolkit.Mvvm.dll",
        "lib/netstandard2.0/CommunityToolkit.Mvvm.pdb",
        "lib/netstandard2.0/CommunityToolkit.Mvvm.xml",
        "lib/netstandard2.1/CommunityToolkit.Mvvm.dll",
        "lib/netstandard2.1/CommunityToolkit.Mvvm.pdb",
        "lib/netstandard2.1/CommunityToolkit.Mvvm.xml"
      ]
    },
    "HarfBuzzSharp/8.3.1.1": {
      "sha512": "tLZN66oe/uiRPTZfrCU4i8ScVGwqHNh5MHrXj0yVf4l7Mz0FhTGnQ71RGySROTmdognAs0JtluHkL41pIabWuQ==",
      "type": "package",
      "path": "harfbuzzsharp/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "harfbuzzsharp.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nuspec",
        "icon.png",
        "lib/net462/HarfBuzzSharp.dll",
        "lib/net462/HarfBuzzSharp.pdb",
        "lib/net6.0/HarfBuzzSharp.dll",
        "lib/net6.0/HarfBuzzSharp.pdb",
        "lib/net8.0-android34.0/HarfBuzzSharp.dll",
        "lib/net8.0-android34.0/HarfBuzzSharp.pdb",
        "lib/net8.0-android34.0/HarfBuzzSharp.xml",
        "lib/net8.0-ios17.0/HarfBuzzSharp.dll",
        "lib/net8.0-ios17.0/HarfBuzzSharp.pdb",
        "lib/net8.0-maccatalyst17.0/HarfBuzzSharp.dll",
        "lib/net8.0-maccatalyst17.0/HarfBuzzSharp.pdb",
        "lib/net8.0-macos14.0/HarfBuzzSharp.dll",
        "lib/net8.0-macos14.0/HarfBuzzSharp.pdb",
        "lib/net8.0-tizen7.0/HarfBuzzSharp.dll",
        "lib/net8.0-tizen7.0/HarfBuzzSharp.pdb",
        "lib/net8.0-tvos17.0/HarfBuzzSharp.dll",
        "lib/net8.0-tvos17.0/HarfBuzzSharp.pdb",
        "lib/net8.0-windows10.0.19041/HarfBuzzSharp.dll",
        "lib/net8.0-windows10.0.19041/HarfBuzzSharp.pdb",
        "lib/net8.0/HarfBuzzSharp.dll",
        "lib/net8.0/HarfBuzzSharp.pdb",
        "lib/netstandard2.0/HarfBuzzSharp.dll",
        "lib/netstandard2.0/HarfBuzzSharp.pdb",
        "lib/netstandard2.1/HarfBuzzSharp.dll",
        "lib/netstandard2.1/HarfBuzzSharp.pdb"
      ]
    },
    "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
      "sha512": "3EZ1mpIiKWRLL5hUYA82ZHteeDIVaEA/Z0rA/wU6tjx6crcAkJnBPwDXZugBSfo8+J3EznvRJf49uMsqYfKrHg==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.linux/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/net462/HarfBuzzSharp.NativeAssets.Linux.targets",
        "harfbuzzsharp.nativeassets.linux.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.linux.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._",
        "runtimes/linux-arm/native/libHarfBuzzSharp.so",
        "runtimes/linux-arm64/native/libHarfBuzzSharp.so",
        "runtimes/linux-loongarch64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-arm/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-arm64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-loongarch64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-riscv64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-x64/native/libHarfBuzzSharp.so",
        "runtimes/linux-riscv64/native/libHarfBuzzSharp.so",
        "runtimes/linux-x64/native/libHarfBuzzSharp.so",
        "runtimes/linux-x86/native/libHarfBuzzSharp.so"
      ]
    },
    "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
      "sha512": "jbtCsgftcaFLCA13tVKo5iWdElJScrulLTKJre36O4YQTIlwDtPPqhRZNk+Y0vv4D1gxbscasGRucUDfS44ofQ==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.macos/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/net462/HarfBuzzSharp.NativeAssets.macOS.targets",
        "buildTransitive/net8.0-macos14.0/HarfBuzzSharp.NativeAssets.macOS.targets",
        "harfbuzzsharp.nativeassets.macos.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.macos.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/net8.0-macos14.0/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._",
        "runtimes/osx/native/libHarfBuzzSharp.dylib"
      ]
    },
    "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {
      "sha512": "loJweK2u/mH/3C2zBa0ggJlITIszOkK64HLAZB7FUT670dTg965whLFYHDQo69NmC4+d9UN0icLC9VHidXaVCA==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.webassembly/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.props",
        "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.targets",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/2.0.23/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/2.0.6/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/mt,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/mt/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/st,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/st/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/mt,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/mt/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/st,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/st/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/mt,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/mt/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/st,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/st/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.7/libHarfBuzzSharp.a",
        "harfbuzzsharp.nativeassets.webassembly.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.webassembly.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._"
      ]
    },
    "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
      "sha512": "UsJtQsfAJoFDZrXc4hCUfRPMqccfKZ0iumJ/upcUjz/cmsTgVFGNEL5yaJWmkqsuFYdMWbj/En5/kS4PFl9hBA==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.win32/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/net462/HarfBuzzSharp.NativeAssets.Win32.targets",
        "harfbuzzsharp.nativeassets.win32.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.win32.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0-windows10.0.19041/_._",
        "lib/net6.0/_._",
        "lib/net8.0-windows10.0.19041/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._",
        "runtimes/win-arm64/native/libHarfBuzzSharp.dll",
        "runtimes/win-x64/native/libHarfBuzzSharp.dll",
        "runtimes/win-x86/native/libHarfBuzzSharp.dll"
      ]
    },
    "MicroCom.Runtime/0.11.0": {
      "sha512": "MEnrZ3UIiH40hjzMDsxrTyi8dtqB5ziv3iBeeU4bXsL/7NLSal9F1lZKpK+tfBRnUoDSdtcW3KufE4yhATOMCA==",
      "type": "package",
      "path": "microcom.runtime/0.11.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/MicroCom.Runtime.dll",
        "lib/netstandard2.0/MicroCom.Runtime.dll",
        "microcom.runtime.0.11.0.nupkg.sha512",
        "microcom.runtime.nuspec"
      ]
    },
    "Microsoft.CodeAnalysis.Analyzers/3.3.4": {
      "sha512": "AxkxcPR+rheX0SmvpLVIGLhOUXAKG56a64kV9VQZ4y9gR9ZmPXnqZvHJnmwLSwzrEP6junUF11vuc+aqo5r68g==",
      "type": "package",
      "path": "microsoft.codeanalysis.analyzers/3.3.4",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.txt",
        "analyzers/dotnet/cs/Microsoft.CodeAnalysis.Analyzers.dll",
        "analyzers/dotnet/cs/Microsoft.CodeAnalysis.CSharp.Analyzers.dll",
        "analyzers/dotnet/cs/cs/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/de/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/es/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/fr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/it/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/ja/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/ko/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/pl/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/pt-BR/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/ru/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/tr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/zh-Hans/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/zh-Hant/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/Microsoft.CodeAnalysis.Analyzers.dll",
        "analyzers/dotnet/vb/Microsoft.CodeAnalysis.VisualBasic.Analyzers.dll",
        "analyzers/dotnet/vb/cs/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/de/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/es/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/fr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/it/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/ja/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/ko/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/pl/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/pt-BR/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/ru/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/tr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/zh-Hans/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/zh-Hant/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "buildTransitive/Microsoft.CodeAnalysis.Analyzers.props",
        "buildTransitive/Microsoft.CodeAnalysis.Analyzers.targets",
        "buildTransitive/config/analysislevel_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevel_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevel_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_all.globalconfig",
        "buildTransitive/config/analysislevel_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_default.globalconfig",
        "buildTransitive/config/analysislevel_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevel_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_none.globalconfig",
        "buildTransitive/config/analysislevel_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevel_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_all.globalconfig",
        "buildTransitive/config/analysislevel_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_default.globalconfig",
        "buildTransitive/config/analysislevel_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_minimum.globalconfig",
        "buildTransitive/config/analysislevel_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_none.globalconfig",
        "buildTransitive/config/analysislevel_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_3_recommended.globalconfig",
        "buildTransitive/config/analysislevel_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_4_3_all.globalconfig",
        "buildTransitive/config/analysislevel_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_4_3_default.globalconfig",
        "buildTransitive/config/analysislevel_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevel_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_4_3_none.globalconfig",
        "buildTransitive/config/analysislevel_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevel_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevel_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_all.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_default.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_none.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelcorrectness_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevellibrary_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_all.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_default.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_none.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_all.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_default.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_minimum.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_none.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_recommended.globalconfig",
        "buildTransitive/config/analysislevellibrary_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_all.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_default.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_none.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevellibrary_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscompatibility_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysiscorrectness_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdesign_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisdocumentation_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysislocalization_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisperformance_4_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_recommended_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_all.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_all_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_default.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_default_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_minimum.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_minimum_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_none.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_none_warnaserror.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_recommended.globalconfig",
        "buildTransitive/config/analysislevelmicrosoftcodeanalysisreleasetracking_4_3_recommended_warnaserror.globalconfig",
        "documentation/Analyzer Configuration.md",
        "documentation/Microsoft.CodeAnalysis.Analyzers.md",
        "documentation/Microsoft.CodeAnalysis.Analyzers.sarif",
        "editorconfig/AllRulesDefault/.editorconfig",
        "editorconfig/AllRulesDisabled/.editorconfig",
        "editorconfig/AllRulesEnabled/.editorconfig",
        "editorconfig/CorrectnessRulesDefault/.editorconfig",
        "editorconfig/CorrectnessRulesEnabled/.editorconfig",
        "editorconfig/DataflowRulesDefault/.editorconfig",
        "editorconfig/DataflowRulesEnabled/.editorconfig",
        "editorconfig/LibraryRulesDefault/.editorconfig",
        "editorconfig/LibraryRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCompatibilityRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCompatibilityRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCorrectnessRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCorrectnessRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDesignRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDesignRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDocumentationRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDocumentationRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisLocalizationRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisLocalizationRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisPerformanceRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisPerformanceRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisReleaseTrackingRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisReleaseTrackingRulesEnabled/.editorconfig",
        "editorconfig/PortedFromFxCopRulesDefault/.editorconfig",
        "editorconfig/PortedFromFxCopRulesEnabled/.editorconfig",
        "microsoft.codeanalysis.analyzers.3.3.4.nupkg.sha512",
        "microsoft.codeanalysis.analyzers.nuspec",
        "rulesets/AllRulesDefault.ruleset",
        "rulesets/AllRulesDisabled.ruleset",
        "rulesets/AllRulesEnabled.ruleset",
        "rulesets/CorrectnessRulesDefault.ruleset",
        "rulesets/CorrectnessRulesEnabled.ruleset",
        "rulesets/DataflowRulesDefault.ruleset",
        "rulesets/DataflowRulesEnabled.ruleset",
        "rulesets/LibraryRulesDefault.ruleset",
        "rulesets/LibraryRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisCompatibilityRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisCompatibilityRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisCorrectnessRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisCorrectnessRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisDesignRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisDesignRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisDocumentationRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisDocumentationRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisLocalizationRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisLocalizationRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisPerformanceRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisPerformanceRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisReleaseTrackingRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisReleaseTrackingRulesEnabled.ruleset",
        "rulesets/PortedFromFxCopRulesDefault.ruleset",
        "rulesets/PortedFromFxCopRulesEnabled.ruleset",
        "tools/install.ps1",
        "tools/uninstall.ps1"
      ]
    },
    "Microsoft.CodeAnalysis.Common/4.9.2": {
      "sha512": "M5PThug7b2AdxL7xKmQs50KzAQTl9jENw5jMT3iUt16k+DAFlw1S87juU3UuPs3gvBm8trMBSOEvSFDr31c9Vw==",
      "type": "package",
      "path": "microsoft.codeanalysis.common/4.9.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "lib/net6.0/Microsoft.CodeAnalysis.dll",
        "lib/net6.0/Microsoft.CodeAnalysis.pdb",
        "lib/net6.0/Microsoft.CodeAnalysis.xml",
        "lib/net6.0/cs/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/de/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/es/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/fr/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/it/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/ja/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/ko/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/pl/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/pt-BR/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/ru/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/tr/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/zh-Hans/Microsoft.CodeAnalysis.resources.dll",
        "lib/net6.0/zh-Hant/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/Microsoft.CodeAnalysis.dll",
        "lib/net7.0/Microsoft.CodeAnalysis.pdb",
        "lib/net7.0/Microsoft.CodeAnalysis.xml",
        "lib/net7.0/cs/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/de/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/es/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/fr/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/it/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/ja/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/ko/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/pl/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/pt-BR/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/ru/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/tr/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/zh-Hans/Microsoft.CodeAnalysis.resources.dll",
        "lib/net7.0/zh-Hant/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.pdb",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.xml",
        "lib/netstandard2.0/cs/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/de/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/es/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/it/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.CodeAnalysis.resources.dll",
        "microsoft.codeanalysis.common.4.9.2.nupkg.sha512",
        "microsoft.codeanalysis.common.nuspec"
      ]
    },
    "Microsoft.CodeAnalysis.CSharp/4.9.2": {
      "sha512": "HGIo7E9Mf3exAJbUdYpDFfLoYkSVaHDJXPyusWTYUTBaOPCowGw+Gap5McE1w+K+ryIXre72oiqL88sQHmHBmg==",
      "type": "package",
      "path": "microsoft.codeanalysis.csharp/4.9.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "lib/net6.0/Microsoft.CodeAnalysis.CSharp.dll",
        "lib/net6.0/Microsoft.CodeAnalysis.CSharp.pdb",
        "lib/net6.0/Microsoft.CodeAnalysis.CSharp.xml",
        "lib/net6.0/cs/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/de/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/es/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/fr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/it/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/ja/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/ko/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/pl/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/ru/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/tr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net6.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/Microsoft.CodeAnalysis.CSharp.dll",
        "lib/net7.0/Microsoft.CodeAnalysis.CSharp.pdb",
        "lib/net7.0/Microsoft.CodeAnalysis.CSharp.xml",
        "lib/net7.0/cs/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/de/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/es/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/fr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/it/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/ja/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/ko/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/pl/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/ru/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/tr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/net7.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.pdb",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.xml",
        "lib/netstandard2.0/cs/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/de/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/es/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/it/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "microsoft.codeanalysis.csharp.4.9.2.nupkg.sha512",
        "microsoft.codeanalysis.csharp.nuspec"
      ]
    },
    "Microsoft.NETCore.Platforms/3.1.0": {
      "sha512": "z7aeg8oHln2CuNulfhiLYxCVMPEwBl3rzicjvIX+4sUuCwvXw5oXQEtbiU2c0z4qYL5L3Kmx0mMA/+t/SbY67w==",
      "type": "package",
      "path": "microsoft.netcore.platforms/3.1.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/netstandard1.0/_._",
        "microsoft.netcore.platforms.3.1.0.nupkg.sha512",
        "microsoft.netcore.platforms.nuspec",
        "runtime.json",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "Microsoft.Win32.Registry/4.7.0": {
      "sha512": "KSrRMb5vNi0CWSGG1++id2ZOs/1QhRqROt+qgbEAdQuGjGrFcl4AOl4/exGPUYz2wUnU42nvJqon1T3U0kPXLA==",
      "type": "package",
      "path": "microsoft.win32.registry/4.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net46/Microsoft.Win32.Registry.dll",
        "lib/net461/Microsoft.Win32.Registry.dll",
        "lib/net461/Microsoft.Win32.Registry.xml",
        "lib/netstandard1.3/Microsoft.Win32.Registry.dll",
        "lib/netstandard2.0/Microsoft.Win32.Registry.dll",
        "lib/netstandard2.0/Microsoft.Win32.Registry.xml",
        "microsoft.win32.registry.4.7.0.nupkg.sha512",
        "microsoft.win32.registry.nuspec",
        "ref/net46/Microsoft.Win32.Registry.dll",
        "ref/net461/Microsoft.Win32.Registry.dll",
        "ref/net461/Microsoft.Win32.Registry.xml",
        "ref/net472/Microsoft.Win32.Registry.dll",
        "ref/net472/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/Microsoft.Win32.Registry.dll",
        "ref/netstandard1.3/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/de/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/es/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/fr/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/it/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/ja/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/ko/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/ru/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/zh-hans/Microsoft.Win32.Registry.xml",
        "ref/netstandard1.3/zh-hant/Microsoft.Win32.Registry.xml",
        "ref/netstandard2.0/Microsoft.Win32.Registry.dll",
        "ref/netstandard2.0/Microsoft.Win32.Registry.xml",
        "runtimes/unix/lib/netstandard2.0/Microsoft.Win32.Registry.dll",
        "runtimes/unix/lib/netstandard2.0/Microsoft.Win32.Registry.xml",
        "runtimes/win/lib/net46/Microsoft.Win32.Registry.dll",
        "runtimes/win/lib/net461/Microsoft.Win32.Registry.dll",
        "runtimes/win/lib/net461/Microsoft.Win32.Registry.xml",
        "runtimes/win/lib/netstandard1.3/Microsoft.Win32.Registry.dll",
        "runtimes/win/lib/netstandard2.0/Microsoft.Win32.Registry.dll",
        "runtimes/win/lib/netstandard2.0/Microsoft.Win32.Registry.xml",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "Microsoft.Win32.SystemEvents/8.0.0": {
      "sha512": "9opKRyOKMCi2xJ7Bj7kxtZ1r9vbzosMvRrdEhVhDz8j8MoBGgB+WmC94yH839NPH+BclAjtQ/pyagvi/8gDLkw==",
      "type": "package",
      "path": "microsoft.win32.systemevents/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Win32.SystemEvents.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Win32.SystemEvents.targets",
        "lib/net462/Microsoft.Win32.SystemEvents.dll",
        "lib/net462/Microsoft.Win32.SystemEvents.xml",
        "lib/net6.0/Microsoft.Win32.SystemEvents.dll",
        "lib/net6.0/Microsoft.Win32.SystemEvents.xml",
        "lib/net7.0/Microsoft.Win32.SystemEvents.dll",
        "lib/net7.0/Microsoft.Win32.SystemEvents.xml",
        "lib/net8.0/Microsoft.Win32.SystemEvents.dll",
        "lib/net8.0/Microsoft.Win32.SystemEvents.xml",
        "lib/netstandard2.0/Microsoft.Win32.SystemEvents.dll",
        "lib/netstandard2.0/Microsoft.Win32.SystemEvents.xml",
        "microsoft.win32.systemevents.8.0.0.nupkg.sha512",
        "microsoft.win32.systemevents.nuspec",
        "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll",
        "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.xml",
        "runtimes/win/lib/net7.0/Microsoft.Win32.SystemEvents.dll",
        "runtimes/win/lib/net7.0/Microsoft.Win32.SystemEvents.xml",
        "runtimes/win/lib/net8.0/Microsoft.Win32.SystemEvents.dll",
        "runtimes/win/lib/net8.0/Microsoft.Win32.SystemEvents.xml",
        "useSharedDesignerContext.txt"
      ]
    },
    "MoonSharp/2.0.0": {
      "sha512": "uiAcRh7d+53k3xW9pFDJfAFVw4RnjHVCJG05M3oPAVEVwPtFavhg1H/IpC6So4X1j9kJlzuLlA3OghhPcIvc5A==",
      "type": "package",
      "path": "moonsharp/2.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net35-client/MoonSharp.Interpreter.dll",
        "lib/net35-client/MoonSharp.Interpreter.pdb",
        "lib/net35-client/MoonSharp.Interpreter.xml",
        "lib/net40-client/MoonSharp.Interpreter.dll",
        "lib/net40-client/MoonSharp.Interpreter.pdb",
        "lib/net40-client/MoonSharp.Interpreter.xml",
        "lib/netcore/MoonSharp.Interpreter.deps.json",
        "lib/netcore/MoonSharp.Interpreter.dll",
        "lib/netcore/MoonSharp.Interpreter.pdb",
        "lib/netcore/MoonSharp.Interpreter.xml",
        "lib/netstandard1.6/MoonSharp.Interpreter.deps.json",
        "lib/netstandard1.6/MoonSharp.Interpreter.dll",
        "lib/netstandard1.6/MoonSharp.Interpreter.pdb",
        "lib/netstandard1.6/MoonSharp.Interpreter.xml",
        "lib/portable-net4+sl5+wp8+win8/MoonSharp.Interpreter.dll",
        "lib/portable-net4+sl5+wp8+win8/MoonSharp.Interpreter.pdb",
        "lib/portable-net4+sl5+wp8+win8/MoonSharp.Interpreter.xml",
        "moonsharp.2.0.0.nupkg.sha512",
        "moonsharp.nuspec"
      ]
    },
    "NAudio/2.2.1": {
      "sha512": "c0DzwiyyklM0TP39Y7RObwO3QkWecgM6H60ikiEnsV/aEAJPbj5MFCLaD8BSfKuZe0HGuh9GRGWWlJmSxDc9MA==",
      "type": "package",
      "path": "naudio/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net472/NAudio.dll",
        "lib/net472/NAudio.xml",
        "lib/net6.0-windows7.0/NAudio.dll",
        "lib/net6.0-windows7.0/NAudio.xml",
        "lib/net6.0/NAudio.dll",
        "lib/net6.0/NAudio.xml",
        "lib/netcoreapp3.1/NAudio.dll",
        "lib/netcoreapp3.1/NAudio.xml",
        "license.txt",
        "naudio-icon.png",
        "naudio.2.2.1.nupkg.sha512",
        "naudio.nuspec"
      ]
    },
    "NAudio.Asio/2.2.1": {
      "sha512": "hQglyOT5iT3XuGpBP8ZG0+aoqwRfidHjTNehpoWwX0g6KJEgtH2VaqM2nuJ2mheKZa/IBqB4YQTZVvrIapzfOA==",
      "type": "package",
      "path": "naudio.asio/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/NAudio.Asio.dll",
        "lib/netstandard2.0/NAudio.Asio.xml",
        "naudio-icon.png",
        "naudio.asio.2.2.1.nupkg.sha512",
        "naudio.asio.nuspec"
      ]
    },
    "NAudio.Core/2.2.1": {
      "sha512": "GgkdP6K/7FqXFo7uHvoqGZTJvW4z8g2IffhOO4JHaLzKCdDOUEzVKtveoZkCuUX8eV2HAINqi7VFqlFndrnz/g==",
      "type": "package",
      "path": "naudio.core/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/NAudio.Core.dll",
        "lib/netstandard2.0/NAudio.Core.xml",
        "naudio-icon.png",
        "naudio.core.2.2.1.nupkg.sha512",
        "naudio.core.nuspec"
      ]
    },
    "NAudio.Midi/2.2.1": {
      "sha512": "6r23ylGo5aeP02WFXsPquz0T0hFJWyh+7t++tz19tc3Kr38NHm+Z9j+FiAv+xkH8tZqXJqus9Q8p6u7bidIgbw==",
      "type": "package",
      "path": "naudio.midi/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/NAudio.Midi.dll",
        "lib/netstandard2.0/NAudio.Midi.xml",
        "naudio-icon.png",
        "naudio.midi.2.2.1.nupkg.sha512",
        "naudio.midi.nuspec"
      ]
    },
    "NAudio.Wasapi/2.2.1": {
      "sha512": "lFfXoqacZZe0WqNChJgGYI+XV/n/61LzPHT3C1CJp4khoxeo2sziyX5wzNYWeCMNbsWxFvT3b3iXeY1UYjBhZw==",
      "type": "package",
      "path": "naudio.wasapi/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/NAudio.Wasapi.dll",
        "lib/netstandard2.0/NAudio.Wasapi.xml",
        "lib/uap10.0.18362/NAudio.Wasapi.dll",
        "lib/uap10.0.18362/NAudio.Wasapi.pri",
        "lib/uap10.0.18362/NAudio.Wasapi.xml",
        "naudio-icon.png",
        "naudio.wasapi.2.2.1.nupkg.sha512",
        "naudio.wasapi.nuspec"
      ]
    },
    "NAudio.WinMM/2.2.1": {
      "sha512": "xFHRFwH4x6aq3IxRbewvO33ugJRvZFEOfO62i7uQJRUNW2cnu6BeBTHUS0JD5KBucZbHZaYqxQG8dwZ47ezQuQ==",
      "type": "package",
      "path": "naudio.winmm/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/NAudio.WinMM.dll",
        "lib/netstandard2.0/NAudio.WinMM.xml",
        "naudio-icon.png",
        "naudio.winmm.2.2.1.nupkg.sha512",
        "naudio.winmm.nuspec"
      ]
    },
    "SharpHook/5.0.0": {
      "sha512": "m7Gji4beiOSaK9ljAeRivOLk0HRteeW+1ZITvwuWGRrzNdjAKOLRTv4pMF/JaY6ljzb9IocHY0tIgHT8ZZswkg==",
      "type": "package",
      "path": "sharphook/5.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "build/SharpHook.targets",
        "icon.png",
        "lib/net462/SharpHook.dll",
        "lib/net462/SharpHook.xml",
        "lib/net6.0/SharpHook.dll",
        "lib/net6.0/SharpHook.xml",
        "lib/net7.0/SharpHook.dll",
        "lib/net7.0/SharpHook.xml",
        "lib/netstandard2.0/SharpHook.dll",
        "lib/netstandard2.0/SharpHook.xml",
        "runtimes/linux-arm/native/libuiohook.so",
        "runtimes/linux-arm64/native/libuiohook.so",
        "runtimes/linux-x64/native/libuiohook.so",
        "runtimes/maccatalyst-arm64/native/libuiohook.dylib",
        "runtimes/maccatalyst-x64/native/libuiohook.dylib",
        "runtimes/osx-arm64/native/libuiohook.dylib",
        "runtimes/osx-x64/native/libuiohook.dylib",
        "runtimes/win-arm64/native/uiohook.dll",
        "runtimes/win-x64/native/uiohook.dll",
        "runtimes/win-x86/native/uiohook.dll",
        "sharphook.5.0.0.nupkg.sha512",
        "sharphook.nuspec"
      ]
    },
    "SkiaSharp/2.88.9": {
      "sha512": "3MD5VHjXXieSHCleRLuaTXmL2pD0mB7CcOB1x2kA1I4bhptf4e3R27iM93264ZYuAq6mkUyX5XbcxnZvMJYc1Q==",
      "type": "package",
      "path": "skiasharp/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "interactive-extensions/dotnet/SkiaSharp.DotNet.Interactive.dll",
        "lib/monoandroid1.0/SkiaSharp.dll",
        "lib/monoandroid1.0/SkiaSharp.pdb",
        "lib/monoandroid1.0/SkiaSharp.xml",
        "lib/net462/SkiaSharp.dll",
        "lib/net462/SkiaSharp.pdb",
        "lib/net462/SkiaSharp.xml",
        "lib/net6.0-android30.0/SkiaSharp.dll",
        "lib/net6.0-android30.0/SkiaSharp.pdb",
        "lib/net6.0-android30.0/SkiaSharp.xml",
        "lib/net6.0-ios13.6/SkiaSharp.dll",
        "lib/net6.0-ios13.6/SkiaSharp.pdb",
        "lib/net6.0-ios13.6/SkiaSharp.xml",
        "lib/net6.0-maccatalyst13.5/SkiaSharp.dll",
        "lib/net6.0-maccatalyst13.5/SkiaSharp.pdb",
        "lib/net6.0-maccatalyst13.5/SkiaSharp.xml",
        "lib/net6.0-macos10.15/SkiaSharp.dll",
        "lib/net6.0-macos10.15/SkiaSharp.pdb",
        "lib/net6.0-macos10.15/SkiaSharp.xml",
        "lib/net6.0-tizen7.0/SkiaSharp.dll",
        "lib/net6.0-tizen7.0/SkiaSharp.pdb",
        "lib/net6.0-tizen7.0/SkiaSharp.xml",
        "lib/net6.0-tvos13.4/SkiaSharp.dll",
        "lib/net6.0-tvos13.4/SkiaSharp.pdb",
        "lib/net6.0-tvos13.4/SkiaSharp.xml",
        "lib/net6.0/SkiaSharp.dll",
        "lib/net6.0/SkiaSharp.pdb",
        "lib/net6.0/SkiaSharp.xml",
        "lib/netcoreapp3.1/SkiaSharp.dll",
        "lib/netcoreapp3.1/SkiaSharp.pdb",
        "lib/netcoreapp3.1/SkiaSharp.xml",
        "lib/netstandard1.3/SkiaSharp.dll",
        "lib/netstandard1.3/SkiaSharp.pdb",
        "lib/netstandard1.3/SkiaSharp.xml",
        "lib/netstandard2.0/SkiaSharp.dll",
        "lib/netstandard2.0/SkiaSharp.pdb",
        "lib/netstandard2.0/SkiaSharp.xml",
        "lib/netstandard2.1/SkiaSharp.dll",
        "lib/netstandard2.1/SkiaSharp.pdb",
        "lib/netstandard2.1/SkiaSharp.xml",
        "lib/tizen40/SkiaSharp.dll",
        "lib/tizen40/SkiaSharp.pdb",
        "lib/tizen40/SkiaSharp.xml",
        "lib/uap10.0.10240/SkiaSharp.dll",
        "lib/uap10.0.10240/SkiaSharp.pdb",
        "lib/uap10.0.10240/SkiaSharp.xml",
        "lib/uap10.0.16299/SkiaSharp.dll",
        "lib/uap10.0.16299/SkiaSharp.pdb",
        "lib/uap10.0.16299/SkiaSharp.xml",
        "lib/xamarinios1.0/SkiaSharp.dll",
        "lib/xamarinios1.0/SkiaSharp.pdb",
        "lib/xamarinios1.0/SkiaSharp.xml",
        "lib/xamarinmac2.0/SkiaSharp.dll",
        "lib/xamarinmac2.0/SkiaSharp.pdb",
        "lib/xamarinmac2.0/SkiaSharp.xml",
        "lib/xamarintvos1.0/SkiaSharp.dll",
        "lib/xamarintvos1.0/SkiaSharp.pdb",
        "lib/xamarintvos1.0/SkiaSharp.xml",
        "lib/xamarinwatchos1.0/SkiaSharp.dll",
        "lib/xamarinwatchos1.0/SkiaSharp.pdb",
        "lib/xamarinwatchos1.0/SkiaSharp.xml",
        "skiasharp.2.88.9.nupkg.sha512",
        "skiasharp.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.Linux/2.88.9": {
      "sha512": "cWSaJKVPWAaT/WIn9c8T5uT/l4ETwHxNJTkEOtNKjphNo8AW6TF9O32aRkxqw3l8GUdUo66Bu7EiqtFh/XG0Zg==",
      "type": "package",
      "path": "skiasharp.nativeassets.linux/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/net462/SkiaSharp.NativeAssets.Linux.targets",
        "buildTransitive/net462/SkiaSharp.NativeAssets.Linux.targets",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/netcoreapp3.1/_._",
        "lib/netstandard1.3/_._",
        "runtimes/linux-arm/native/libSkiaSharp.so",
        "runtimes/linux-arm64/native/libSkiaSharp.so",
        "runtimes/linux-musl-x64/native/libSkiaSharp.so",
        "runtimes/linux-x64/native/libSkiaSharp.so",
        "skiasharp.nativeassets.linux.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.linux.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.macOS/2.88.9": {
      "sha512": "Nv5spmKc4505Ep7oUoJ5vp3KweFpeNqxpyGDWyeEPTX2uR6S6syXIm3gj75dM0YJz7NPvcix48mR5laqs8dPuA==",
      "type": "package",
      "path": "skiasharp.nativeassets.macos/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/net462/SkiaSharp.NativeAssets.macOS.targets",
        "build/net6.0-macos10.15/SkiaSharp.NativeAssets.macOS.targets",
        "build/xamarinmac2.0/SkiaSharp.NativeAssets.macOS.targets",
        "buildTransitive/net462/SkiaSharp.NativeAssets.macOS.targets",
        "buildTransitive/net6.0-macos10.15/SkiaSharp.NativeAssets.macOS.targets",
        "buildTransitive/xamarinmac2.0/SkiaSharp.NativeAssets.macOS.targets",
        "lib/net462/_._",
        "lib/net6.0-macos10.15/_._",
        "lib/net6.0/_._",
        "lib/netcoreapp3.1/_._",
        "lib/netstandard1.3/_._",
        "lib/xamarinmac2.0/_._",
        "runtimes/osx/native/libSkiaSharp.dylib",
        "skiasharp.nativeassets.macos.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.macos.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {
      "sha512": "kt06RccBHSnAs2wDYdBSfsjIDbY3EpsOVqnlDgKdgvyuRA8ZFDaHRdWNx1VHjGgYzmnFCGiTJBnXFl5BqGwGnA==",
      "type": "package",
      "path": "skiasharp.nativeassets.webassembly/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.props",
        "build/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.targets",
        "build/netstandard1.0/libSkiaSharp.a/2.0.23/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/2.0.6/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/mt,simd/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/simd/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/simd,mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/simd,st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/simd,mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/simd,st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.7/libSkiaSharp.a",
        "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.props",
        "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.targets",
        "lib/netstandard1.0/_._",
        "skiasharp.nativeassets.webassembly.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.webassembly.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.Win32/2.88.9": {
      "sha512": "wb2kYgU7iy84nQLYZwMeJXixvK++GoIuECjU4ECaUKNuflyRlJKyiRhN1MAHswvlvzuvkrjRWlK0Za6+kYQK7w==",
      "type": "package",
      "path": "skiasharp.nativeassets.win32/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/net462/SkiaSharp.NativeAssets.Win32.targets",
        "buildTransitive/net462/SkiaSharp.NativeAssets.Win32.targets",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/netcoreapp3.1/_._",
        "lib/netstandard1.3/_._",
        "runtimes/win-arm64/native/libSkiaSharp.dll",
        "runtimes/win-x64/native/libSkiaSharp.dll",
        "runtimes/win-x86/native/libSkiaSharp.dll",
        "skiasharp.nativeassets.win32.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.win32.nuspec"
      ]
    },
    "System.CodeDom/9.0.0": {
      "sha512": "oTE5IfuMoET8yaZP/vdvy9xO47guAv/rOhe4DODuFBN3ySprcQOlXqO3j+e/H/YpKKR5sglrxRaZ2HYOhNJrqA==",
      "type": "package",
      "path": "system.codedom/9.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.CodeDom.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/System.CodeDom.targets",
        "lib/net462/System.CodeDom.dll",
        "lib/net462/System.CodeDom.xml",
        "lib/net8.0/System.CodeDom.dll",
        "lib/net8.0/System.CodeDom.xml",
        "lib/net9.0/System.CodeDom.dll",
        "lib/net9.0/System.CodeDom.xml",
        "lib/netstandard2.0/System.CodeDom.dll",
        "lib/netstandard2.0/System.CodeDom.xml",
        "system.codedom.9.0.0.nupkg.sha512",
        "system.codedom.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Collections.Immutable/8.0.0": {
      "sha512": "AurL6Y5BA1WotzlEvVaIDpqzpIPvYnnldxru8oXJU2yFxFUy3+pNXjXd1ymO+RA0rq0+590Q8gaz2l3Sr7fmqg==",
      "type": "package",
      "path": "system.collections.immutable/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.Collections.Immutable.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/System.Collections.Immutable.targets",
        "lib/net462/System.Collections.Immutable.dll",
        "lib/net462/System.Collections.Immutable.xml",
        "lib/net6.0/System.Collections.Immutable.dll",
        "lib/net6.0/System.Collections.Immutable.xml",
        "lib/net7.0/System.Collections.Immutable.dll",
        "lib/net7.0/System.Collections.Immutable.xml",
        "lib/net8.0/System.Collections.Immutable.dll",
        "lib/net8.0/System.Collections.Immutable.xml",
        "lib/netstandard2.0/System.Collections.Immutable.dll",
        "lib/netstandard2.0/System.Collections.Immutable.xml",
        "system.collections.immutable.8.0.0.nupkg.sha512",
        "system.collections.immutable.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.CommandLine/2.0.0-beta4.22272.1": {
      "sha512": "1uqED/q2H0kKoLJ4+hI2iPSBSEdTuhfCYADeJrAqERmiGQ2NNacYKRNEQ+gFbU4glgVyK8rxI+ZOe1onEtr/Pg==",
      "type": "package",
      "path": "system.commandline/2.0.0-beta4.22272.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net6.0/System.CommandLine.dll",
        "lib/net6.0/System.CommandLine.pdb",
        "lib/net6.0/System.CommandLine.xml",
        "lib/net6.0/cs/System.CommandLine.resources.dll",
        "lib/net6.0/de/System.CommandLine.resources.dll",
        "lib/net6.0/es/System.CommandLine.resources.dll",
        "lib/net6.0/fr/System.CommandLine.resources.dll",
        "lib/net6.0/it/System.CommandLine.resources.dll",
        "lib/net6.0/ja/System.CommandLine.resources.dll",
        "lib/net6.0/ko/System.CommandLine.resources.dll",
        "lib/net6.0/pl/System.CommandLine.resources.dll",
        "lib/net6.0/pt-BR/System.CommandLine.resources.dll",
        "lib/net6.0/ru/System.CommandLine.resources.dll",
        "lib/net6.0/tr/System.CommandLine.resources.dll",
        "lib/net6.0/zh-Hans/System.CommandLine.resources.dll",
        "lib/net6.0/zh-Hant/System.CommandLine.resources.dll",
        "lib/netstandard2.0/System.CommandLine.dll",
        "lib/netstandard2.0/System.CommandLine.pdb",
        "lib/netstandard2.0/System.CommandLine.xml",
        "lib/netstandard2.0/cs/System.CommandLine.resources.dll",
        "lib/netstandard2.0/de/System.CommandLine.resources.dll",
        "lib/netstandard2.0/es/System.CommandLine.resources.dll",
        "lib/netstandard2.0/fr/System.CommandLine.resources.dll",
        "lib/netstandard2.0/it/System.CommandLine.resources.dll",
        "lib/netstandard2.0/ja/System.CommandLine.resources.dll",
        "lib/netstandard2.0/ko/System.CommandLine.resources.dll",
        "lib/netstandard2.0/pl/System.CommandLine.resources.dll",
        "lib/netstandard2.0/pt-BR/System.CommandLine.resources.dll",
        "lib/netstandard2.0/ru/System.CommandLine.resources.dll",
        "lib/netstandard2.0/tr/System.CommandLine.resources.dll",
        "lib/netstandard2.0/zh-Hans/System.CommandLine.resources.dll",
        "lib/netstandard2.0/zh-Hant/System.CommandLine.resources.dll",
        "system.commandline.2.0.0-beta4.22272.1.nupkg.sha512",
        "system.commandline.nuspec"
      ]
    },
    "System.Drawing.Common/8.0.0": {
      "sha512": "JkbHJjtI/dWc5dfmEdJlbe3VwgZqCkZRtfuWFh5GOv0f+gGCfBtzMpIVkmdkj2AObO9y+oiOi81UGwH3aBYuqA==",
      "type": "package",
      "path": "system.drawing.common/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.Drawing.Common.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/System.Drawing.Common.targets",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net462/System.Drawing.Common.dll",
        "lib/net462/System.Drawing.Common.pdb",
        "lib/net462/System.Drawing.Common.xml",
        "lib/net6.0/System.Drawing.Common.dll",
        "lib/net6.0/System.Drawing.Common.pdb",
        "lib/net6.0/System.Drawing.Common.xml",
        "lib/net7.0/System.Drawing.Common.dll",
        "lib/net7.0/System.Drawing.Common.pdb",
        "lib/net7.0/System.Drawing.Common.xml",
        "lib/net8.0/System.Drawing.Common.dll",
        "lib/net8.0/System.Drawing.Common.pdb",
        "lib/net8.0/System.Drawing.Common.xml",
        "lib/netstandard2.0/System.Drawing.Common.dll",
        "lib/netstandard2.0/System.Drawing.Common.pdb",
        "lib/netstandard2.0/System.Drawing.Common.xml",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "system.drawing.common.8.0.0.nupkg.sha512",
        "system.drawing.common.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.IO.Pipelines/8.0.0": {
      "sha512": "FHNOatmUq0sqJOkTx+UF/9YK1f180cnW5FVqnQMvYUN0elp6wFzbtPSiqbo1/ru8ICp43JM1i7kKkk6GsNGHlA==",
      "type": "package",
      "path": "system.io.pipelines/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.IO.Pipelines.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/System.IO.Pipelines.targets",
        "lib/net462/System.IO.Pipelines.dll",
        "lib/net462/System.IO.Pipelines.xml",
        "lib/net6.0/System.IO.Pipelines.dll",
        "lib/net6.0/System.IO.Pipelines.xml",
        "lib/net7.0/System.IO.Pipelines.dll",
        "lib/net7.0/System.IO.Pipelines.xml",
        "lib/net8.0/System.IO.Pipelines.dll",
        "lib/net8.0/System.IO.Pipelines.xml",
        "lib/netstandard2.0/System.IO.Pipelines.dll",
        "lib/netstandard2.0/System.IO.Pipelines.xml",
        "system.io.pipelines.8.0.0.nupkg.sha512",
        "system.io.pipelines.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Management/9.0.0": {
      "sha512": "bVh4xAMI5grY5GZoklKcMBLirhC8Lqzp63Ft3zXJacwGAlLyFdF4k0qz4pnKIlO6HyL2Z4zqmHm9UkzEo6FFsA==",
      "type": "package",
      "path": "system.management/9.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/System.Management.targets",
        "lib/net462/_._",
        "lib/net8.0/System.Management.dll",
        "lib/net8.0/System.Management.xml",
        "lib/net9.0/System.Management.dll",
        "lib/net9.0/System.Management.xml",
        "lib/netstandard2.0/System.Management.dll",
        "lib/netstandard2.0/System.Management.xml",
        "runtimes/win/lib/net8.0/System.Management.dll",
        "runtimes/win/lib/net8.0/System.Management.xml",
        "runtimes/win/lib/net9.0/System.Management.dll",
        "runtimes/win/lib/net9.0/System.Management.xml",
        "system.management.9.0.0.nupkg.sha512",
        "system.management.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Reflection.Metadata/8.0.0": {
      "sha512": "ptvgrFh7PvWI8bcVqG5rsA/weWM09EnthFHR5SCnS6IN+P4mj6rE1lBDC4U8HL9/57htKAqy4KQ3bBj84cfYyQ==",
      "type": "package",
      "path": "system.reflection.metadata/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.Reflection.Metadata.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/System.Reflection.Metadata.targets",
        "lib/net462/System.Reflection.Metadata.dll",
        "lib/net462/System.Reflection.Metadata.xml",
        "lib/net6.0/System.Reflection.Metadata.dll",
        "lib/net6.0/System.Reflection.Metadata.xml",
        "lib/net7.0/System.Reflection.Metadata.dll",
        "lib/net7.0/System.Reflection.Metadata.xml",
        "lib/net8.0/System.Reflection.Metadata.dll",
        "lib/net8.0/System.Reflection.Metadata.xml",
        "lib/netstandard2.0/System.Reflection.Metadata.dll",
        "lib/netstandard2.0/System.Reflection.Metadata.xml",
        "system.reflection.metadata.8.0.0.nupkg.sha512",
        "system.reflection.metadata.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "sha512": "/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "type": "package",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Runtime.CompilerServices.Unsafe.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/net461/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/net6.0/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/netcoreapp3.1/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/netcoreapp3.1/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.xml",
        "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512",
        "system.runtime.compilerservices.unsafe.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Security.AccessControl/4.7.0": {
      "sha512": "JECvTt5aFF3WT3gHpfofL2MNNP6v84sxtXxpqhLBCcDRzqsPBmHhQ6shv4DwwN2tRlzsUxtb3G9M3763rbXKDg==",
      "type": "package",
      "path": "system.security.accesscontrol/4.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net46/System.Security.AccessControl.dll",
        "lib/net461/System.Security.AccessControl.dll",
        "lib/net461/System.Security.AccessControl.xml",
        "lib/netstandard1.3/System.Security.AccessControl.dll",
        "lib/netstandard2.0/System.Security.AccessControl.dll",
        "lib/netstandard2.0/System.Security.AccessControl.xml",
        "lib/uap10.0.16299/_._",
        "ref/net46/System.Security.AccessControl.dll",
        "ref/net461/System.Security.AccessControl.dll",
        "ref/net461/System.Security.AccessControl.xml",
        "ref/netstandard1.3/System.Security.AccessControl.dll",
        "ref/netstandard1.3/System.Security.AccessControl.xml",
        "ref/netstandard1.3/de/System.Security.AccessControl.xml",
        "ref/netstandard1.3/es/System.Security.AccessControl.xml",
        "ref/netstandard1.3/fr/System.Security.AccessControl.xml",
        "ref/netstandard1.3/it/System.Security.AccessControl.xml",
        "ref/netstandard1.3/ja/System.Security.AccessControl.xml",
        "ref/netstandard1.3/ko/System.Security.AccessControl.xml",
        "ref/netstandard1.3/ru/System.Security.AccessControl.xml",
        "ref/netstandard1.3/zh-hans/System.Security.AccessControl.xml",
        "ref/netstandard1.3/zh-hant/System.Security.AccessControl.xml",
        "ref/netstandard2.0/System.Security.AccessControl.dll",
        "ref/netstandard2.0/System.Security.AccessControl.xml",
        "ref/uap10.0.16299/_._",
        "runtimes/win/lib/net46/System.Security.AccessControl.dll",
        "runtimes/win/lib/net461/System.Security.AccessControl.dll",
        "runtimes/win/lib/net461/System.Security.AccessControl.xml",
        "runtimes/win/lib/netcoreapp2.0/System.Security.AccessControl.dll",
        "runtimes/win/lib/netcoreapp2.0/System.Security.AccessControl.xml",
        "runtimes/win/lib/netstandard1.3/System.Security.AccessControl.dll",
        "runtimes/win/lib/uap10.0.16299/_._",
        "system.security.accesscontrol.4.7.0.nupkg.sha512",
        "system.security.accesscontrol.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.Security.Principal.Windows/4.7.0": {
      "sha512": "ojD0PX0XhneCsUbAZVKdb7h/70vyYMDYs85lwEI+LngEONe/17A0cFaRFqZU+sOEidcVswYWikYOQ9PPfjlbtQ==",
      "type": "package",
      "path": "system.security.principal.windows/4.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net46/System.Security.Principal.Windows.dll",
        "lib/net461/System.Security.Principal.Windows.dll",
        "lib/net461/System.Security.Principal.Windows.xml",
        "lib/netstandard1.3/System.Security.Principal.Windows.dll",
        "lib/netstandard2.0/System.Security.Principal.Windows.dll",
        "lib/netstandard2.0/System.Security.Principal.Windows.xml",
        "lib/uap10.0.16299/_._",
        "ref/net46/System.Security.Principal.Windows.dll",
        "ref/net461/System.Security.Principal.Windows.dll",
        "ref/net461/System.Security.Principal.Windows.xml",
        "ref/netcoreapp3.0/System.Security.Principal.Windows.dll",
        "ref/netcoreapp3.0/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/System.Security.Principal.Windows.dll",
        "ref/netstandard1.3/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/de/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/es/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/fr/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/it/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/ja/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/ko/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/ru/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/zh-hans/System.Security.Principal.Windows.xml",
        "ref/netstandard1.3/zh-hant/System.Security.Principal.Windows.xml",
        "ref/netstandard2.0/System.Security.Principal.Windows.dll",
        "ref/netstandard2.0/System.Security.Principal.Windows.xml",
        "ref/uap10.0.16299/_._",
        "runtimes/unix/lib/netcoreapp2.0/System.Security.Principal.Windows.dll",
        "runtimes/unix/lib/netcoreapp2.0/System.Security.Principal.Windows.xml",
        "runtimes/unix/lib/netcoreapp2.1/System.Security.Principal.Windows.dll",
        "runtimes/unix/lib/netcoreapp2.1/System.Security.Principal.Windows.xml",
        "runtimes/win/lib/net46/System.Security.Principal.Windows.dll",
        "runtimes/win/lib/net461/System.Security.Principal.Windows.dll",
        "runtimes/win/lib/net461/System.Security.Principal.Windows.xml",
        "runtimes/win/lib/netcoreapp2.0/System.Security.Principal.Windows.dll",
        "runtimes/win/lib/netcoreapp2.0/System.Security.Principal.Windows.xml",
        "runtimes/win/lib/netcoreapp2.1/System.Security.Principal.Windows.dll",
        "runtimes/win/lib/netcoreapp2.1/System.Security.Principal.Windows.xml",
        "runtimes/win/lib/netstandard1.3/System.Security.Principal.Windows.dll",
        "runtimes/win/lib/uap10.0.16299/_._",
        "system.security.principal.windows.4.7.0.nupkg.sha512",
        "system.security.principal.windows.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "Tmds.DBus.Protocol/0.21.2": {
      "sha512": "ScSMrUrrw8px4kK1Glh0fZv/HQUlg1078bNXNPfRPKQ3WbRzV9HpsydYEOgSoMK5LWICMf2bMwIFH0pGjxjcMA==",
      "type": "package",
      "path": "tmds.dbus.protocol/0.21.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net6.0/Tmds.DBus.Protocol.dll",
        "lib/net8.0/Tmds.DBus.Protocol.dll",
        "lib/netstandard2.0/Tmds.DBus.Protocol.dll",
        "lib/netstandard2.1/Tmds.DBus.Protocol.dll",
        "tmds.dbus.protocol.0.21.2.nupkg.sha512",
        "tmds.dbus.protocol.nuspec"
      ]
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "Avalonia >= 11.3.1",
      "Avalonia.AvaloniaEdit >= 11.3.0",
      "Avalonia.Controls.DataGrid >= 11.3.1",
      "Avalonia.Desktop >= 11.3.1",
      "Avalonia.Diagnostics >= 11.3.1",
      "Avalonia.Fonts.Inter >= 11.3.1",
      "Avalonia.Markup.Xaml.Loader >= 11.3.1",
      "Avalonia.Themes.Fluent >= 11.3.1",
      "CliWrap >= 3.7.0",
      "CommunityToolkit.Mvvm >= 8.2.0",
      "Microsoft.CodeAnalysis.CSharp >= 4.9.2",
      "MoonSharp >= 2.0.0",
      "NAudio >= 2.2.1",
      "SharpHook >= 5.0.0",
      "System.CommandLine >= 2.0.0-beta4.22272.1",
      "System.Drawing.Common >= 8.0.0"
    ]
  },
  "packageFolders": {
    "C:\\Users\\User\\.nuget\\packages\\": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "D:\\GitHub\\NewIdeas\\Cycloside\\Cycloside.csproj",
      "projectName": "Cycloside",
      "projectPath": "D:\\GitHub\\NewIdeas\\Cycloside\\Cycloside.csproj",
      "packagesPath": "C:\\Users\\User\\.nuget\\packages\\",
      "outputPath": "D:\\GitHub\\NewIdeas\\Cycloside\\obj\\",
      "projectStyle": "PackageReference",
      "configFilePaths": [
        "C:\\Users\\User\\AppData\\Roaming\\NuGet\\NuGet.Config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      }
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "Avalonia": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.AvaloniaEdit": {
            "target": "Package",
            "version": "[11.3.0, )"
          },
          "Avalonia.Controls.DataGrid": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Desktop": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Diagnostics": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Fonts.Inter": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Markup.Xaml.Loader": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Themes.Fluent": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "CliWrap": {
            "target": "Package",
            "version": "[3.7.0, )"
          },
          "CommunityToolkit.Mvvm": {
            "target": "Package",
            "version": "[8.2.0, )"
          },
          "Microsoft.CodeAnalysis.CSharp": {
            "target": "Package",
            "version": "[4.9.2, )"
          },
          "MoonSharp": {
            "target": "Package",
            "version": "[2.0.0, )"
          },
          "NAudio": {
            "target": "Package",
            "version": "[2.2.1, )"
          },
          "SharpHook": {
            "target": "Package",
            "version": "[5.0.0, )"
          },
          "System.CommandLine": {
            "target": "Package",
            "version": "[2.0.0-beta4.22272.1, )"
          },
          "System.Drawing.Common": {
            "target": "Package",
            "version": "[8.0.0, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\8.0.411/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\ClipboardManagerWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
        xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
        xmlns:local="clr-namespace:Cycloside.Plugins.BuiltIn"
        x:Class="Cycloside.Plugins.BuiltIn.ClipboardManagerWindow"
        x:DataType="local:ClipboardManagerPlugin"
        Title="Clipboard History"
        Width="300"
        Height="450">
  
  <ListBox ItemsSource="{Binding History}"
           SelectionMode="Single">

    <i:Interaction.Behaviors>
      <i:EventTriggerBehavior EventName="DoubleTapped">
        <ia:InvokeCommandAction Command="{Binding EntrySelectedCommand}"
                                  CommandParameter="{Binding $parent[ListBox].SelectedItem}"/>
      </i:EventTriggerBehavior>
    </i:Interaction.Behaviors>
    
  </ListBox>
  
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\ClipboardManagerWindow.axaml.cs ---

using Avalonia.Controls;

namespace Cycloside.Plugins.BuiltIn
{
    public partial class ClipboardManagerWindow : Window
    {
        public ClipboardManagerWindow()
        {
            // This line is essential to load the UI defined in the .axaml file.
            InitializeComponent();
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\DateTimeOverlayWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Cycloside.Plugins.BuiltIn"
        mc:Ignorable="d" d:DesignWidth="220" d:DesignHeight="50"
        x:Class="Cycloside.Plugins.BuiltIn.DateTimeOverlayWindow"
        x:DataType="local:DateTimeOverlayPlugin"
        
        Title="Date/Time Overlay"
        Width="220" Height="50"
        CanResize="False"
        SystemDecorations="None"
        Topmost="True"
        Background="Transparent"
        TransparencyLevelHint="Transparent"
        
        PointerPressed="Window_PointerPressed">

  <Border Background="#C0000000" CornerRadius="5">
    <TextBlock Text="{Binding TimeText}"
               FontSize="16"
               FontWeight="Bold"
               Foreground="White"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"/>
  </Border>
  
  <Window.ContextMenu>
    <ContextMenu>
      <MenuItem Header="Cycle Format" Command="{Binding CycleFormatCommand}"/>
      <MenuItem Header="Lock Position" IsCheckable="True" IsChecked="{Binding IsLocked, Mode=TwoWay}"/>
      <Separator/>
      <MenuItem Header="Close" Command="{Binding CloseCommand}"/>
    </ContextMenu>
  </Window.ContextMenu>
  
</Window>


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\DateTimeOverlayWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class DateTimeOverlayWindow : Window
{
    public DateTimeOverlayWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\DiskUsageWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.DiskUsageWindow"
        Title="Disk Usage Analyzer"
        Width="600" Height="500">
    <DockPanel>
        <Button x:Name="SelectFolderButton" DockPanel.Dock="Top" Margin="5" HorizontalAlignment="Center"
                Content="Select Folder to Analyze"/>
        <TextBlock x:Name="StatusText" DockPanel.Dock="Top" Margin="5"/>
        <TreeView x:Name="Tree"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\DiskUsageWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class DiskUsageWindow : Window
{
    public DiskUsageWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\EnvironmentEditorWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.EnvironmentEditorWindow"
        Title="Environment Variables Editor"
        Width="700" Height="500">
    <DockPanel>
        <StackPanel Orientation="Horizontal" Spacing="5" Margin="5" DockPanel.Dock="Top">
            <Label Content="Scope:"/>
            <ComboBox x:Name="ScopeSelector" Width="150"/>
            <Button x:Name="AddButton" Content="Add"/>
            <Button x:Name="RemoveButton" Content="Remove"/>
            <Button x:Name="SaveButton" Content="Save Changes"/>
        </StackPanel>
        <DataGrid x:Name="Grid"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\EnvironmentEditorWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class EnvironmentEditorWindow : Window
{
    public EnvironmentEditorWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\FileWatcherWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.FileWatcherWindow"
        Title="File Watcher"
        Width="550" Height="450">
    <DockPanel>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" DockPanel.Dock="Top">
            <Button x:Name="SelectFolderButton" Content="Select Folder to Watch" Margin="5"/>
            <Button x:Name="ClearLogButton" Content="Clear Log" Margin="5,0,5,5"/>
        </StackPanel>
        <TextBox x:Name="LogBox" AcceptsReturn="True" IsReadOnly="True" Margin="5"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\FileWatcherWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class FileWatcherWindow : Window
{
    public FileWatcherWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\LogViewerWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.LogViewerWindow"
        Title="Log Viewer"
        Width="800" Height="600">
    <DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="5" x:Name="TopPanel">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Left" x:Name="ButtonPanel" />
            <TextBox x:Name="FilterBox" Width="200" Margin="5,0" />
        </DockPanel>
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" x:Name="OptionsPanel" Margin="5" />
        <TextBox x:Name="LogBox" AcceptsReturn="True" FontFamily="Cascadia Code,Consolas,Menlo,monospace" Margin="5" />
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\LogViewerWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class LogViewerWindow : Window
{
    public LogViewerWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\MacroWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.MacroWindow"
        Title="Macro Engine"
        Width="400" Height="350">
    <StackPanel Margin="5" x:Name="MainPanel">
        <ListBox x:Name="MacroList" Height="150"/>
        <TextBox x:Name="NameBox" Watermark="Macro Name"/>
        <StackPanel Orientation="Horizontal" Spacing="5">
            <TextBlock Text="Repeat"/>
            <TextBox x:Name="RepeatBox" Width="40" Text="1"/>
        </StackPanel>
        <StackPanel Orientation="Horizontal" Spacing="5">
            <Button x:Name="RecordButton" Content="Record"/>
            <Button x:Name="StopButton" Content="Stop"/>
            <Button x:Name="PlayButton" Content="Play"/>
            <Button x:Name="SaveButton" Content="Save"/>
            <Button x:Name="ReloadButton" Content="Reload"/>
            <Button x:Name="DeleteButton" Content="Delete"/>
        </StackPanel>
        <TextBlock x:Name="StatusText" Margin="5" Text="Ready"/>
    </StackPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\MacroWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class MacroWindow : Window
{
    public MacroWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\ProcessMonitorWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Cycloside.Plugins.BuiltIn"
        x:Class="Cycloside.Plugins.BuiltIn.ProcessMonitorWindow"
        x:DataType="local:ProcessMonitorPlugin"
        Title="Process Monitor"
        Width="450" Height="600">

  <DataGrid ItemsSource="{Binding Processes}"
            IsReadOnly="True"
            GridLinesVisibility="Horizontal"
            CanUserResizeColumns="True"
            CanUserSortColumns="True">
    <DataGrid.Columns>
      <DataGridTextColumn Header="Process Name"
                          Binding="{Binding Name}"
                          Width="*" />
      
      <DataGridTextColumn Header="Memory (MB)"
                          Binding="{Binding MemoryUsageMb, StringFormat='{}{0} MB'}"
                          Width="Auto" />
                          
    </DataGrid.Columns>
  </DataGrid>
  
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\ProcessMonitorWindow.axaml.cs ---

using Avalonia.Controls;

namespace Cycloside.Plugins.BuiltIn
{
    public partial class ProcessMonitorWindow : Window
    {
        public ProcessMonitorWindow()
        {
            InitializeComponent();
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\TaskSchedulerWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.TaskSchedulerWindow"
        Title="Task Scheduler"
        Width="400" Height="150">
    <StackPanel Margin="5">
        <TextBox x:Name="CmdBox" Watermark="Command"/>
        <TextBox x:Name="TimeBox" Watermark="Time/Cron"/>
        <Button x:Name="AddButton" Content="Add"/>
    </StackPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\TaskSchedulerWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class TaskSchedulerWindow : Window
{
    public TaskSchedulerWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\TextEditorWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.TextEditorWindow"
        Title="Cycloside Editor - Untitled"
        Width="700" Height="550">
    <DockPanel>
        <StackPanel x:Name="ButtonPanel" Orientation="Horizontal" Spacing="5" Margin="5" DockPanel.Dock="Top" />
        <Border x:Name="StatusBar" DockPanel.Dock="Bottom" Height="24" Background="CornflowerBlue">
            <TextBlock x:Name="StatusBlock" Margin="5" VerticalAlignment="Center" />
        </Border>
        <TextBox x:Name="EditorBox" AcceptsReturn="True" AcceptsTab="True" FontFamily="monospace" Margin="5,0,5,5"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\TextEditorWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class TextEditorWindow : Window
{
    public TextEditorWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\WallpaperWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Plugins.BuiltIn.WallpaperWindow"
        Title="Wallpaper Changer"
        Width="250" Height="120">
    <DockPanel>
        <TextBlock x:Name="StatusBlock" DockPanel.Dock="Bottom" Margin="5" HorizontalAlignment="Center"/>
        <Button x:Name="SelectButton" Content="Select Wallpaper Image" HorizontalAlignment="Center"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\Views\WallpaperWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace Cycloside.Plugins.BuiltIn;

public partial class WallpaperWindow : Window
{
    public WallpaperWindow()
    {
        AvaloniaXamlLoader.Load(this);
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\ClipboardManagerPlugin.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Threading;
using Cycloside.Services;

namespace Cycloside.Plugins.BuiltIn
{
    /// <summary>
    /// Acts as the ViewModel for the Clipboard Manager window.
    /// It polls the clipboard and manages the history collection for the UI to display.
    /// </summary>
    public partial class ClipboardManagerPlugin : ObservableObject, IPlugin, IDisposable
    {
        private const int MaxHistoryCount = 25;

        private ClipboardManagerWindow? _window;
        private DispatcherTimer? _timer;
        private string? _lastSeenText;

        // --- IPlugin Properties ---
        public string Name => "Clipboard Manager";
        public string Description => "Stores and manages clipboard history.";
        public Version Version => new(0, 2, 0);
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        // --- Observable Properties for UI Binding ---

        /// <summary>
        /// A collection of clipboard history items. The View will bind its ListBox directly to this.
        /// Because it's an ObservableCollection, the UI will update automatically.
        /// </summary>
        public ObservableCollection<string> History { get; } = new();

        // --- Plugin Lifecycle & Disposal ---

        public void Start()
        {
            // The ViewModel's job is to create its View and set the DataContext.
            _window = new ClipboardManagerWindow { DataContext = this };
            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(ClipboardManagerPlugin));
            _window.Show();

            _timer = new DispatcherTimer(TimeSpan.FromSeconds(1), DispatcherPriority.Background, CheckClipboard);
            _timer.Start();
        }

        public void Stop()
        {
            _timer?.Stop();
            _window?.Close();
        }

        public void Dispose() => Stop();

        // --- Commands for UI Binding ---

        /// <summary>
        /// This command is executed when an item in the ListBox is double-tapped.
        /// The 'selectedItem' is passed from the View via CommandParameter.
        /// </summary>
        [RelayCommand]
        private async Task EntrySelected(string? selectedText)
        {
            if (string.IsNullOrEmpty(selectedText)) return;

            // Get the application's clipboard in a robust way.
            var clipboard = Application.Current?.GetMainTopLevel()?.Clipboard;
            if (clipboard != null)
            {
                await clipboard.SetTextAsync(selectedText);
            }
        }

        // --- Private Logic ---

        /// <summary>
        /// Polls the system clipboard for changes.
        /// </summary>
        private async void CheckClipboard(object? sender, EventArgs e)
        {
            var clipboard = Application.Current?.GetMainTopLevel()?.Clipboard;
            if (clipboard == null) return;

            var currentText = await clipboard.GetTextAsync();
            if (string.IsNullOrEmpty(currentText) || currentText == _lastSeenText)
            {
                return;
            }

            // A new, unique item is found.
            _lastSeenText = currentText;

            // This logic ensures no duplicates and adds the new item to the top.
            History.Remove(currentText);
            History.Insert(0, currentText);

            if (History.Count > MaxHistoryCount)
            {
                History.RemoveAt(History.Count - 1);
            }
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\DateTimeOverlayPlugin.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Cycloside.Services;
using System;
using System.Collections.Generic;
using Avalonia.Threading;

namespace Cycloside.Plugins.BuiltIn
{
    public partial class DateTimeOverlayPlugin : ObservableObject, IPlugin
    {
        // --- Fields ---
        private DateTimeOverlayWindow? _window;
        private DispatcherTimer? _timer;
        
        // --- Configuration for new features ---
        private readonly List<string> _formats = new() { "G", "g", "yyyy-MM-dd HH:mm:ss", "T", "t" };
        private int _currentFormatIndex = 0;

        // --- IPlugin Properties ---
        public string Name => "Date/Time Overlay";
        public string Description => "A movable overlay that displays the current date and time.";
        public Version Version => new(1, 1, 0); // Incremented for new features
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        // --- Observable Properties for UI Binding ---
        [ObservableProperty]
        private string _timeText = string.Empty;

        [ObservableProperty]
        private bool _isLocked = false;

        // --- Plugin Lifecycle ---
        public void Start()
        {
            _window = new DateTimeOverlayWindow { DataContext = this };
            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(DateTimeOverlayPlugin));
            
            // Set up the timer
            _timer = new DispatcherTimer(TimeSpan.FromSeconds(1), DispatcherPriority.Background, (_,_) => UpdateTime());
            
            UpdateTime(); // Update immediately on start
            _timer.Start();
            _window.Show();
        }

        public void Stop()
        {
            _timer?.Stop();
            _window?.Close();
            _window = null;
        }

        // --- Commands for the Context Menu ---
        [RelayCommand]
        private void CycleFormat()
        {
            _currentFormatIndex = (_currentFormatIndex + 1) % _formats.Count;
            UpdateTime(); // Update text with new format
        }

        [RelayCommand]
        private void Close() => Stop();

        // --- Private Helper Methods ---
        private void UpdateTime()
        {
            var now = DateTime.Now;
            TimeText = now.ToString(_formats[_currentFormatIndex]);
            PluginBus.Publish("clock:tick", now);
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\DateTimeOverlayWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Cycloside.Plugins.BuiltIn"
        mc:Ignorable="d" d:DesignWidth="220" d:DesignHeight="50"
        x:Class="Cycloside.Plugins.BuiltIn.DateTimeOverlayWindow"
        x:DataType="local:DateTimeOverlayPlugin"
        
        Title="Date/Time Overlay"
        Width="220" Height="50"
        CanResize="False"
        SystemDecorations="None"
        Topmost="True"
        Background="Transparent"
        TransparencyLevelHint="Transparent"
        
        PointerPressed="Window_PointerPressed">

  <Border Background="#C0000000" CornerRadius="5">
    <TextBlock Text="{Binding TimeText}"
               FontSize="16"
               FontWeight="Bold"
               Foreground="White"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"/>
  </Border>
  
  <Window.ContextMenu>
    <ContextMenu>
      <MenuItem Header="Cycle Format" Command="{Binding CycleFormatCommand}"/>
      <MenuItem Header="Lock Position" IsCheckable="True" IsChecked="{Binding IsLocked, Mode=TwoWay}"/>
      <Separator/>
      <MenuItem Header="Close" Command="{Binding CloseCommand}"/>
    </ContextMenu>
  </Window.ContextMenu>
  
</Window>



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\DateTimeOverlayWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Input;

namespace Cycloside.Plugins.BuiltIn
{
    public partial class DateTimeOverlayWindow : Window
    {
        public DateTimeOverlayWindow()
        {
            InitializeComponent();
        }

        // This event handler makes our borderless window draggable.
        private void Window_PointerPressed(object? sender, PointerPressedEventArgs e)
        {
            // We only want to drag with the left mouse button.
            if (e.GetCurrentPoint(this).Properties.IsLeftButtonPressed)
            {
                // Check if the DataContext is our ViewModel and if it's not locked.
                if (DataContext is DateTimeOverlayPlugin vm && !vm.IsLocked)
                {
                    BeginMoveDrag(e);
                }
            }
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\DiskUsagePlugin.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Cycloside.Services;

namespace Cycloside.Plugins.BuiltIn
{
    public class DiskUsagePlugin : IPlugin
    {
        private DiskUsageWindow? _window;
        private TreeView? _tree;
        private Button? _selectFolderButton;
        private TextBlock? _statusText;

        public string Name => "Disk Usage";
        public string Description => "Visualize disk usage";
        public Version Version => new Version(0, 2, 0); // Incremented version for improvements
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        public void Start()
        {
            // Load window from XAML and grab named controls
            _window = new DiskUsageWindow();
            _tree = _window.FindControl<TreeView>("Tree");
            _selectFolderButton = _window.FindControl<Button>("SelectFolderButton");
            _statusText = _window.FindControl<TextBlock>("StatusText");

            if (_selectFolderButton != null)
                _selectFolderButton.Click += async (_, _) => await SelectAndLoadDirectoryAsync();

            // Apply theming and effects (assuming these are valid managers in your project)
            
            ThemeManager.ApplyFromSettings(_window, "Plugins");
            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(DiskUsagePlugin));

            _window.Show();
        }

        /// <summary>
        /// Asynchronously handles the folder selection and initiates the background loading process.
        /// </summary>
        private async Task SelectAndLoadDirectoryAsync()
        {
            if (_window == null || _selectFolderButton == null || _tree == null || _statusText == null) return;

            // Use the modern, recommended StorageProvider API to open a folder picker.
            var result = await _window.StorageProvider.OpenFolderPickerAsync(new FolderPickerOpenOptions
            {
                Title = "Select a folder to analyze",
                AllowMultiple = false
            });

            var selectedFolder = result.FirstOrDefault();
            var path = selectedFolder?.TryGetLocalPath();

            if (!string.IsNullOrWhiteSpace(path))
            {
                // Disable button and show a loading message to provide user feedback.
                _selectFolderButton.IsEnabled = false;
                _tree.ItemsSource = null; // Clear previous results
                _statusText.Text = $"Analyzing '{path}'... (This may take a while)";

                try
                {
                    // Run the heavy directory scanning on a background thread to keep the UI responsive.
                    var rootNode = await Task.Run(() => BuildNodeRecursive(new DirectoryInfo(path)));

                    // Once done, update the UI on the UI thread.
                    await Dispatcher.UIThread.InvokeAsync(() =>
                    {
                        _tree.ItemsSource = new[] { rootNode };
                        _statusText.Text = $"Analysis complete for '{path}'.";
                    });
                }
                catch (Exception ex)
                {
                    // Handle any unexpected errors during the process.
                    await Dispatcher.UIThread.InvokeAsync(() =>
                    {
                        _statusText.Text = $"Error: {ex.Message}";
                    });
                }
                finally
                {
                    // Always re-enable the button, even if an error occurred.
                    await Dispatcher.UIThread.InvokeAsync(() =>
                    {
                        _selectFolderButton.IsEnabled = true;
                    });
                }
            }
        }

        /// <summary>
        /// Recursively builds a TreeViewItem for a directory, calculating its total size.
        /// This method is designed to be run on a background thread.
        /// </summary>
        /// <param name="dir">The directory to process.</param>
        /// <returns>A TreeViewItem representing the directory and its contents.</returns>
        private TreeViewItem BuildNodeRecursive(DirectoryInfo dir)
        {
            long totalSize = 0;
            var subNodes = new List<TreeViewItem>();

            try
            {
                // Sum the size of all files in the current directory.
                totalSize += dir.GetFiles().Sum(file => file.Length);

                // Recursively process all subdirectories.
                foreach (var subDir in dir.GetDirectories())
                {
                    var subNode = BuildNodeRecursive(subDir);
                    // Add the size of the subdirectory to the parent's total.
                    totalSize += (long)(subNode.Tag ?? 0L);
                    subNodes.Add(subNode);
                }
            }
            catch (UnauthorizedAccessException)
            {
                // Gracefully handle directories that we don't have permission to access.
                return new TreeViewItem
                {
                    Header = $"{dir.Name} (Access Denied)",
                    Tag = 0L // Size is 0 as we couldn't read it.
                };
            }

            // Create the UI node for the current directory.
            var node = new TreeViewItem
            {
                Header = $"{dir.Name} ({FormatSize(totalSize)})",
                ItemsSource = subNodes.OrderByDescending(n => (long)(n.Tag ?? 0L)).ToList(),
                Tag = totalSize // Store the raw size in the Tag for sorting.
            };

            return node;
        }

        /// <summary>
        /// Formats a byte value into a human-readable string (KB, MB, GB).
        /// </summary>
        private static string FormatSize(long bytes)
        {
            const int scale = 1024;
            string[] orders = { "GB", "MB", "KB", "B" };
            long max = (long)Math.Pow(scale, orders.Length - 1);

            foreach (string order in orders)
            {
                if (bytes > max)
                    return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);

                max /= scale;
            }
            return "0 B";
        }

        public void Stop()
        {
            _window?.Close();
            _window = null;
            _tree = null;
            _selectFolderButton = null;
            _statusText = null;
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\EnvironmentEditorPlugin.cs ---

using Avalonia.Controls;
using Avalonia.Layout;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Cycloside.Plugins.BuiltIn
{
    public class EnvironmentEditorPlugin : IPlugin
    {
        private EnvironmentEditorWindow? _window;
        private DataGrid? _grid;
        private ComboBox? _scopeSelector;
        private readonly ObservableCollection<EnvItem> _items = new();

        public string Name => "Environment Editor";
        public string Description => "View and edit environment variables for different scopes.";
        public Version Version => new(1, 0, 0);
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        public void Start()
        {
            _window = new EnvironmentEditorWindow();
            _grid = _window.FindControl<DataGrid>("Grid");
            _scopeSelector = _window.FindControl<ComboBox>("ScopeSelector");
            var addButton = _window.FindControl<Button>("AddButton");
            var removeButton = _window.FindControl<Button>("RemoveButton");
            var saveButton = _window.FindControl<Button>("SaveButton");

            if (_scopeSelector != null)
            {
                _scopeSelector.ItemsSource = Enum.GetValues(typeof(EnvironmentVariableTarget));
                _scopeSelector.SelectedIndex = (int)EnvironmentVariableTarget.User;
                _scopeSelector.SelectionChanged += (s, e) => LoadVariables();
            }

            addButton?.AddHandler(Button.ClickEvent, (_, _) => _items.Add(new EnvItem { Key = "NEW_VARIABLE", Value = "new value" }));
            removeButton?.AddHandler(Button.ClickEvent, (_, _) =>
            {
                if (_grid?.SelectedItem is EnvItem selectedItem)
                {
                    _items.Remove(selectedItem);
                }
            });
            saveButton?.AddHandler(Button.ClickEvent, (_, _) => SaveVariables());

            if (_grid != null)
            {
                _grid.ItemsSource = _items;
                _grid.AutoGenerateColumns = false;
                _grid.Columns.Add(new DataGridTextColumn { Header = "Key", Binding = new Avalonia.Data.Binding("Key"), Width = new DataGridLength(1, DataGridLengthUnitType.Star) });
                _grid.Columns.Add(new DataGridTextColumn { Header = "Value", Binding = new Avalonia.Data.Binding("Value"), Width = new DataGridLength(2, DataGridLengthUnitType.Star) });
            }

            LoadVariables();
            _window.Show();
        }
        
        private void LoadVariables()
        {
            if (_scopeSelector?.SelectedItem is not EnvironmentVariableTarget target) return;
            
            _items.Clear();
            try
            {
                var variables = Environment.GetEnvironmentVariables(target);
                foreach (DictionaryEntry de in variables)
                {
                    if (de.Key != null)
                    {
                        _items.Add(new EnvItem { Key = de.Key.ToString()!, Value = de.Value?.ToString() ?? string.Empty });
                    }
                }
            }
            catch (Exception ex)
            {
                // Often a SecurityException if trying to read Machine scope without rights
                _items.Add(new EnvItem { Key = "ERROR", Value = $"Could not load variables for this scope: {ex.Message}" });
            }
        }
        
        private void SaveVariables()
        {
            if (_scopeSelector?.SelectedItem is not EnvironmentVariableTarget target) return;

            // Important: A straight save is destructive. We need to compare to original state.
            // First, get all original keys for the target scope.
            var originalKeys = new HashSet<string>();
            foreach (DictionaryEntry de in Environment.GetEnvironmentVariables(target))
            {
                originalKeys.Add(de.Key.ToString()!);
            }

            // Get all keys currently in our editor.
            var currentKeys = new HashSet<string>(_items.Select(i => i.Key));

            // Find keys that were removed.
            var removedKeys = originalKeys.Except(currentKeys);
            foreach (var key in removedKeys)
            {
                try
                {
                    Environment.SetEnvironmentVariable(key, null, target); // Setting value to null removes it.
                }
                catch(Exception ex)
                {
                     _items.Add(new EnvItem { Key = "ERROR", Value = $"Could not remove '{key}': {ex.Message}" });
                }
            }

            // Set/update all current keys.
            foreach (var item in _items)
            {
                if(string.IsNullOrWhiteSpace(item.Key)) continue;

                try
                {
                    Environment.SetEnvironmentVariable(item.Key, item.Value, target);
                }
                catch (Exception ex)
                {
                    // This will likely fail for Machine scope without admin rights.
                    _items.Add(new EnvItem { Key = "ERROR", Value = $"Could not save '{item.Key}': {ex.Message}" });
                }
            }
            
            // Show a confirmation or status. For now, just reload the list.
            LoadVariables();
        }

        public void Stop()
        {
            _window?.Close();
        }

        private class EnvItem
        {
            public string Key { get; set; } = string.Empty;
            public string Value { get; set; } = string.Empty;
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\FileWatcherPlugin.cs ---

using Avalonia.Controls;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Cycloside.Services;

namespace Cycloside.Plugins.BuiltIn
{
    public class FileWatcherPlugin : IPlugin
    {
        private FileWatcherWindow? _window;
        private TextBox? _log;
        private Button? _selectFolderButton;
        private FileSystemWatcher? _watcher;

        public string Name => "File Watcher";
        public string Description => "Watch a folder for changes";
        public Version Version => new Version(0, 2, 0);
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        public void Start()
        {
            _window = new FileWatcherWindow();
            _selectFolderButton = _window.FindControl<Button>("SelectFolderButton");
            var clearLogButton = _window.FindControl<Button>("ClearLogButton");
            _log = _window.FindControl<TextBox>("LogBox");

            _selectFolderButton?.AddHandler(Button.ClickEvent, async (s, e) => await SelectAndWatchDirectoryAsync());
            clearLogButton?.AddHandler(Button.ClickEvent, (s, e) => { if (_log != null) _log.Text = string.Empty; });

            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(FileWatcherPlugin));
            _window.Show();
        }

        /// <summary>
        /// Handles the folder selection and initiates the watcher.
        /// </summary>
        private async Task SelectAndWatchDirectoryAsync()
        {
            if (_window == null) return;

            // Use the modern, recommended StorageProvider API to open a folder picker.
            var result = await _window.StorageProvider.OpenFolderPickerAsync(new FolderPickerOpenOptions
            {
                Title = "Select a folder to watch",
                AllowMultiple = false
            });

            var selectedFolder = result.FirstOrDefault();
            var path = selectedFolder?.TryGetLocalPath();

            if (!string.IsNullOrWhiteSpace(path))
            {
                StartWatching(path);
            }
        }

        /// <summary>
        /// Sets up the FileSystemWatcher for the specified path.
        /// </summary>
        private void StartWatching(string path)
        {
            // Dispose of any existing watcher before creating a new one.
            _watcher?.Dispose();

            try
            {
                _watcher = new FileSystemWatcher(path)
                {
                    IncludeSubdirectories = true,
                    // NotifyFilters can be adjusted to watch for specific changes
                    NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
                    EnableRaisingEvents = true
                };

                // Hook into the events
                _watcher.Created += (s, e) => Log($"[CREATED] {e.Name}");
                _watcher.Deleted += (s, e) => Log($"[DELETED] {e.Name}");
                _watcher.Changed += (s, e) => Log($"[CHANGED] {e.Name}");
                _watcher.Renamed += (s, e) => Log($"[RENAMED] {e.OldName} -> {e.Name}");
                _watcher.Error += (s, e) => Log($"[ERROR] Watcher error: {e.GetException().Message}");

                Log($"Now watching: {path}");
                if (_selectFolderButton != null) _selectFolderButton.Content = "Change Watched Folder";
            }
            catch (Exception ex)
            {
                Log($"[ERROR] Could not start watcher on '{path}'. Reason: {ex.Message}");
            }
        }

        /// <summary>
        /// Logs a message to the TextBox in a thread-safe way.
        /// FileSystemWatcher events fire on background threads, so UI updates must be dispatched
        /// back to the UI thread to prevent the application from crashing.
        /// </summary>
        private void Log(string msg)
        {
            Dispatcher.UIThread.InvokeAsync(() =>
            {
                if (_log == null) return;

                var timestamp = DateTime.Now.ToString("HH:mm:ss");
                _log.Text += $"[{timestamp}] {msg}{Environment.NewLine}";
                _log.CaretIndex = _log.Text.Length; // Auto-scroll to the end
            });
        }

        public void Stop()
        {
            _watcher?.Dispose();
            _watcher = null;
            _window?.Close();
            _window = null;
            _log = null;
            _selectFolderButton = null;
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\JezzballPlugin.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Threading;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Cycloside.Plugins.BuiltIn
{
    #region Plugin Entry Point
    public class JezzballPlugin : IPlugin
    {
        private Window? _window;

        public string Name => "Jezzball";
        public string Description => "A playable Jezzball clone with lives, time, and win conditions.";
        public Version Version => new(1, 2, 0); // Version bump for major refactor
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        public void Start()
        {
            _window = new Window
            {
                Title = "Jezzball",
                Width = 800,
                Height = 600,
                Content = new JezzballControl() // The Control is now much simpler
            };
            _window.Show();
        }

        public void Stop()
        {
            // The control handles its own timer shutdown now via IDisposable
            (_window?.Content as IDisposable)?.Dispose();
            _window?.Close();
            _window = null;
        }
    }
    #endregion

    #region Game Model (State and Logic)

    public enum WallOrientation { Vertical, Horizontal }

    /// <summary>
    /// Represents a wall being built.
    /// </summary>
    public class BuildingWall
    {
        public Rect Area { get; }
        public WallOrientation Orientation { get; }
        public Point Origin { get; }
        public Rect WallPart1 { get; set; }
        public Rect WallPart2 { get; set; }
        public bool IsPart1Active { get; set; } = true;
        public bool IsPart2Active { get; set; } = true;

        public BuildingWall(Rect area, Point origin, WallOrientation orientation)
        {
            Area = area;
            Origin = origin;
            Orientation = orientation;
            WallPart1 = new Rect(origin, new Size(2, 2));
            WallPart2 = new Rect(origin, new Size(2, 2));
        }

        public bool IsDead => !IsPart1Active && !IsPart2Active;
        public bool IsComplete => !IsPart1Active && !IsPart2Active; // True if both hit walls
    }

    /// <summary>
    /// Represents a single ball.
    /// </summary>
    public class Ball
    {
        public Point Position { get; private set; }
        public Vector Velocity { get; private set; }
        public static double Radius { get; } = 8;

        public Ball(Point position, Vector velocity)
        {
            Position = position;
            Velocity = velocity;
        }

        public Rect BoundingBox => new(Position.X - Radius, Position.Y - Radius, Radius * 2, Radius * 2);

        public void Update(Rect bounds, double dt)
        {
            Position += Velocity * dt;

            if (Position.X - Radius < bounds.Left && Velocity.X < 0) Velocity = Velocity.WithX(-Velocity.X);
            if (Position.X + Radius > bounds.Right && Velocity.X > 0) Velocity = Velocity.WithX(-Velocity.X);
            if (Position.Y - Radius < bounds.Top && Velocity.Y < 0) Velocity = Velocity.WithY(-Velocity.Y);
            if (Position.Y + Radius > bounds.Bottom && Velocity.Y > 0) Velocity = Velocity.WithY(-Velocity.Y);

            // Clamp position to prevent escaping bounds
            Position = new Point(
                Math.Clamp(Position.X, bounds.Left + Radius, bounds.Right - Radius),
                Math.Clamp(Position.Y, bounds.Top + Radius, bounds.Bottom - Radius)
            );
        }
    }

    /// <summary>
    /// The "Engine". Contains all game state and pure logic, with no UI knowledge.
    /// </summary>
    public class JezzballGameState
    {
        // --- State Properties ---
        public int Level { get; private set; } = 1;
        public int Lives { get; private set; } = 3;
        public TimeSpan TimeLeft { get; private set; }
        public double CapturedPercentage { get; private set; }
        public string Message { get; private set; } = string.Empty;

        public IReadOnlyList<Ball> Balls => _balls;
        public IReadOnlyList<Rect> ActiveAreas => _activeAreas;
        public IReadOnlyList<Rect> FilledAreas => _filledAreas;
        public BuildingWall? CurrentWall { get; private set; }

        // --- Private State ---
        private readonly List<Ball> _balls = new();
        private readonly List<Rect> _activeAreas = new();
        private readonly List<Rect> _filledAreas = new();
        private double _totalPlayArea;

        // --- Constants ---
        private const double WallSpeed = 120.0; // Per second
        private const double CaptureRequirement = 0.75; // 75%

        public JezzballGameState()
        {
            StartNewGame();
        }
        
        public void StartNewGame()
        {
            Level = 1;
            Lives = 3;
            StartLevel();
        }

        public void StartLevel()
        {
            _activeAreas.Clear();
            _filledAreas.Clear();
            _balls.Clear();
            CurrentWall = null;
            Message = $"Level {Level}";

            // Assume initial bounds are 800x570 (window minus status bar)
            var bounds = new Rect(0, 0, 800, 570);
            _totalPlayArea = bounds.Width * bounds.Height;
            _activeAreas.Add(bounds);
            TimeLeft = TimeSpan.FromSeconds(30 + Level * 2);
            
            var rand = new Random();
            for (int i = 0; i < Level; i++)
            {
                var angle = rand.NextDouble() * 2 * Math.PI;
                var speed = 90 + Level * 10;
                var velocity = new Vector(Math.Cos(angle) * speed, Math.Sin(angle) * speed);
                _balls.Add(new Ball(bounds.Center, velocity));
            }
            RecalculateCapturedArea();
        }
        
        public void ClearMessageAndRestartIfGameOver()
        {
            if (Message == string.Empty) return;
            
            Message = string.Empty;
            if (Lives <= 0)
            {
                StartNewGame();
            }
        }
        
        public void TryStartWall(Point position, WallOrientation orientation)
        {
            if (CurrentWall != null || Message != string.Empty) return;

            var area = _activeAreas.FirstOrDefault(r => r.Contains(position));
            if (area != default)
            {
                CurrentWall = new BuildingWall(area, position, orientation);
            }
        }

        public void Update(double dt)
        {
            if (Message != string.Empty) return; // Game is paused

            TimeLeft -= TimeSpan.FromSeconds(dt);
            if (TimeLeft <= TimeSpan.Zero)
            {
                LoseLife("Time's Up!");
                return;
            }

            UpdateBalls(dt);
            UpdateWall(dt);
        }

        private void UpdateBalls(double dt)
        {
            foreach (var ball in _balls)
            {
                var area = _activeAreas.FirstOrDefault(r => r.Contains(ball.Position));
                if (area != default)
                {
                    ball.Update(area, dt);
                }
            }
        }

        private void UpdateWall(double dt)
        {
            if (CurrentWall == null) return;

            double growAmount = WallSpeed * dt;

            // Grow Part 1
            if (CurrentWall.IsPart1Active)
            {
                var w1 = CurrentWall.WallPart1;
                w1 = CurrentWall.Orientation == WallOrientation.Vertical
                    ? new Rect(w1.X, w1.Y - growAmount, w1.Width, w1.Height + growAmount)
                    : new Rect(w1.X - growAmount, w1.Y, w1.Width + growAmount, w1.Height);
                CurrentWall.WallPart1 = w1;

                if (CurrentWall.Orientation == WallOrientation.Vertical ? w1.Top <= CurrentWall.Area.Top : w1.Left <= CurrentWall.Area.Left)
                    CurrentWall.IsPart1Active = false; // Reached boundary
                else if (_balls.Any(b => b.BoundingBox.Intersects(w1)))
                    CurrentWall.IsPart1Active = false; // Hit a ball
            }
            // Grow Part 2
            if (CurrentWall.IsPart2Active)
            {
                var w2 = CurrentWall.WallPart2;
                w2 = CurrentWall.Orientation == WallOrientation.Vertical
                    ? new Rect(w2.X, w2.Y, w2.Width, w2.Height + growAmount)
                    : new Rect(w2.X, w2.Y, w2.Width + growAmount, w2.Height);
                CurrentWall.WallPart2 = w2;
                
                if (CurrentWall.Orientation == WallOrientation.Vertical ? w2.Bottom >= CurrentWall.Area.Bottom : w2.Right >= CurrentWall.Area.Right)
                    CurrentWall.IsPart2Active = false; // Reached boundary
                else if (_balls.Any(b => b.BoundingBox.Intersects(w2)))
                    CurrentWall.IsPart2Active = false; // Hit a ball
            }
            
            if (CurrentWall.IsComplete) CaptureAreas();
            else if (CurrentWall.IsDead) LoseLife("Wall Broken!");
        }
        
        private void LoseLife(string reason)
        {
            Lives--;
            CurrentWall = null;
            Message = Lives <= 0 ? "Game Over! Click to restart." : reason;

            if (Lives > 0)
            {
                // Restart level state, but keep lives
                var currentLives = Lives;
                StartLevel();
                Lives = currentLives;
            }
        }

        private void CaptureAreas()
        {
            if (CurrentWall == null) return;
            var area = CurrentWall.Area;
            Rect newArea1, newArea2;

            if (CurrentWall.Orientation == WallOrientation.Vertical)
            {
                newArea1 = area with { Width = CurrentWall.Origin.X - area.Left };
                newArea2 = new Rect(CurrentWall.Origin.X, area.Top, area.Right - CurrentWall.Origin.X, area.Height);
            }
            else // Horizontal
            {
                newArea1 = area with { Height = CurrentWall.Origin.Y - area.Top };
                newArea2 = new Rect(area.Left, CurrentWall.Origin.Y, area.Width, area.Bottom - CurrentWall.Origin.Y);
            }

            _activeAreas.Remove(area);

            if (_balls.Any(b => newArea1.Contains(b.Position))) _activeAreas.Add(newArea1); else _filledAreas.Add(newArea1);
            if (_balls.Any(b => newArea2.Contains(b.Position))) _activeAreas.Add(newArea2); else _filledAreas.Add(newArea2);
            
            CurrentWall = null;
            RecalculateCapturedArea();

            if (CapturedPercentage >= CaptureRequirement)
            {
                Level++;
                Message = "Level Complete!";
            }
        }

        private void RecalculateCapturedArea()
        {
            double filledAreaSum = _filledAreas.Sum(r => r.Width * r.Height);
            CapturedPercentage = _totalPlayArea > 0 ? filledAreaSum / _totalPlayArea : 0;
        }
    }
    #endregion

    #region Game View (UI Control)

    /// <summary>
    /// The "View". Manages input, rendering, and the game loop timer.
    /// It holds the game state but delegates all logic to it.
    /// </summary>
    internal class JezzballControl : UserControl, IDisposable
    {
        // --- State and Timing ---
        private readonly JezzballGameState _gameState = new();
        private readonly DispatcherTimer _timer;
        private readonly Stopwatch _stopwatch = new();
        private Point _mousePosition;
        private WallOrientation _orientation = WallOrientation.Vertical;

        // --- UI Controls ---
        private readonly TextBlock _levelText = new() { Margin = new Thickness(10, 0) };
        private readonly TextBlock _livesText = new() { Margin = new Thickness(10, 0) };
        private readonly TextBlock _timeText = new() { Margin = new Thickness(10, 0) };
        private readonly TextBlock _capturedText = new() { Margin = new Thickness(10, 0) };
        private readonly FormattedText _messageFormattedText = new();

        public JezzballControl()
        {
            // --- UI Setup ---
            var statusBar = new DockPanel { Background = Brushes.DarkSlateGray, Height = 30 };
            DockPanel.SetDock(_levelText, Dock.Left);
            DockPanel.SetDock(_livesText, Dock.Left);
            DockPanel.SetDock(_capturedText, Dock.Right);
            DockPanel.SetDock(_timeText, Dock.Right);
            statusBar.Children.AddRange(new Control[] { _levelText, _livesText, _capturedText, _timeText });

            var layout = new DockPanel();
            DockPanel.SetDock(statusBar, Dock.Bottom);
            layout.Children.Add(statusBar);
            layout.Children.Add(new Panel { Content = this }); // The game itself fills the rest

            Content = layout;
            ClipToBounds = true;
            Focusable = true;

            // --- Event Handlers ---
            PointerPressed += OnPointerPressed;
            PointerMoved += OnPointerMoved;
            
            // --- Game Loop Start ---
            _timer = new DispatcherTimer { Interval = TimeSpan.FromMilliseconds(16) }; // ~60 FPS
            _timer.Tick += GameTick;
            _timer.Start();
            _stopwatch.Start();
        }

        public void Dispose()
        {
            _timer.Stop();
            PointerPressed -= OnPointerPressed;
            PointerMoved -= OnPointerMoved;
        }

        private void OnPointerMoved(object? sender, PointerEventArgs e) => _mousePosition = e.GetPosition(this);

        private void OnPointerPressed(object? sender, PointerPressedEventArgs e)
        {
            var point = e.GetCurrentPoint(this);
            if (point.Properties.IsRightButtonPressed)
            {
                _orientation = _orientation == WallOrientation.Vertical ? WallOrientation.Horizontal : WallOrientation.Vertical;
                return;
            }
            if (point.Properties.IsLeftButtonPressed)
            {
                if (_gameState.Message != string.Empty)
                    _gameState.ClearMessageAndRestartIfGameOver();
                else
                    _gameState.TryStartWall(_mousePosition, _orientation);
            }
        }

        private void GameTick(object? sender, EventArgs e)
        {
            var dt = _stopwatch.Elapsed.TotalSeconds;
            _stopwatch.Restart();

            _gameState.Update(dt);
            UpdateStatusText();
            InvalidateVisual(); // Trigger a re-render
        }

        private void UpdateStatusText()
        {
            _levelText.Text = $"Level: {_gameState.Level}";
            _livesText.Text = $"Lives: {_gameState.Lives}";
            _timeText.Text = $"Time: {_gameState.TimeLeft:ss}";
            _capturedText.Text = $"Captured: {_gameState.CapturedPercentage:P0}";
        }

        public override void Render(DrawingContext context)
        {
            base.Render(context);
            context.FillRectangle(Brushes.Black, this.Bounds);

            // Draw Areas
            foreach (var area in _gameState.FilledAreas) context.FillRectangle(Brushes.DarkCyan, area);
            foreach (var area in _gameState.ActiveAreas) context.DrawRectangle(new Pen(Brushes.SlateGray, 1), area);

            // Draw Balls
            foreach (var ball in _gameState.Balls) context.FillRectangle(Brushes.Crimson, ball.BoundingBox);
            
            // Draw Building Wall
            if (_gameState.CurrentWall is { } wall)
            {
                var buildingPen = new Pen(Brushes.Cyan, 2);
                if (wall.IsPart1Active) context.DrawRectangle(buildingPen, wall.WallPart1);
                if (wall.IsPart2Active) context.DrawRectangle(buildingPen, wall.WallPart2);
            }
            // Draw Preview Wall
            else if (_gameState.Message == string.Empty)
            {
                var area = _gameState.ActiveAreas.FirstOrDefault(r => r.Contains(_mousePosition));
                if (area != default)
                {
                    var previewPen = new Pen(Brushes.Yellow, 1, DashStyle.Dash);
                    if (_orientation == WallOrientation.Vertical)
                        context.DrawLine(previewPen, new Point(_mousePosition.X, area.Top), new Point(_mousePosition.X, area.Bottom));
                    else
                        context.DrawLine(previewPen, new Point(area.Left, _mousePosition.Y), new Point(area.Right, _mousePosition.Y));
                }
            }

            // Draw Message
            if (_gameState.Message != string.Empty)
            {
                _messageFormattedText.Text = _gameState.Message;
                _messageFormattedText.Typeface = new Typeface(FontFamily, weight: FontWeight.Bold);
                _messageFormattedText.FontSize = 48;
                var textPos = new Point((Bounds.Width - _messageFormattedText.Width) / 2, (Bounds.Height - _messageFormattedText.Height) / 2);
                context.DrawText(Brushes.White, textPos, _messageFormattedText);
            }
        }
    }
    #endregion
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\LogViewerPlugin.cs ---

using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Cycloside.Plugins.BuiltIn
{
    public class LogViewerPlugin : IPlugin, IDisposable
    {
        private LogViewerWindow? _window;
        private TextBox? _logBox;
        private CheckBox? _autoScrollCheck;
        private FileSystemWatcher? _watcher;
        private string? _currentFilePath;
        private long _lastReadPosition = 0;

        private readonly List<string> _allLines = new List<string>();
        private string _currentFilter = string.Empty;

        private readonly SemaphoreSlim _fileReadLock = new SemaphoreSlim(1, 1);

        public string Name => "Log Viewer";
        public string Description => "Tail and filter log files in real-time. Now with auto-loading and saving!";
        public Version Version => new Version(0, 5, 0); // Incremented for new features
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;
        
        // --- NEW: Helper to get the application's log directory ---
        private string GetLogDirectory()
        {
            // Assumes a "logs" directory exists next to the application's executable.
            // This is a common pattern for log file locations.
            var exePath = AppDomain.CurrentDomain.BaseDirectory;
            return Path.Combine(exePath, "logs");
        }

        public void Start()
        {
            _window = new LogViewerWindow();

            // --- Create UI Controls ---
            var openButton = new Button { Content = "Open Log File" };
            openButton.Click += async (s, e) => await SelectAndLoadFileAsync();

            // --- NEW: Add a Save button ---
            var saveButton = new Button { Content = "Save Log As...", Margin = new Avalonia.Thickness(5,0) };
            saveButton.Click += async (s, e) => await SaveLogAsync();

            var filterBox = _window.FindControl<TextBox>("FilterBox");
            if (filterBox != null)
            {
                filterBox.Watermark = "Filter (case-insensitive)";
                filterBox.TextChanged += (s, e) =>
                {
                    _currentFilter = filterBox.Text ?? string.Empty;
                    UpdateDisplayedLog();
                };
            }

            var optionsPanel = _window.FindControl<StackPanel>("OptionsPanel") ?? new StackPanel { Orientation = Avalonia.Layout.Orientation.Horizontal, Margin = new Avalonia.Thickness(5) };
            _autoScrollCheck = new CheckBox { Content = "Auto-Scroll", IsChecked = true, Margin = new Avalonia.Thickness(5, 0) };
            var wrapLinesCheck = new CheckBox { Content = "Wrap Lines", IsChecked = false, Margin = new Avalonia.Thickness(5, 0) };
            wrapLinesCheck.IsCheckedChanged += (_, _) =>
            {
                if (_logBox != null)
                {
                    _logBox.TextWrapping = wrapLinesCheck.IsChecked == true
                        ? Avalonia.Media.TextWrapping.Wrap
                        : Avalonia.Media.TextWrapping.NoWrap;
                }
            };
            optionsPanel.Children.Add(_autoScrollCheck);
            optionsPanel.Children.Add(wrapLinesCheck);

            _logBox = _window.FindControl<TextBox>("LogBox");
            if (_logBox != null)
            {
                _logBox.IsReadOnly = true;
                _logBox.AcceptsReturn = true;
                _logBox.TextWrapping = Avalonia.Media.TextWrapping.NoWrap;
                _logBox.FontFamily = "Cascadia Code,Consolas,Menlo,monospace";
                _logBox.Margin = new Avalonia.Thickness(5);
            }
            ScrollViewer.SetHorizontalScrollBarVisibility(_logBox, ScrollBarVisibility.Auto);
            ScrollViewer.SetVerticalScrollBarVisibility(_logBox, ScrollBarVisibility.Auto);
            _logBox.TextChanged += OnLogBoxTextChanged;

            // --- Assemble UI Layout ---
            var topPanel = _window.FindControl<DockPanel>("TopPanel");
            var buttonPanel = _window.FindControl<StackPanel>("ButtonPanel");
            var mainOptions = _window.FindControl<StackPanel>("OptionsPanel");

            buttonPanel?.Children.Add(openButton);
            buttonPanel?.Children.Add(saveButton);

            if (optionsPanel != null && mainOptions != null)
            {
                foreach (var child in optionsPanel.Children)
                {
                    mainOptions.Children.Add(child);
                }
            }

            _window.Show();

            // --- NEW: Automatically load the default Cycloside log on startup ---
            Dispatcher.UIThread.InvokeAsync(AttemptToLoadDefaultLogAsync);
        }
        
        private void OnLogBoxTextChanged(object? sender, TextChangedEventArgs e)
        {
            // Correct auto-scroll logic for Avalonia
            if (_autoScrollCheck?.IsChecked == true && _logBox != null)
            {
                _logBox.CaretIndex = _logBox.Text?.Length ?? 0;
            }
        }
        
        // --- NEW: Logic to find and load the latest log file automatically ---
        private async Task AttemptToLoadDefaultLogAsync()
        {
            var logDir = GetLogDirectory();
            if (!Directory.Exists(logDir))
            {
                LogOnUIThread($"[INFO] Log directory not found at '{logDir}'. Please open a file manually.");
                return;
            }

            // Find the most recently written log file in the directory
            var latestLogFile = new DirectoryInfo(logDir)
                .GetFiles("*.log")
                .OrderByDescending(f => f.LastWriteTime)
                .FirstOrDefault();

            if (latestLogFile != null)
            {
                await LoadFile(latestLogFile.FullName);
            }
            else
            {
                LogOnUIThread($"[INFO] No .log files found in '{logDir}'. Please open a file manually.");
            }
        }

        // --- NEW: Centralized file loading logic ---
        private async Task LoadFile(string path)
        {
            _watcher?.Dispose();
            _currentFilePath = path;
            if (!string.IsNullOrWhiteSpace(_currentFilePath) && File.Exists(_currentFilePath))
            {
                await LoadInitialFileAsync();
                StartWatching();
            }
        }

        // --- IMPROVED: File picker now starts in the log directory ---
        private async Task SelectAndLoadFileAsync()
        {
            if (_window == null) return;

            // Get the suggested directory
            var logDir = GetLogDirectory();
            var startLocation = await _window.StorageProvider.TryGetFolderFromPathAsync(logDir);

            var result = await _window.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
            {
                Title = "Select a log file to view",
                AllowMultiple = false,
                FileTypeFilter = new[] { new FilePickerFileType("Log Files") { Patterns = new[] { "*.log", "*.txt" } }, FilePickerFileTypes.All },
                SuggestedStartLocation = startLocation // Set the start location!
            });

            var file = result.FirstOrDefault();
            if (file?.Path.LocalPath != null)
            {
                await LoadFile(file.Path.LocalPath);
            }
        }

        // --- NEW: Save the current log view to a file ---
        private async Task SaveLogAsync()
        {
            if (_window == null || _logBox == null) return;

            var file = await _window.StorageProvider.SaveFilePickerAsync(new FilePickerSaveOptions
            {
                Title = "Save Log As...",
                SuggestedFileName = $"log_snapshot_{DateTime.Now:yyyyMMdd_HHmmss}.txt",
                DefaultExtension = "txt",
                FileTypeChoices = new[] { new FilePickerFileType("Text File") { Patterns = new[] { "*.txt" } } }
            });

            if (file?.Path.LocalPath != null)
            {
                try
                {
                    var textToSave = _logBox.Text;
                    await File.WriteAllTextAsync(file.Path.LocalPath, textToSave);
                }
                catch (Exception ex)
                {
                    LogOnUIThread($"[ERROR] Could not save file: {ex.Message}");
                }
            }
        }

        private async Task LoadInitialFileAsync()
        {
            if (string.IsNullOrEmpty(_currentFilePath) || _logBox == null) return;

            await _fileReadLock.WaitAsync();
            try
            {
                await Dispatcher.UIThread.InvokeAsync(() => _logBox.Text = $"Loading '{Path.GetFileName(_currentFilePath)}'...");
                _allLines.Clear();
                _lastReadPosition = 0;

                await Task.Run(() =>
                {
                    try
                    {
                        using var fs = new FileStream(_currentFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                        using var sr = new StreamReader(fs, Encoding.UTF8);
                        string? line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            _allLines.Add(line);
                        }
                        _lastReadPosition = fs.Position;
                    }
                    catch (Exception ex)
                    {
                        LogOnUIThread($"[ERROR] Error loading file: {ex.Message}");
                    }
                });
                UpdateDisplayedLog();
            }
            finally
            {
                _fileReadLock.Release();
            }
        }

        private void StartWatching()
        {
            _watcher?.Dispose();
            if (string.IsNullOrEmpty(_currentFilePath)) return;

            var directory = Path.GetDirectoryName(_currentFilePath);
            var fileName = Path.GetFileName(_currentFilePath);
            if (directory == null || fileName == null) return;

            try
            {
                _watcher = new FileSystemWatcher(directory, fileName)
                {
                    NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.Size,
                    EnableRaisingEvents = true
                };
                _watcher.Changed += async (s, e) => await OnFileChangedAsync();
            }
            catch (Exception ex)
            {
                LogOnUIThread($"[ERROR] Could not start watcher. Reason: {ex.Message}");
            }
        }

        private async Task OnFileChangedAsync()
        {
            if (string.IsNullOrEmpty(_currentFilePath) || !_fileReadLock.Wait(0)) return;

            try
            {
                List<string> newLines = new List<string>();
                await Task.Run(() =>
                {
                    try
                    {
                        using var fs = new FileStream(_currentFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                        if (fs.Length < _lastReadPosition)
                        {
                            _allLines.Clear();
                            _lastReadPosition = 0;
                        }

                        fs.Seek(_lastReadPosition, SeekOrigin.Begin);
                        using var sr = new StreamReader(fs, Encoding.UTF8);
                        string? line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            newLines.Add(line);
                        }
                        _lastReadPosition = fs.Position;
                    }
                    catch (IOException) { /* Ignore read errors */ }
                    catch (Exception ex)
                    {
                        newLines.Add($"[ERROR] reading file change: {ex.Message}");
                    }
                });

                if (newLines.Any())
                {
                    _allLines.AddRange(newLines);
                    UpdateDisplayedLog();
                }
            }
            finally
            {
                _fileReadLock.Release();
            }
        }

        private void UpdateDisplayedLog()
        {
            var sb = new StringBuilder();
            IEnumerable<string> filteredLines = _allLines;

            if (!string.IsNullOrWhiteSpace(_currentFilter))
            {
                filteredLines = _allLines.Where(l => l.Contains(_currentFilter, StringComparison.OrdinalIgnoreCase));
            }

            foreach (var line in filteredLines)
            {
                sb.AppendLine(line);
            }

            var textToShow = sb.ToString();
            Dispatcher.UIThread.InvokeAsync(() =>
            {
                if (_logBox != null)
                {
                    _logBox.Text = textToShow;
                }
            });
        }

        private void LogOnUIThread(string message)
        {
            var fullMessage = $"[{DateTime.Now:HH:mm:ss}] {message}";
            _allLines.Add(fullMessage);
            UpdateDisplayedLog();
        }

        public void Stop()
        {
            Dispose();
        }

        public void Dispose()
        {
            _watcher?.Dispose();
            _fileReadLock.Dispose();
            _window?.Close();
            _window = null;
            _watcher = null;
            _logBox = null;
            GC.SuppressFinalize(this);
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\MacroPlugin.cs ---

using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Threading;
using SharpHook;
using SharpHook.Native;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using Cycloside.Services;

// Playback uses SendKeys on Windows. On Linux and macOS, SharpHook's
// EventSimulator is used to emulate key presses. These platforms may
// require additional permissions (e.g. accessibility or X11) for
// input simulation.

namespace Cycloside.Plugins.BuiltIn;

public class MacroPlugin : IPlugin
{
    private MacroWindow? _window;
    private ListBox? _macroList;
    private TextBox? _nameBox;
    private TextBox? _repeatBox;
    private TextBlock? _status;
    private Button? _playButton;
    private IGlobalHook? _hook;
    private readonly bool _isWindows = OperatingSystem.IsWindows();
    // Event simulator from SharpHook is used for cross-platform playback.
    // It falls back to Windows SendKeys when running on Windows.
    private readonly IEventSimulator _simulator = new EventSimulator();
    private readonly List<string> _recording = new();

    public string Name => "Macro Engine";
    public string Description => "Records keyboard macros (playback uses SendKeys on Windows and SharpHook elsewhere).";
    public Version Version => new(1,2,0);

    public Widgets.IWidget? Widget => null;
    public bool ForceDefaultTheme => false;

    public void Start()
    {
        BuildUi();
        RefreshList();
        if (!_isWindows)
        {
            SetStatus("Playback uses SharpHook and may need extra permissions.");
        }
    }

    private void BuildUi()
    {
        _window = new MacroWindow();
        _macroList = _window.FindControl<ListBox>("MacroList");
        _nameBox = _window.FindControl<TextBox>("NameBox");
        _repeatBox = _window.FindControl<TextBox>("RepeatBox");
        _status = _window.FindControl<TextBlock>("StatusText");
        _playButton = _window.FindControl<Button>("PlayButton");

        _window.FindControl<Button>("RecordButton")?.AddHandler(Button.ClickEvent, (_, __) => StartRecording());
        _window.FindControl<Button>("StopButton")?.AddHandler(Button.ClickEvent, (_, __) => StopRecording());
        _playButton?.AddHandler(Button.ClickEvent, (_, __) => PlaySelected());
        _window.FindControl<Button>("SaveButton")?.AddHandler(Button.ClickEvent, (_, __) => { MacroManager.Save(); SetStatus("Saved"); });
        _window.FindControl<Button>("ReloadButton")?.AddHandler(Button.ClickEvent, (_, __) => { MacroManager.Reload(); RefreshList(); });
        _window.FindControl<Button>("DeleteButton")?.AddHandler(Button.ClickEvent, (_, __) => DeleteSelected());

        WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(MacroPlugin));
        _window.Show();
    }

    private void StartRecording()
    {
        if (_hook != null) return;
        _recording.Clear();
        _hook = new TaskPoolGlobalHook();
        _hook.KeyPressed += OnKeyPressed;
        _hook.RunAsync();
        SetStatus("Recording...");
    }

    private void StopRecording()
    {
        if (_hook == null) return;
        _hook.Dispose();
        _hook = null;
        var name = _nameBox?.Text;
        if (!string.IsNullOrWhiteSpace(name))
        {
            MacroManager.Add(new Macro { Name = name!, Keys = _recording.ToList() });
            RefreshList();
            SetStatus($"Recorded {name}");
        }
        else
        {
            SetStatus("No name specified");
        }
    }

    private void OnKeyPressed(object? sender, KeyboardHookEventArgs e)
    {
        _recording.Add(e.Data.KeyCode.ToString());
    }

    private void PlaySelected()
    {
        if (_macroList?.SelectedIndex >= 0 && _macroList.SelectedIndex < MacroManager.Macros.Count)
        {
            var macro = MacroManager.Macros[_macroList.SelectedIndex];
            if (!int.TryParse(_repeatBox?.Text, out var repeat) || repeat < 1) repeat = 1;
            for (int r = 0; r < repeat; r++)
            {
                foreach (var key in macro.Keys)
                {
                    try
                    {
                        // Key playback is only supported on Windows via SendKeys.
                        if (OperatingSystem.IsWindows())
                        if (_isWindows)
                        {
                            // Windows uses SendKeys for playback.
                            System.Windows.Forms.SendKeys.SendWait(key);
                        }
                        else if (Enum.TryParse<KeyCode>(key, out var code))
                        {
                            // Other platforms rely on SharpHook's event simulator.
                            _simulator.SimulateKeyPress(code);
                            _simulator.SimulateKeyRelease(code);
                        }
                        else
                        {
                            Logger.Log($"Unknown key code: {key}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Log($"Macro playback error: {ex.Message}");
                    }
                }
            }
            SetStatus($"Played '{macro.Name}' {repeat}x");
        }
    }

    private void DeleteSelected()
    {
        if (_macroList?.SelectedIndex >= 0 && _macroList.SelectedIndex < MacroManager.Macros.Count)
        {
            var macro = MacroManager.Macros[_macroList.SelectedIndex];
            MacroManager.Remove(macro);
            RefreshList();
            SetStatus($"Deleted {macro.Name}");
        }
    }

    private void RefreshList()
    {
        if (_macroList != null)
        {
            _macroList.ItemsSource = MacroManager.Macros.Select(m => m.Name).ToList();
        }
    }

    private void SetStatus(string msg)
    {
        Dispatcher.UIThread.InvokeAsync(() => { if (_status != null) _status.Text = msg; });
    }

    public void Stop()
    {
        _hook?.Dispose();
        _hook = null;
        _window?.Close();
        _window = null;
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\MP3PlayerPlugin.cs ---

using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using NAudio.Wave;
using System;
using System.Collections.ObjectModel; // Switched to ObservableCollection
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace Cycloside.Plugins.BuiltIn
{
    public partial class MP3PlayerPlugin : ObservableObject, IPlugin, IDisposable
    {
        // --- Fields ---
        private readonly DispatcherTimer _progressTimer;
        private int _currentIndex = -1;
        private IWavePlayer? _wavePlayer;
        private AudioFileReader? _audioReader;
        private float _volumeBeforeMute;

        // --- IPlugin Properties ---
        public string Name => "MP3 Player";
        public string Description => "Play MP3 files with a simple playlist.";
        public Version Version => new(1, 4, 0); // Incremented for new features
        public Widgets.IWidget? Widget => new Widgets.BuiltIn.Mp3Widget(this);
        public bool ForceDefaultTheme => false;

        // --- Public Properties & Collections for UI Binding ---
        public ObservableCollection<string> Playlist { get; } = new();

        [ObservableProperty]
        private string? _currentTrackName;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsStopped))]
        private bool _isPlaying;
        public bool IsStopped => !IsPlaying;

        [ObservableProperty]
        private TimeSpan _currentTime;

        [ObservableProperty]
        private TimeSpan _totalTime;

        [ObservableProperty]
        private string? _errorMessage;
        
        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(ToggleMuteCommand))]
        private float _volume = 1.0f; // Default to 100% volume

        [ObservableProperty]
        private bool _isMuted;

        public MP3PlayerPlugin()
        {
            _progressTimer = new DispatcherTimer(TimeSpan.FromMilliseconds(250), DispatcherPriority.Background, OnTimerTick) { IsEnabled = false };
        }

        // --- IPlugin Lifecycle & Disposal ---
        void IPlugin.Stop() => Dispose();

        public void Dispose()
        {
            _progressTimer.Stop();
            CleanupPlayback();
            GC.SuppressFinalize(this);
        }

        // --- Commands for UI Binding ---
        [RelayCommand]
        private async Task AddFiles()
        {
            if (Application.Current?.ApplicationLifetime is not IClassicDesktopStyleApplicationLifetime desktop || desktop.MainWindow is null) return;

            var openResult = await desktop.MainWindow.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
            {
                Title = "Select MP3 Files",
                AllowMultiple = true,
                FileTypeFilter = new[] { new FilePickerFileType("MP3 Files") { Patterns = new[] { "*.mp3" } } }
            });

            if (openResult is null) return;

            var validFiles = openResult.Select(f => f.TryGetLocalPath()).OfType<string>();
            foreach (var file in validFiles.Where(File.Exists))
            {
                if (!Playlist.Contains(file)) Playlist.Add(file);
            }

            // If nothing was playing and we added songs, start playing the first new one.
            if (!IsPlaying && Playlist.Any())
            {
                _currentIndex = 0;
                UpdateCurrentTrackInfo();
                Play();
            }
        }

        [RelayCommand(CanExecute = nameof(CanPlay))]
        private void Play()
        {
            if (_wavePlayer is null && _currentIndex != -1)
            {
                if (!InitializeReader(Playlist[_currentIndex]))
                {
                    Next();
                    return;
                }
            }
            _wavePlayer?.Play();
        }

        [RelayCommand(CanExecute = nameof(IsPlaying))]
        private void Pause() => _wavePlayer?.Pause();

        [RelayCommand(CanExecute = nameof(IsPlaying))]
        private void Stop() => CleanupPlayback();

        [RelayCommand(CanExecute = nameof(HasNext))]
        private void Next() => SkipToTrack(_currentIndex + 1);

        [RelayCommand(CanExecute = nameof(HasPrevious))]
        private void Previous() => SkipToTrack(_currentIndex - 1);

        [RelayCommand]
        private void Seek(TimeSpan position)
        {
            if (_audioReader is not null) _audioReader.CurrentTime = position;
        }

        [RelayCommand(CanExecute = nameof(CanMute))]
        private void ToggleMute()
        {
            IsMuted = !IsMuted;
            Volume = IsMuted ? 0f : _volumeBeforeMute;
        }

        // --- Command CanExecute Conditions ---
        private bool CanPlay() => !IsPlaying && Playlist.Any();
        private bool HasNext() => _currentIndex < Playlist.Count - 1;
        private bool HasPrevious() => _currentIndex > 0;
        private bool CanMute() => _wavePlayer != null;

        // --- Private Helper Methods ---
        private void SkipToTrack(int index)
        {
            if (index < 0 || index >= Playlist.Count) return;
            var wasPlaying = IsPlaying;
            CleanupPlayback();
            _currentIndex = index;
            UpdateCurrentTrackInfo();
            if (wasPlaying) Play();
        }

        private bool InitializeReader(string filePath)
        {
            ErrorMessage = null; // Clear previous errors
            try
            {
                _audioReader = new AudioFileReader(filePath);
                _wavePlayer = new WaveOutEvent { Volume = Volume }; // Apply current volume
                _wavePlayer.Init(_audioReader);
                _wavePlayer.PlaybackStopped += OnPlaybackStopped;

                TotalTime = _audioReader.TotalTime;
                CurrentTime = TimeSpan.Zero;
                return true;
            }
            catch (Exception ex)
            {
                var friendlyError = $"Failed to load: {Path.GetFileName(filePath)}";
                Console.WriteLine($"[ERROR] {friendlyError} | Details: {ex.Message}");
                ErrorMessage = friendlyError; // Set property for UI to display
                CleanupPlayback();
                return false;
            }
        }

        private void OnPlaybackStopped(object? sender, StoppedEventArgs e)
        {
            IsPlaying = false;
            _progressTimer.Stop();

            // Only auto-advance if playback finished naturally (not stopped by user)
            if (e.Exception is null && _audioReader is not null && _audioReader.Position >= _audioReader.Length)
            {
                if (HasNext()) Next();
                else CleanupPlayback(); // Last song finished
            }
        }
        
        private void OnTimerTick(object? sender, EventArgs e)
        {
            if (_audioReader is not null && IsPlaying) CurrentTime = _audioReader.CurrentTime;
        }

        private void CleanupPlayback()
        {
            _progressTimer.Stop();
            if (_wavePlayer != null)
            {
                _wavePlayer.PlaybackStopped -= OnPlaybackStopped;
                _wavePlayer.Stop();
                _wavePlayer.Dispose();
                _wavePlayer = null;
            }
            if (_audioReader != null)
            {
                _audioReader.Dispose();
                _audioReader = null;
            }
            IsPlaying = false;
            CurrentTime = TimeSpan.Zero;
            TotalTime = TimeSpan.Zero;
        }

        private void UpdateCurrentTrackInfo()
        {
            CurrentTrackName = _currentIndex != -1 ? Path.GetFileNameWithoutExtension(Playlist[_currentIndex]) : "No track loaded";
        }
        
        // --- Property Change Handlers ---
        partial void OnVolumeChanged(float value)
        {
            if (_wavePlayer != null) _wavePlayer.Volume = value;
            if (value > 0) IsMuted = false;
        }
        
        partial void OnIsPlayingChanged(bool value)
        {
            if (value) _progressTimer.Start();
            else _progressTimer.Stop();
            
            // Re-evaluate the CanExecute status of commands that depend on this state
            PlayCommand.NotifyCanExecuteChanged();
            PauseCommand.NotifyCanExecuteChanged();
            StopCommand.NotifyCanExecuteChanged();
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\ProcessMonitorPlugin.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Threading;
using Cycloside.Services;

namespace Cycloside.Plugins.BuiltIn
{
    /// <summary>
    /// A simple data record to hold information about a single process.
    /// Using a record is cleaner than passing around formatted strings.
    /// </summary>
    public record ProcessInfo(string Name, long MemoryUsageMb);

    /// <summary>
    /// Acts as the ViewModel for the Process Monitor window.
    /// </summary>
    public partial class ProcessMonitorPlugin : ObservableObject, IPlugin, IDisposable
    {
        private ProcessMonitorWindow? _window;
        private DispatcherTimer? _timer;

        // --- IPlugin Properties ---
        public string Name => "Process Monitor";
        public string Description => "List running processes with memory usage";
        public Version Version => new(0, 2, 0); // Incremented for MVVM refactor
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        // --- Observable Properties for UI Binding ---
        public ObservableCollection<ProcessInfo> Processes { get; } = new();

        // --- Plugin Lifecycle & Disposal ---

        public void Start()
        {
            _window = new ProcessMonitorWindow { DataContext = this };
            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(ProcessMonitorPlugin));
            _window.Show();

            _timer = new DispatcherTimer(TimeSpan.FromSeconds(2), DispatcherPriority.Background, UpdateProcessList);
            _timer.Start();
        }

        public void Stop()
        {
            _timer?.Stop();
            _window?.Close();
        }

        public void Dispose() => Stop();

        // --- Private Logic ---

        /// <summary>
        /// Fetches the process list on a background thread and updates the collection on the UI thread.
        /// </summary>
        private void UpdateProcessList(object? sender, EventArgs e)
        {
            // Getting all system processes can be slow, so we do it on a background
            // thread to ensure the UI remains perfectly smooth and responsive.
            Task.Run(() =>
            {
                var currentProcesses = Process.GetProcesses()
                    .Select(p =>
                    {
                        try
                        {
                            // p.WorkingSet64 can throw if the process exits while we're querying it.
                            return new ProcessInfo(p.ProcessName, p.WorkingSet64 / 1024 / 1024);
                        }
                        catch
                        {
                            return new ProcessInfo(p.ProcessName, 0); // Gracefully handle access errors
                        }
                    })
                    .OrderBy(p => p.Name)
                    .ToList();

                // All UI updates MUST happen on the UI thread.
                // We dispatch the collection update back to the correct thread.
                Dispatcher.UIThread.InvokeAsync(() =>
                {
                    // This is a simple but effective way to update the list. For very high-frequency
                    // updates, a more complex diffing algorithm could be used, but this is great for a 2-second interval.
                    Processes.Clear();
                    foreach (var process in currentProcesses)
                    {
                        Processes.Add(process);
                    }
                });
            });
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\QBasicRetroIDEPlugin.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using AvaloniaEdit;
using AvaloniaEdit.Highlighting;
using CliWrap;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Cycloside.Services;

namespace Cycloside.Plugins.BuiltIn
{
    public class QBasicRetroIDEPlugin : IPlugin
    {
        private Window? _window;
        private TextEditor? _editor;
        private TreeView? _projectTree;
        private TextBlock? _status;
        private string _qb64Path = "qb64";
        private string? _currentFile;
        private string? _projectPath;
        private bool _isCompiling = false;
        private bool _hasUnsavedChanges = false;

        public string Name => "QBasic Retro IDE";
        public string Description => "Edit and run .BAS files using QB64 Phoenix";
        public Version Version => new Version(0, 3, 1);
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        public void Start()
        {
            _qb64Path = SettingsManager.Settings.ComponentSkins.TryGetValue("QB64Path", out var list) && list.Count > 0 && !string.IsNullOrWhiteSpace(list[0])
                ? list[0]
                : "qb64";

            _editor = new TextEditor
            {
                ShowLineNumbers = true,
                SyntaxHighlighting = HighlightingManager.Instance.GetDefinition("VBNET") ?? HighlightingManager.Instance.GetDefinition("C#"),
                Background = new SolidColorBrush(Color.FromRgb(0, 0, 128)),
                Foreground = Brushes.White,
                FontFamily = new FontFamily("Consolas"),
                FontSize = 14
            };
            _editor.TextArea.Caret.PositionChanged += (_, _) => UpdateStatus();
            _editor.TextChanged += (_, _)
                =>
                {
                    _hasUnsavedChanges = true;
                    UpdateStatus();
                };

            _projectTree = new TreeView { Width = 200, Margin = new Thickness(2) };
            _projectTree.DoubleTapped += async (_, __) =>
            {
                if (_projectTree.SelectedItem is TreeViewItem { Tag: string path })
                {
                    await LoadFile(path);
                }
            };

            _status = new TextBlock { Foreground = Brushes.White, Margin = new Thickness(5, 0), VerticalAlignment = VerticalAlignment.Center };

            var menu = BuildMenu();
            var statusBar = new DockPanel { Height = 24, Background = Brushes.DarkSlateBlue };
            DockPanel.SetDock(statusBar, Dock.Bottom);
            statusBar.Children.Add(_status);

            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition(GridLength.Auto));
            grid.ColumnDefinitions.Add(new ColumnDefinition(GridLength.Star));
            var splitter = new GridSplitter { Width = 2, Background = Brushes.DarkSlateBlue, HorizontalAlignment = HorizontalAlignment.Right };
            grid.Children.Add(_projectTree);
            grid.Children.Add(splitter);
            grid.Children.Add(_editor);
            Grid.SetColumn(_projectTree, 0);
            Grid.SetColumn(splitter, 0);
            Grid.SetColumn(_editor, 1);

            var dock = new DockPanel();
            DockPanel.SetDock(menu, Dock.Top);
            dock.Children.Add(menu);
            dock.Children.Add(statusBar);
            dock.Children.Add(grid);

            _window = new Window
            {
                Title = "QBasic Retro IDE",
                WindowState = WindowState.Maximized,
                Content = dock
            };

            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(QBasicRetroIDEPlugin));
            _window.KeyDown += Window_KeyDown;
            _window.Show();
            UpdateStatus();
        }

        public void Stop()
        {
            _window?.Close();
            _window = null;
            _editor = null;
            _projectTree = null;
            _status = null;
        }

        #region UI Construction
        private Menu BuildMenu()
        {
            var newItem = new MenuItem { Header = "_New", InputGesture = new KeyGesture(Key.N, KeyModifiers.Control) };
            var openItem = new MenuItem { Header = "_Open...", InputGesture = new KeyGesture(Key.O, KeyModifiers.Control) };
            var openProjectItem = new MenuItem { Header = "Open _Project..." };
            var saveItem = new MenuItem { Header = "_Save", InputGesture = new KeyGesture(Key.S, KeyModifiers.Control) };
            var saveAsItem = new MenuItem { Header = "Save _As..." };
            var exitItem = new MenuItem { Header = "E_xit" };

            var fileItems = new object[]
            {
                newItem, openItem, openProjectItem,
                new Separator(),
                saveItem, saveAsItem,
                new Separator(),
                exitItem
            };

            newItem.Click += async (s, e) => await NewFile();
            openItem.Click += async (s, e) => await OpenFile();
            openProjectItem.Click += async (s, e) => await OpenProject();
            saveItem.Click += async (s, e) => await SaveFile();
            saveAsItem.Click += async (s, e) => await SaveFileAs();
            exitItem.Click += (s, e) => _window?.Close();

            var undoItem = new MenuItem { Header = "_Undo" };
            var redoItem = new MenuItem { Header = "_Redo" };
            var cutItem = new MenuItem { Header = "Cu_t" };
            var copyItem = new MenuItem { Header = "_Copy" };
            var pasteItem = new MenuItem { Header = "_Paste" };

            var editItems = new object[]
            {
                undoItem, redoItem, new Separator(),
                cutItem, copyItem, pasteItem
            };

            undoItem.Click += (s, e) => _editor?.Undo();
            redoItem.Click += (s, e) => _editor?.Redo();
            cutItem.Click += (s, e) => _editor?.Cut();
            copyItem.Click += (s, e) => _editor?.Copy();
            pasteItem.Click += (s, e) => _editor?.Paste();

            var searchItems = new[] { new MenuItem { Header = "_Find..." }, new MenuItem { Header = "_Replace..." } };
            searchItems[0].Click += async (s, e) => await Find();
            searchItems[1].Click += async (s, e) => await Replace();

            var runItems = new[]
            {
                new MenuItem { Header = "_Compile & Run", InputGesture = new KeyGesture(Key.F5) },
                new MenuItem { Header = "Run _Executable" }
            };
            runItems[0].Click += async (s, e) => await CompileAndRun();
            runItems[1].Click += async (s, e) => await RunExecutable();

            var settingsItem = new MenuItem { Header = "_Settings..." };
            settingsItem.Click += (s, e) => OpenSettings();

            var helpItem = new MenuItem { Header = "_About" };
            helpItem.Click += (s, e) => ShowHelp();

            return new Menu
            {
                ItemsSource = new object[]
                {
                    new MenuItem { Header = "_File", ItemsSource = fileItems },
                    new MenuItem { Header = "_Edit", ItemsSource = editItems },
                    new MenuItem { Header = "_Search", ItemsSource = searchItems },
                    new MenuItem { Header = "_Run", ItemsSource = runItems },
                    new MenuItem { Header = "T_ools", ItemsSource = new [] { settingsItem } },
                    new MenuItem { Header = "_Help", ItemsSource = new [] { helpItem } }
                }
            };
        }
        #endregion

        #region File Operations
        private async Task NewFile()
        {
            if (_editor == null) return;

            if (_hasUnsavedChanges && _window != null)
            {
                var confirm = new ConfirmationWindow("Unsaved Changes",
                    "Discard current changes?");
                var result = await confirm.ShowDialog<bool>(_window);
                if (!result) return;
            }

            _editor.Text = string.Empty;
            _currentFile = null;
            UpdateStatus(false);
        }

        private async Task OpenProject()
        {
            if (_window == null) return;
            var result = await _window.StorageProvider.OpenFolderPickerAsync(new FolderPickerOpenOptions { Title = "Open QBasic Project Folder" });
            var selectedFolder = result.FirstOrDefault();
            if (selectedFolder != null && selectedFolder.TryGetLocalPath() is { } path)
            {
                _projectPath = path;
                UpdateProjectTree();
            }
        }

        private async Task OpenFile()
        {
            if (_window == null) return;
            var result = await _window.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
            {
                Title = "Open BAS File",
                FileTypeFilter = new[] { new FilePickerFileType("BAS Files") { Patterns = new[] { "*.bas" } } }
            });

            if (result.FirstOrDefault()?.TryGetLocalPath() is { } path)
            {
                if (_hasUnsavedChanges)
                {
                    var confirm = new ConfirmationWindow("Unsaved Changes", "Discard current changes?");
                    var cont = await confirm.ShowDialog<bool>(_window);
                    if (!cont) return;
                }

                await LoadFile(path);
            }
        }

        private async Task LoadFile(string path)
        {
            if (_editor == null) return;
            try
            {
                SetStatus($"Loading {Path.GetFileName(path)}...");
                _currentFile = path;
                _editor.Text = await File.ReadAllTextAsync(path);
                _hasUnsavedChanges = false;
                if (_window != null) _window.Title = $"QBasic Retro IDE - {Path.GetFileName(path)}";
                UpdateStatus(false);
            }
            catch (Exception ex)
            {
                SetStatus($"Error loading file: {ex.Message}");
            }
        }

        private async Task SaveFile()
        {
            if (string.IsNullOrEmpty(_currentFile))
            {
                await SaveFileAs();
                return;
            }
            if (_editor == null) return;

            try
            {
                SetStatus($"Saving {_currentFile}...");
                await File.WriteAllTextAsync(_currentFile, _editor.Text);
                UpdateStatus(false); // No longer modified
                SetStatus($"Saved successfully.");
            }
            catch (Exception ex)
            {
                SetStatus($"Error saving file: {ex.Message}");
            }
        }

        private async Task SaveFileAs()
        {
            if (_window == null || _editor == null) return;
            var result = await _window.StorageProvider.SaveFilePickerAsync(new FilePickerSaveOptions
            {
                Title = "Save BAS File As...",
                FileTypeChoices = new[] { new FilePickerFileType("BAS Files") { Patterns = new[] { "*.bas" } } },
                SuggestedFileName = Path.GetFileName(_currentFile) ?? "Untitled.bas"
            });

            if (result?.TryGetLocalPath() is { } path)
            {
                _currentFile = path;
                if (_window != null) _window.Title = $"QBasic Retro IDE - {Path.GetFileName(path)}";
                await SaveFile();
                UpdateProjectTree();
            }
        }

        private void UpdateProjectTree()
        {
            if (_projectTree == null || string.IsNullOrWhiteSpace(_projectPath)) return;

            var rootNode = new TreeViewItem { Header = Path.GetFileName(_projectPath), IsExpanded = true };
            try
            {
                var items = Directory.GetFiles(_projectPath, "*.bas")
                    .Select(f => new TreeViewItem { Header = Path.GetFileName(f), Tag = f })
                    .ToList<object>();
                rootNode.ItemsSource = items;
                _projectTree.ItemsSource = new[] { rootNode };
            }
            catch (Exception ex)
            {
                SetStatus($"Error reading project directory: {ex.Message}");
            }
        }
        #endregion

        #region Compilation and Running
        private async Task CompileAndRun()
        {
            if (_isCompiling) return;

            _isCompiling = true;
            SetStatus("Compiling...");

            try
            {
                if (string.IsNullOrEmpty(_currentFile))
                {
                    await SaveFileAs(); // Force user to save first
                    if (string.IsNullOrEmpty(_currentFile)) return; // User cancelled
                }
                else
                {
                    await SaveFile();
                }

                // Check again in case saving failed or was cancelled
                if (string.IsNullOrEmpty(_currentFile)) return;

                await Cli.Wrap(_qb64Path)
                    .WithArguments($"\"{_currentFile}\"")
                    .WithValidation(CommandResultValidation.None)
                    .ExecuteAsync();

                SetStatus("Compilation finished. Running...");

                var exePath = Path.ChangeExtension(_currentFile, OperatingSystem.IsWindows() ? "exe" : null);
                if (!string.IsNullOrEmpty(exePath) && File.Exists(exePath))
                {
                    await Cli.Wrap(exePath).ExecuteAsync();
                    SetStatus("Execution finished.");
                }
                else
                {
                    SetStatus("Compilation failed: Executable not found.");
                }
            }
            catch (Exception ex)
            {
                SetStatus($"Error: {ex.Message}");
                Logger.Log($"QB64 compile error: {ex.Message}");
            }
            finally
            {
                _isCompiling = false;
                UpdateStatus();
            }
        }

        private async Task RunExecutable()
        {
            if (string.IsNullOrEmpty(_currentFile))
            {
                SetStatus("No file is open to run its executable.");
                return;
            }

            var exePath = Path.ChangeExtension(_currentFile, OperatingSystem.IsWindows() ? "exe" : null);
            if (!string.IsNullOrEmpty(exePath) && File.Exists(exePath))
            {
                SetStatus($"Running {Path.GetFileName(exePath)}...");
                try
                {
                    await Cli.Wrap(exePath).ExecuteAsync();
                    SetStatus("Execution finished.");
                }
                catch (Exception ex)
                {
                    SetStatus($"Error running executable: {ex.Message}");
                }
            }
            else
            {
                SetStatus("Executable not found. Compile the file first (F5).");
            }
        }
        #endregion

        #region UI Logic and Event Handlers
        private void UpdateStatus(bool? modified = null)
        {
            if (_status == null || _editor == null || _isCompiling) return;

            if (modified.HasValue)
                _hasUnsavedChanges = modified.Value;

            var line = _editor.TextArea.Caret.Line;
            var col = _editor.TextArea.Caret.Column;
            var file = string.IsNullOrWhiteSpace(_currentFile) ? "Untitled" : Path.GetFileName(_currentFile);
            var modIndicator = _hasUnsavedChanges ? "*" : "";

            _status.Text = $"Ln {line}, Col {col}  |  {file}{modIndicator}";
        }

        private void SetStatus(string message)
        {
            if (_status == null) return;
            // Use dispatcher to ensure UI update is on the correct thread
            Dispatcher.UIThread.InvokeAsync(() => _status.Text = message);
        }

        private async void Window_KeyDown(object? sender, KeyEventArgs e)
        {
            // Use a try-catch block to prevent crashes from unhandled exceptions in async void
            try
            {
                // Key gestures are now handled by the MenuItems, this is a fallback/override
                if (e.Key == Key.F5)
                {
                    await CompileAndRun();
                    e.Handled = true;
                }
            }
            catch (Exception ex)
            {
                SetStatus($"Critical Error: {ex.Message}");
            }
        }

        private async Task Find()
        {
            if (_window == null || _editor == null) return;
            var text = await ShowInputDialog("Find", "Text to find:");
            if (!string.IsNullOrEmpty(text))
            {
                // This is a very basic find, a real implementation would be more complex
                var index = _editor.Text.IndexOf(text, _editor.SelectionStart + _editor.SelectionLength, StringComparison.OrdinalIgnoreCase);
                if (index == -1) index = _editor.Text.IndexOf(text, 0, StringComparison.OrdinalIgnoreCase); // Wrap around

                if (index >= 0)
                {
                    _editor.Select(index, text.Length);
                    _editor.TextArea.Caret.BringCaretToView();
                }
                else
                {
                    SetStatus("Text not found.");
                }
            }
        }

        private async Task Replace()
        {
            if (_window == null || _editor == null) return;
            var findText = await ShowInputDialog("Replace", "Text to find:");
            if (string.IsNullOrEmpty(findText)) return;

            var replaceText = await ShowInputDialog("Replace With", "Replace with:");
            if (replaceText == null) return; // User cancelled

            _editor.Text = _editor.Text.Replace(findText, replaceText, StringComparison.OrdinalIgnoreCase);
        }

        private void OpenSettings()
        {
            if (_window == null || _editor == null) return;
            var settingsWindow = new IdeSettingsWindow(_qb64Path, _editor.FontSize);
            settingsWindow.ShowDialog(_window);

            if (settingsWindow.Result)
            {
                _qb64Path = settingsWindow.QB64Path;
                _editor.FontSize = settingsWindow.FontSize;
                SettingsManager.Settings.ComponentSkins["QB64Path"] = new List<string> { _qb64Path };
                SettingsManager.Save();
            }
        }

        private void ShowHelp()
        {
            if (_window == null) return;
            // A proper about window would be better here
            var aboutWindow = new Window
            {
                Title = "About QBasic Retro IDE",
                Width = 400,
                Height = 200,
                Content = new TextBlock
                {
                    Text = "QBasic Retro IDE Plugin\n\nPowered by QB64 Phoenix Edition\nhttps://github.com/QB64-Phoenix-Edition/QB64pe",
                    TextAlignment = TextAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                }
            };
            if (_window != null)
            {
                aboutWindow.ShowDialog(_window);
            }
        }

        private async Task<string?> ShowInputDialog(string title, string prompt)
        {
            var inputWindow = new InputWindow(title, prompt);
            if (_window != null)
            {
                return await inputWindow.ShowDialog<string?>(_window);
            }
            return null;
        }
        #endregion

        #region Helper Windows
        private class InputWindow : Window
        {
            private readonly TextBox _box = new();
            public InputWindow(string title, string prompt)
            {
                Title = title;
                Width = 300;
                SizeToContent = SizeToContent.Height;
                WindowStartupLocation = WindowStartupLocation.CenterOwner;

                var panel = new StackPanel { Margin = new Thickness(10), Spacing = 8 };
                panel.Children.Add(new TextBlock { Text = prompt });
                panel.Children.Add(_box);

                var ok = new Button { Content = "OK", IsDefault = true };
                ok.Click += (_, _) => Close(_box.Text);
                var cancel = new Button { Content = "Cancel", IsCancel = true };
                cancel.Click += (_, _) => Close(null);

                var buttonPanel = new StackPanel { Orientation = Orientation.Horizontal, HorizontalAlignment = HorizontalAlignment.Right, Spacing = 5 };
                buttonPanel.Children.Add(ok);
                buttonPanel.Children.Add(cancel);
                panel.Children.Add(buttonPanel);
                Content = panel;

                _box.AttachedToVisualTree += (s, e) => _box.Focus();
            }
        }

        private class IdeSettingsWindow : Window
        {
            private readonly TextBox _pathBox;
            private readonly TextBox _fontSizeBox;
            public bool Result { get; private set; } = false;

            public IdeSettingsWindow(string path, double fontSize)
            {
                Title = "IDE Settings";
                Width = 400;
                SizeToContent = SizeToContent.Height;
                WindowStartupLocation = WindowStartupLocation.CenterOwner;

                var panel = new StackPanel { Margin = new Thickness(10), Spacing = 5 };
                panel.Children.Add(new TextBlock { Text = "QB64 Executable Path:" });
                _pathBox = new TextBox { Text = path };
                panel.Children.Add(_pathBox);
                panel.Children.Add(new TextBlock { Text = "Font Size:" });
                _fontSizeBox = new TextBox { Text = fontSize.ToString() };
                panel.Children.Add(_fontSizeBox);

                var ok = new Button { Content = "Save", IsDefault = true };
                ok.Click += (_, _) => { Result = true; Close(); };
                var cancel = new Button { Content = "Cancel", IsCancel = true };
                cancel.Click += (_, _) => Close();

                var buttonPanel = new StackPanel { Orientation = Orientation.Horizontal, HorizontalAlignment = HorizontalAlignment.Right, Spacing = 5 };
                buttonPanel.Children.Add(ok);
                buttonPanel.Children.Add(cancel);
                panel.Children.Add(buttonPanel);
                Content = panel;
            }

            public string QB64Path => _pathBox.Text ?? "qb64";
            public new double FontSize => double.TryParse(_fontSizeBox.Text, out var f) && f > 0 ? f : 14;
        }

        private class ConfirmationWindow : Window
        {
            public ConfirmationWindow(string title, string message)
            {
                Title = title;
                Width = 350;
                SizeToContent = SizeToContent.Height;
                WindowStartupLocation = WindowStartupLocation.CenterOwner;

                var messageBlock = new TextBlock
                {
                    Text = message,
                    Margin = new Thickness(15),
                    TextWrapping = TextWrapping.Wrap
                };

                var yesButton = new Button { Content = "Yes", IsDefault = true, Margin = new Thickness(5) };
                yesButton.Click += (_, _) => Close(true);
                var noButton = new Button { Content = "No", IsCancel = true, Margin = new Thickness(5) };
                noButton.Click += (_, _) => Close(false);

                var buttonPanel = new StackPanel
                {
                    Orientation = Orientation.Horizontal,
                    HorizontalAlignment = HorizontalAlignment.Center
                };
                buttonPanel.Children.Add(yesButton);
                buttonPanel.Children.Add(noButton);

                var mainPanel = new StackPanel { Spacing = 10 };
                mainPanel.Children.Add(messageBlock);
                mainPanel.Children.Add(buttonPanel);

                Content = mainPanel;
            }
        }
        #endregion
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\TaskSchedulerPlugin.cs ---

using Avalonia.Controls;
using System;
using System.Diagnostics;
using Cycloside.Services;

namespace Cycloside.Plugins.BuiltIn;

public class TaskSchedulerPlugin : IPlugin
{
    private TaskSchedulerWindow? _window;
    private TextBox? _cmdBox;
    private TextBox? _timeBox;

    public string Name => "Task Scheduler";
    public string Description => "Schedule commands with cron or Task Scheduler";
    public Version Version => new(0,1,0);
    public Widgets.IWidget? Widget => null;
    public bool ForceDefaultTheme => false;

    public void Start()
    {
        _window = new TaskSchedulerWindow();
        _cmdBox = _window.FindControl<TextBox>("CmdBox");
        _timeBox = _window.FindControl<TextBox>("TimeBox");
        var addButton = _window.FindControl<Button>("AddButton");
        addButton?.AddHandler(Button.ClickEvent, (_, __) =>
        {
            if (!string.IsNullOrWhiteSpace(_cmdBox?.Text) && !string.IsNullOrWhiteSpace(_timeBox?.Text))
                AddTask(_cmdBox!.Text, _timeBox!.Text);
        });
        WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(TaskSchedulerPlugin));
        _window.Show();
    }

    private void AddTask(string cmd, string time)
    {
        try
        {
            if (OperatingSystem.IsWindows())
            {
                Process.Start("schtasks", $"/Create /SC ONCE /TR \"{cmd}\" /ST {time} /F");
            }
            else
            {
                var entry = $"{time} {cmd}";
                Process.Start("bash", $"-c \"(crontab -l; echo '{entry}') | crontab -\"");
            }
        }
        catch (Exception ex)
        {
            Logger.Log($"Task scheduler error: {ex.Message}");
        }
    }

    public void Stop()
    {
        _window?.Close();
        _window = null;
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\TextEditorPlugin.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Cycloside.Services;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Platform.Storage;

namespace Cycloside.Plugins.BuiltIn
{
    /// <summary>
    /// Acts as the ViewModel for the Text Editor window.
    /// Manages the editor's state and file operations.
    /// </summary>
    public partial class TextEditorPlugin : ObservableObject, IPlugin
    {
        // --- State Fields ---
        private TextEditorWindow? _window;
        private string? _currentFilePath;
        private string _lastSavedText = string.Empty;

        // --- IPlugin Properties ---
        public string Name => "Text Editor";
        public string Description => "A simple Markdown and text editor.";
        public Version Version => new Version(1, 0, 0); // Version reset for new architecture
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        // --- Observable Properties for UI Binding ---
        [ObservableProperty]
        private string _editorContent = string.Empty;

        [ObservableProperty]
        private string _statusText = "Ready";

        [ObservableProperty]
        private string _windowTitle = "Cycloside Editor - Untitled";
        
        // --- Plugin Lifecycle Methods ---
        public void Start()
        {
            // The Start method is now incredibly simple:
            // 1. Create the View (the Window)
            // 2. Set its DataContext to this class (the ViewModel)
            // 3. Show it.
            _window = new TextEditorWindow
            {
                DataContext = this
            };
            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(TextEditorPlugin));
            _window.Show();
        }

        public void Stop()
        {
            _window?.Close();
            _window = null;
        }

        // --- Commands for UI Binding ---

        [RelayCommand]
        private async Task NewFile()
        {
            if (!await CanProceedWithUnsavedChanges()) return;

            EditorContent = string.Empty;
            _currentFilePath = null;
            _lastSavedText = string.Empty;
            StatusText = "New file created.";
            UpdateWindowTitle();
        }

        [RelayCommand]
        private async Task OpenFile()
        {
            if (_window is null || !await CanProceedWithUnsavedChanges()) return;
            
            var openResult = await _window.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
            {
                Title = "Open Text File",
                AllowMultiple = false,
                FileTypeFilter = new[] { FilePickerFileTypes.All }
            });

            if (openResult?.FirstOrDefault()?.TryGetLocalPath() is { } path)
            {
                StatusText = $"Opening {Path.GetFileName(path)}...";
                try
                {
                    EditorContent = await File.ReadAllTextAsync(path);
                    _currentFilePath = path;
                    _lastSavedText = EditorContent;
                    StatusText = $"Successfully opened {Path.GetFileName(path)}.";
                    UpdateWindowTitle(Path.GetFileName(path));
                }
                catch (Exception ex)
                {
                    StatusText = $"Error opening file: {ex.Message}";
                }
            }
        }

        [RelayCommand]
        private async Task SaveFile()
        {
            if (string.IsNullOrEmpty(_currentFilePath))
            {
                await SaveFileAs();
            }
            else
            {
                await WriteTextToFileAsync(_currentFilePath);
            }
        }

        [RelayCommand]
        private async Task SaveFileAs()
        {
            if (_window is null) return;
            
            var saveResult = await _window.StorageProvider.SaveFilePickerAsync(new FilePickerSaveOptions
            {
                Title = "Save Text File As...",
                SuggestedFileName = Path.GetFileName(_currentFilePath) ?? "Untitled.txt",
                FileTypeChoices = new[] { FilePickerFileTypes.All }
            });

            if (saveResult?.TryGetLocalPath() is { } path)
            {
                _currentFilePath = path;
                await WriteTextToFileAsync(path);
                UpdateWindowTitle(saveResult.Name);
            }
        }

        // --- Helper Methods ---

        private async Task WriteTextToFileAsync(string path)
        {
            StatusText = $"Saving {Path.GetFileName(path)}...";
            try
            {
                await File.WriteAllTextAsync(path, EditorContent);
                _lastSavedText = EditorContent;
                StatusText = "File saved successfully.";
            }
            catch (Exception ex)
            {
                StatusText = $"Error saving file: {ex.Message}";
            }
        }

        private async Task<bool> CanProceedWithUnsavedChanges()
        {
            if (_window is null || EditorContent == _lastSavedText) return true;
            
            var confirm = new ConfirmationWindow("Unsaved Changes", "Discard unsaved changes?");
            return await confirm.ShowDialog<bool>(_window);
        }

        private void UpdateWindowTitle(string? fileName = null)
        {
            WindowTitle = string.IsNullOrEmpty(fileName)
                ? "Cycloside Editor - Untitled"
                : $"Cycloside Editor - {fileName}";
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\WallpaperPlugin.cs ---

using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using Cycloside.Services;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace Cycloside.Plugins.BuiltIn
{
    /// <summary>
    /// Simple plugin that changes the desktop wallpaper. All platform-specific
    /// behavior is implemented in <see cref="WallpaperHelper"/> so this plugin
    /// only delegates to that helper.
    /// </summary>
    public class WallpaperPlugin : IPlugin
    {
        private WallpaperWindow? _window;
        private TextBlock? _statusBlock;
        private Action<object?>? _wallpaperHandler;

        public string Name => "Wallpaper Changer";
        public string Description => "Change desktop wallpaper";
        public Version Version => new Version(0, 2, 0); // Incremented for improvements
        public Widgets.IWidget? Widget => null;
        public bool ForceDefaultTheme => false;

        public void Start()
        {
            _window = new WallpaperWindow();
            _statusBlock = _window.FindControl<TextBlock>("StatusBlock");
            var selectButton = _window.FindControl<Button>("SelectButton");

            if (selectButton != null)
                selectButton.Click += async (_, _) => await SelectAndSetWallpaperAsync();

            // --- Set up PluginBus handler ---
            _wallpaperHandler = payload =>
            {
                if (payload is string path && !string.IsNullOrEmpty(path))
                {
                    SetWallpaper(path);
                }
            };
            PluginBus.Subscribe("wallpaper:set", _wallpaperHandler);
            ThemeManager.ApplyFromSettings(_window, "Plugins");
            WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(WallpaperPlugin));
            _window.Show();
        }

        /// <summary>
        /// Opens a file picker and sets the wallpaper if a valid image is chosen.
        /// </summary>
        private async Task SelectAndSetWallpaperAsync()
        {
            if (_window == null) return;

            // Use the modern, recommended StorageProvider API to open a file picker.
            var result = await _window.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
            {
                Title = "Select Wallpaper Image",
                AllowMultiple = false,
                FileTypeFilter = new[]
                {
                    new FilePickerFileType("Image Files")
                    {
                        Patterns = new[] { "*.jpg", "*.jpeg", "*.png", "*.bmp" }
                    }
                }
            });

            var selectedFile = result.FirstOrDefault();
            if (selectedFile?.TryGetLocalPath() is { } path)
            {
                SetWallpaper(path);
            }
        }

        /// <summary>
        /// Changes the desktop wallpaper by delegating to <see cref="WallpaperHelper"/>
        /// and provides user feedback.
        /// </summary>
        private void SetWallpaper(string path)
        {
            if (string.IsNullOrWhiteSpace(path) || !File.Exists(path))
            {
                SetStatus("Error: Invalid file path.");
                return;
            }

            try
            {
                SetStatus($"Setting wallpaper to {Path.GetFileName(path)}...");
                // The WallpaperHelper contains the actual platform-specific logic.
                WallpaperHelper.SetWallpaper(path);
                SetStatus("Wallpaper changed successfully!");
            }
            catch (Exception ex)
            {
                SetStatus($"Error: {ex.Message}");
                // Optionally log the full error for debugging
                Logger.Log($"WallpaperPlugin failed: {ex}");
            }
        }

        /// <summary>
        /// Updates the status message in a thread-safe way.
        /// </summary>
        private void SetStatus(string message)
        {
            if (_statusBlock == null) return;
            // Ensure UI updates are always on the UI thread.
            Dispatcher.UIThread.InvokeAsync(() => _statusBlock.Text = message);
        }


        public void Stop()
        {
            _window?.Close();
            _window = null;
            _statusBlock = null;

            if (_wallpaperHandler != null)
            {
                PluginBus.Unsubscribe("wallpaper:set", _wallpaperHandler);
                _wallpaperHandler = null;
            }
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\WidgetHostPlugin.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Input;
using Avalonia.Layout;
using Cycloside.Widgets;
using System;

namespace Cycloside.Plugins.BuiltIn;

public class WidgetHostPlugin : IPlugin
{
    private WidgetHostWindow? _window;
    private WidgetManager? _manager;
    private readonly Plugins.PluginManager? _pluginManager;

    public WidgetHostPlugin()
    {
    }

    public WidgetHostPlugin(Plugins.PluginManager manager)
    {
        _pluginManager = manager;
    }

    public string Name => "Widget Host";
    public string Description => "Hosts movable desktop widgets";
    public Version Version => new(0,1,0);
    public Widgets.IWidget? Widget => null;
    public bool ForceDefaultTheme => false;

    public void Start()
    {
        _manager = new WidgetManager();
        _manager.LoadBuiltIn();
        _window = new WidgetHostWindow();
        WindowEffectsManager.Instance.ApplyConfiguredEffects(_window, nameof(WidgetHostPlugin));
        var canvas = _window.Root;
        double x = 10;
        double y = 10;
        foreach (var widget in _manager.Widgets)
        {
            var view = widget.BuildView();
            Canvas.SetLeft(view, x);
            Canvas.SetTop(view, y);
            EnableDrag(view);
            canvas.Children.Add(view);
            x += 120;
        }

        if (_pluginManager != null)
        {
            foreach (var plugin in _pluginManager.Plugins)
            {
                if (plugin == this) continue;
                var w = plugin.Widget;
                if (w != null)
                {
                    var view = w.BuildView();
                    Canvas.SetLeft(view, x);
                    Canvas.SetTop(view, y);
                    EnableDrag(view);
                    canvas.Children.Add(view);
                    x += 120;
                }
            }
        }
        _window.Show();
    }

    private void EnableDrag(Control ctrl)
    {
        Point? last = null;
        ctrl.PointerPressed += (s, e) =>
        {
            last = e.GetPosition(_window);
            e.Pointer.Capture(ctrl);
        };
        ctrl.PointerMoved += (s, e) =>
        {
            if (last.HasValue)
            {
                var pos = e.GetPosition(_window);
                var offset = pos - last.Value;
                var left = Canvas.GetLeft(ctrl) + offset.X;
                var top = Canvas.GetTop(ctrl) + offset.Y;
                Canvas.SetLeft(ctrl, left);
                Canvas.SetTop(ctrl, top);
                last = pos;
            }
        };
        ctrl.PointerReleased += (_, e) =>
        {
            e.Pointer.Capture(null);
            last = null;
        };
    }

    public void Stop()
    {
        _window?.Close();
        _window = null;
        _manager = null;
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\BuiltIn\WinampVisHostPlugin.cs ---

using System;
using System.IO;
using Cycloside.Visuals;

namespace Cycloside.Plugins.BuiltIn;

public class WinampVisHostPlugin : IPlugin
{
    private VisPluginManager? _manager;

    public string Name => "Winamp Visual Host";
    public string Description => "Hosts Winamp visualization plugins";
    public Version Version => new(0,1,0);
    public Widgets.IWidget? Widget => null; // For UI widget host support
    public bool ForceDefaultTheme => false;

    public void Start()
    {
        var dir = Path.Combine(AppContext.BaseDirectory, "Plugins", "Winamp");
        _manager = new VisPluginManager();
        _manager.Load(dir);

        if (_manager.Plugins.Count == 0)
            return;

        if (_manager.Plugins.Count == 1)
        {
            _manager.StartPlugin(_manager.Plugins[0]);
        }
        else
        {
            var picker = new VisPluginPickerWindow(_manager);
            picker.Show();
        }
    }

    public void Stop()
    {
        _manager?.Dispose();
        _manager = null;
    }
}



--- FILE: D:\github\newideas\Cycloside\Plugins\PluginChangeStatus.cs ---

namespace Cycloside.Plugins;

public enum PluginChangeStatus
{
    None,
    New,
    Updated
}



--- FILE: D:\github\newideas\Cycloside\Plugins\PluginLoadContext.cs ---

using System.Reflection;
using System.Runtime.Loader;

namespace Cycloside.Plugins;

internal class PluginLoadContext : AssemblyLoadContext
{
    private readonly AssemblyDependencyResolver _resolver;

    public PluginLoadContext(string path) : base(isCollectible: true)
    {
        _resolver = new AssemblyDependencyResolver(path);
    }

    protected override Assembly? Load(AssemblyName assemblyName)
    {
        var asmPath = _resolver.ResolveAssemblyToPath(assemblyName);
        if (asmPath != null)
            return LoadFromAssemblyPath(asmPath);
        return null;
    }

    public Assembly LoadPlugin(string path) => LoadFromAssemblyPath(path);
}



--- FILE: D:\github\newideas\Cycloside\Plugins\PluginManager.cs ---

using Cycloside; // access SettingsManager and other core services
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Threading;

namespace Cycloside.Plugins
{
    /// <summary>
    /// A private helper class to hold all information about a loaded plugin.
    /// This is crucial for correctly managing the plugin's lifecycle, especially for unloading.
    /// </summary>
    internal class PluginInfo
    {
        public IPlugin Instance { get; }
        public bool IsEnabled { get; set; }
        public PluginChangeStatus Status { get; set; }

        // These are only set for plugins loaded from a DLL, not for built-in ones.
        public AssemblyLoadContext? LoadContext { get; }
        public string? FilePath { get; }
        public WeakReference? WeakRefToContext { get; }

        public PluginInfo(IPlugin instance, AssemblyLoadContext? context = null, string? filePath = null)
        {
            Instance = instance;
            LoadContext = context;
            FilePath = filePath;
            IsEnabled = false; // Plugins start as disabled until explicitly enabled.
            Status = PluginChangeStatus.None;
            if (context != null)
            {
                WeakRefToContext = new WeakReference(context, trackResurrection: true);
            }
        }
    }
    
    public class PluginManager
    {
        // FIX: The core data structure is now a list of PluginInfo objects.
        // This allows us to track not just the plugin, but its load context and state.
        private readonly List<PluginInfo> _pluginInfos = new();
        private readonly object _pluginLock = new();
        private FileSystemWatcher? _watcher;
        private readonly Action<string>? _notify;
        private Timer? _reloadTimer;

        public string PluginDirectory { get; }
        public bool IsolationEnabled { get; set; }
        public bool CrashLoggingEnabled { get; set; }

        // The public list of plugins is now derived from our internal list.
        public IReadOnlyList<IPlugin> Plugins => _pluginInfos.Select(p => p.Instance).ToList().AsReadOnly();

        public PluginManager(string pluginDirectory, Action<string>? notify = null)
        {
            PluginDirectory = pluginDirectory;
            _notify = notify;
            // Assuming SettingsManager is available
            IsolationEnabled = SettingsManager.Settings.PluginIsolation;
            CrashLoggingEnabled = SettingsManager.Settings.PluginCrashLogging;
        }

        public void StartWatching()
        {
            if (_watcher != null || !Directory.Exists(PluginDirectory)) return;

            _watcher = new FileSystemWatcher(PluginDirectory, "*.dll")
            {
                EnableRaisingEvents = true,
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.CreationTime
            };

            // Use a timer to debounce file system events. This prevents multiple reloads
            // when a file is saved, as it can trigger several events in quick succession.
            _reloadTimer = new Timer(_ => ReloadPlugins(), null, Timeout.Infinite, Timeout.Infinite);

            var eventHandler = new FileSystemEventHandler((s, e) => _reloadTimer.Change(500, Timeout.Infinite));
            _watcher.Created += eventHandler;
            _watcher.Changed += eventHandler;
            _watcher.Deleted += eventHandler;
            _watcher.Renamed += new RenamedEventHandler((s, e) => _reloadTimer.Change(500, Timeout.Infinite));
        }

        public void LoadPlugins()
        {
            lock (_pluginLock)
            {
                if (!Directory.Exists(PluginDirectory))
                {
                    Directory.CreateDirectory(PluginDirectory);
                }

                foreach (var dll in Directory.GetFiles(PluginDirectory, "*.dll"))
                {
                    try
                    {
                        AssemblyLoadContext? context = null;
                        Assembly asm;

                        if (IsolationEnabled)
                        {
                            context = new PluginLoadContext(dll);
                            asm = context.LoadFromAssemblyPath(dll);
                        }
                        else
                        {
                            asm = Assembly.LoadFrom(dll);
                        }

                        var types = asm.GetTypes().Where(t => typeof(IPlugin).IsAssignableFrom(t) && !t.IsAbstract);
                        foreach (var type in types)
                        {
                            if (Activator.CreateInstance(type) is IPlugin plugin)
                            {
                                // Pass the context to the PluginInfo object so we can unload it later.
                                var info = new PluginInfo(plugin, context, dll);
                                _pluginInfos.Add(info);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Log($"Failed to load plugin {Path.GetFileName(dll)}: {ex.Message}");
                    }
                }
            }
        }
        
        /// <summary>
        /// The new, correct implementation for hot-reloading plugins.
        /// </summary>
        public void ReloadPlugins()
        {
            lock (_pluginLock)
            {
                StopAll(); // This now also unloads the assemblies.

                // Clear internal state
                _pluginInfos.Clear();
                
                // It's crucial to force garbage collection here to finalize the unloading process.
                GC.Collect();
                GC.WaitForPendingFinalizers();

                LoadPlugins();
                _notify?.Invoke("Plugins have been reloaded.");
                
                // Re-apply settings to the newly loaded plugins
                WorkspaceProfiles.Apply(SettingsManager.Settings.ActiveProfile, this);
            }
        }

        public void StopAll()
        {
            lock (_pluginLock)
            {
                foreach (var info in _pluginInfos)
                {
                    DisablePlugin(info.Instance);
                }
                
                // This is the critical new step: Unload the contexts.
                foreach (var info in _pluginInfos.Where(p => p.LoadContext != null))
                {
                    info.LoadContext!.Unload();
                }

                _watcher?.Dispose();
                _watcher = null;
                _reloadTimer?.Dispose();
                _reloadTimer = null;
            }
        }

        public void AddPlugin(IPlugin plugin)
        {
            lock (_pluginLock)
            {
                if (_pluginInfos.Any(p => p.Instance.Name == plugin.Name)) return; // Don't add duplicates
                
                var info = new PluginInfo(plugin); // Built-in plugins have no context or path.
                
                var versions = SettingsManager.Settings.PluginVersions;
                if (!versions.TryGetValue(plugin.Name, out var ver))
                {
                    info.Status = PluginChangeStatus.New;
                }
                else if (ver != plugin.Version.ToString())
                {
                    info.Status = PluginChangeStatus.Updated;
                }

                versions[plugin.Name] = plugin.Version.ToString();
                SettingsManager.Save(); // Consider debouncing this if it's slow

                _pluginInfos.Add(info);
            }
        }
        
        private PluginInfo? GetInfo(IPlugin plugin) => _pluginInfos.FirstOrDefault(p => p.Instance == plugin);

        public void EnablePlugin(IPlugin plugin)
        {
            var info = GetInfo(plugin);
            if (info == null || info.IsEnabled) return;

            try
            {
                plugin.Start();
                info.IsEnabled = true;
            }
            catch (Exception ex)
            {
                info.IsEnabled = false;
                if (CrashLoggingEnabled)
                {
                    Logger.Log($"{plugin.Name} crashed on start: {ex.Message}");
                }
                _notify?.Invoke($"[{plugin.Name}] crashed and was disabled.");
            }
        }

        // StartPlugin is kept for backward compatibility with older code.
        // It simply calls EnablePlugin, which starts and tracks the plugin.
        public void StartPlugin(IPlugin plugin) => EnablePlugin(plugin);

        public void DisablePlugin(IPlugin plugin)
        {
            var info = GetInfo(plugin);
            if (info == null || !info.IsEnabled) return;

            try
            {
                plugin.Stop();
            }
            catch (Exception ex)
            {
                if (CrashLoggingEnabled)
                {
                    Logger.Log($"Error stopping {plugin.Name}: {ex.Message}");
                }
            }
            finally
            {
                info.IsEnabled = false;
            }
        }

        public bool IsEnabled(IPlugin plugin) => GetInfo(plugin)?.IsEnabled ?? false;
        public PluginChangeStatus GetStatus(IPlugin plugin) => GetInfo(plugin)?.Status ?? PluginChangeStatus.None;
    }

}



--- FILE: D:\github\newideas\Cycloside\Scripting\CyclosideBasicEngine.cs ---

// CyclosideBASIC Engine - Full Interpreter
// Save as CyclosideBasicEngine.cs

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Avalonia.Controls;

namespace Cycloside.Scripting
{
    public class CyclosideBasicEngine
    {
        public InterpreterContext Context { get; }
        private readonly Dictionary<string, Action<string[]>> _commands;
        private readonly Dictionary<string, object> _vars = new(StringComparer.OrdinalIgnoreCase);
        private readonly Dictionary<string, object> _readonlyVars = new(StringComparer.OrdinalIgnoreCase);

        public bool Exit { get; private set; }

        public CyclosideBasicEngine(InterpreterContext context)
        {
            Context = context;
            // Built-in read-only variables expose core paths and metadata
            _readonlyVars["APP_NAME"] = context.AppName;
            _readonlyVars["APP_VERSION"] = context.AppVersion;
            if (!string.IsNullOrEmpty(context.PluginDirectory))
                _readonlyVars["PLUGIN_DIR"] = context.PluginDirectory;
            if (!string.IsNullOrEmpty(context.SettingsPath))
                _readonlyVars["SETTINGS_PATH"] = context.SettingsPath;
            if (!string.IsNullOrEmpty(context.MarketplaceUrl))
                _readonlyVars["MARKETPLACE_URL"] = context.MarketplaceUrl;
            if (!string.IsNullOrEmpty(context.AppDirectory))
                _readonlyVars["APP_DIR"] = context.AppDirectory;
            if (!string.IsNullOrEmpty(context.LogsDirectory))
                _readonlyVars["LOG_DIR"] = context.LogsDirectory;
            if (!string.IsNullOrEmpty(context.MusicDirectory))
                _readonlyVars["MUSIC_DIR"] = context.MusicDirectory;
            if (!string.IsNullOrEmpty(context.SkinsDirectory))
                _readonlyVars["SKIN_DIR"] = context.SkinsDirectory;
            if (!string.IsNullOrEmpty(context.ThemesDirectory))
                _readonlyVars["THEME_DIR"] = context.ThemesDirectory;
            if (!string.IsNullOrEmpty(context.StatePath))
                _readonlyVars["STATE_PATH"] = context.StatePath;
            if (!string.IsNullOrEmpty(context.ProfilePath))
                _readonlyVars["PROFILE_PATH"] = context.ProfilePath;
            if (!string.IsNullOrEmpty(context.UserHome))
                _readonlyVars["HOME_DIR"] = context.UserHome;
            if (!string.IsNullOrEmpty(context.DesktopPath))
                _readonlyVars["DESKTOP_PATH"] = context.DesktopPath;
            if (!string.IsNullOrEmpty(context.OS))
                _readonlyVars["OS"] = context.OS;

            _commands = new(StringComparer.OrdinalIgnoreCase)
            {
                // Core
                ["PRINT"] = args => Context.Print(ExpandVars(string.Join(" ", args))),
                ["INPUT"] = args => Input(args),
                ["LET"] = args => Let(args),
                ["IF"] = args => IfThen(args),
                ["WAIT"] = args => Task.Delay(ParseInt(args[0])).Wait(),
                ["EXIT"] = args => Exit = true,
                // Cycloside/Manager Integration
                ["THEME"] = args => Context.ThemeManager?.Invoke(args[0]),
                ["SKIN"] = args => Context.SkinManager?.Invoke(args[0]),
                ["SHOWMSG"] = args => Context.ShowMsg?.Invoke(ExpandVars(string.Join(" ", args))),
                ["NOTIFY"] = args => Context.Notify?.Invoke(args.ElementAtOrDefault(0) ?? "", ExpandVars(string.Join(" ", args.Skip(1)))),
                ["SET_CLIPBOARD"] = args => Context.SetClipboard?.Invoke(ExpandVars(string.Join(" ", args))),
                ["GET_CLIPBOARD"] = args => SetVar(args[0], Context.GetClipboard?.Invoke() ?? ""),
                ["RUNPLUGIN"] = args => Context.RunPlugin?.Invoke(args[0]),
                ["LIST_PLUGINS"] = args => Context.Print(Context.ListPlugins != null ? string.Join(", ", Context.ListPlugins()) : "[No plugins]"),
                ["ENABLE_PLUGIN"] = args => Context.EnablePlugin?.Invoke(args[0]),
                ["DISABLE_PLUGIN"] = args => Context.DisablePlugin?.Invoke(args[0]),
                ["SET_WALLPAPER"] = args => Context.SetWallpaper?.Invoke(args[0]),
                ["GET_DISKUSAGE"] = args => SetVar(args[1], Context.GetDiskUsage != null ? Context.GetDiskUsage(args[0]) : "0"),
                ["SHOW_PROCESSLIST"] = args => Context.Print(Context.ListProcesses != null ? string.Join("\n", Context.ListProcesses()) : "[No processes]"),
                ["LOG"] = args => Context.AppendLog?.Invoke(ExpandVars(string.Join(" ", args))),
                ["SET_VOLUME"] = args => Context.SetSystemVolume?.Invoke(ParseInt(args[0])),
                ["GET_VOLUME"] = args => SetVar(args[0], Context.GetSystemVolume != null ? Context.GetSystemVolume() : 0),
                ["MUTE"] = args => Context.SetMuted?.Invoke(true),
                ["UNMUTE"] = args => Context.SetMuted?.Invoke(false),
                ["MEDIA_PLAY"] = _ => Context.MediaPlay?.Invoke(),
                ["MEDIA_PAUSE"] = _ => Context.MediaPause?.Invoke(),
                ["MEDIA_STOP"] = _ => Context.MediaStop?.Invoke(),

                // Extend more as needed!
            };
        }

        /// <summary>
        /// Main script entry. Call with your BASIC code.
        /// </summary>
        public void ExecuteScript(string code)
        {
            Exit = false;
            var lines = ParseLines(code);
            for (int i = 0; i < lines.Count && !Exit; i++)
            {
                var line = lines[i].Trim();
                if (string.IsNullOrEmpty(line) || line.StartsWith("'")) continue; // comment
                // Support for GOTO, labels
                if (line.EndsWith(":")) continue; // label line
                var parts = SplitFirstWord(line);
                var cmd = parts.cmd;
                var args = SplitArgs(parts.rest);

                if (string.Equals(cmd, "GOTO", StringComparison.OrdinalIgnoreCase))
                {
                    var label = args[0].TrimEnd(':');
                    var idx = lines.FindIndex(l => l.TrimStart().StartsWith(label + ":", StringComparison.OrdinalIgnoreCase));
                    if (idx != -1) i = idx - 1; // minus 1 because for-loop will add
                    continue;
                }
                else if (string.Equals(cmd, "GOSUB", StringComparison.OrdinalIgnoreCase))
                {
                    // TODO: Add subroutine support if needed
                }
                else if (_commands.TryGetValue(cmd, out var action))
                {
                    action(args);
                }
                else
                {
                    Context.Print($"[Unknown cmd: {cmd}]");
                }
            }
        }

        // Variable system
        public object GetVar(string name)
        {
            name = name.Trim();
            return _vars.TryGetValue(name, out var v)
                ? v
                : _readonlyVars.TryGetValue(name, out var rv) ? rv : "";
        }

        public void SetVar(string name, object val)
        {
            name = name.Trim();
            if (_readonlyVars.ContainsKey(name))
                return; // ignore attempts to overwrite built-in vars
            _vars[name] = val;
        }
        // Short helpers are redundant with the full implementations above

        // Utility: expands any $(var) or ${var} in a string
        private string ExpandVars(string input)
            => Regex.Replace(input, @"\$\{?(\w+)\}?", m => GetVar(m.Groups[1].Value)?.ToString() ?? "");

        // ========== BASIC Commands Implementation ==========

        private void Input(string[] args)
        {
            var prompt = ExpandVars(string.Join(" ", args.Take(args.Length - 1)));
            var varName = args.Last();
            string val = Context.GetInput != null ? Context.GetInput(prompt) : "";
            SetVar(varName, val);
        }

        private void Let(string[] args)
        {
            // Example: LET foo = 42+7
            var s = string.Join(" ", args);
            var parts = s.Split('=', 2);
            if (parts.Length != 2) return;
            var name = parts[0].Trim();
            var expr = ExpandVars(parts[1]);
            SetVar(name, expr);
        }

        private void IfThen(string[] args)
        {
            // IF <expr> THEN <cmd> <args...>
            var txt = string.Join(" ", args);
            var thenIdx = txt.IndexOf("THEN", StringComparison.OrdinalIgnoreCase);
            if (thenIdx == -1) return;
            var expr = txt.Substring(0, thenIdx).Trim();
            var thenCmd = txt.Substring(thenIdx + 4).Trim();
            bool result = EvaluateCondition(expr);
            if (result)
            {
                var (cmd, rest) = SplitFirstWord(thenCmd);
                if (_commands.TryGetValue(cmd, out var action))
                {
                    action(SplitArgs(rest));
                }
            }
        }

        private bool EvaluateCondition(string expr)
        {
            // Simple evaluator: foo = bar, foo <> bar, foo > 3, etc
            expr = ExpandVars(expr);
            var m = Regex.Match(expr, @"^(.+?)\s*([=<>!]+)\s*(.+)$");
            if (!m.Success) return false;
            var left = m.Groups[1].Value.Trim();
            var op = m.Groups[2].Value;
            var right = m.Groups[3].Value.Trim();
            if (double.TryParse(left, out var lf) && double.TryParse(right, out var rf))
            {
                return op switch
                {
                    "=" or "==" => lf == rf,
                    "<" => lf < rf,
                    ">" => lf > rf,
                    "<=" => lf <= rf,
                    ">=" => lf >= rf,
                    "<>" or "!=" => lf != rf,
                    _ => false
                };
            }
            else
            {
                return op switch
                {
                    "=" or "==" => string.Equals(left, right, StringComparison.OrdinalIgnoreCase),
                    "<>" or "!=" => !string.Equals(left, right, StringComparison.OrdinalIgnoreCase),
                    _ => false
                };
            }
        }

        private int ParseInt(string s)
        {
            if (int.TryParse(ExpandVars(s), out var v)) return v;
            return 0;
        }

        // ========== Helpers ==========

        private (string cmd, string rest) SplitFirstWord(string s)
        {
            if (string.IsNullOrWhiteSpace(s)) return ("", "");
            var idx = s.IndexOf(' ');
            if (idx == -1) return (s, "");
            return (s.Substring(0, idx), s.Substring(idx + 1));
        }

        private string[] SplitArgs(string s)
        {
            // Handles quoted strings and commas: "hello, world", foo, 3
            var args = new List<string>();
            var curr = "";
            bool inQuote = false;
            foreach (var ch in s)
            {
                if (ch == '"') inQuote = !inQuote;
                else if (ch == ',' && !inQuote)
                {
                    args.Add(curr.Trim());
                    curr = "";
                }
                else curr += ch;
            }
            if (!string.IsNullOrWhiteSpace(curr)) args.Add(curr.Trim());
            return args.ToArray();
        }

        private List<string> ParseLines(string code)
        {
            // Supports multi-line scripts, ignores blank lines and trims.
            var lines = code.Split('\n')
                .Select(x => x.TrimEnd('\r').Trim())
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
            return lines;
        }
    }

    // === INTERPRETER CONTEXT ===
    // Provide implementations as lambdas or delegates when constructing the engine.

    public class InterpreterContext
    {
        public Action<string> Print { get; set; } = s => Console.WriteLine(s);
        public Func<string, string> GetInput { get; set; } = prompt => Console.ReadLine() ?? "";
        public Action<string> ShowMsg { get; set; } = _ => { };
        public Action<string, string> Notify { get; set; } = (_, _) => { };
        public Action<string> SetClipboard { get; set; } = _ => { };
        public Func<string> GetClipboard { get; set; } = () => string.Empty;
        public Action<string> ThemeManager { get; set; } = _ => { };
        public Action<string> SkinManager { get; set; } = _ => { };
        public Action<string> SetWallpaper { get; set; } = _ => { };
        public Func<string[]> ListPlugins { get; set; } = Array.Empty<string>;
        public Action<string> RunPlugin { get; set; } = _ => { };
        public Action<string> EnablePlugin { get; set; } = _ => { };
        public Action<string> DisablePlugin { get; set; } = _ => { };
        public Func<string, string> GetDiskUsage { get; set; } = _ => string.Empty;
        public Func<string[]> ListProcesses { get; set; } = Array.Empty<string>;
        public Action<string> AppendLog { get; set; } = _ => { };
        public Action<int> SetSystemVolume { get; set; } = _ => { };
        public Func<int> GetSystemVolume { get; set; } = () => 0;
        public Action<bool> SetMuted { get; set; } = _ => { };
        public Action MediaPlay { get; set; } = () => { };
        public Action MediaPause { get; set; } = () => { };
        public Action MediaStop { get; set; } = () => { };
        // Built-in values that scripts can read but not modify
        public string AppName { get; init; } = "Cycloside";
        public string AppVersion { get; init; } = "1.0.0";
        public string PluginDirectory { get; init; } = string.Empty;
        public string SettingsPath { get; init; } = string.Empty;
        public string MarketplaceUrl { get; init; } = string.Empty;
        public string AppDirectory { get; init; } = string.Empty;
        public string LogsDirectory { get; init; } = string.Empty;
        public string MusicDirectory { get; init; } = string.Empty;
        public string SkinsDirectory { get; init; } = string.Empty;
        public string ThemesDirectory { get; init; } = string.Empty;
        public string StatePath { get; init; } = string.Empty;
        public string ProfilePath { get; init; } = string.Empty;
        public string UserHome { get; init; } = string.Empty;
        public string DesktopPath { get; init; } = string.Empty;
        public string OS { get; init; } = string.Empty;
        // ...extend as needed
    }
}



--- FILE: D:\github\newideas\Cycloside\SDK\Examples\ExamplePlugin.cs ---

using System;
using Cycloside.Plugins;

public class ExamplePlugin : IPlugin
{
    public string Name => "Example";
    public string Description => "Example plugin";
    public Version Version => new(1,0,0);
    public Cycloside.Widgets.IWidget? Widget => null;
    public bool ForceDefaultTheme => false;
    public void Start() { }
    public void Stop() { }
}



--- FILE: D:\github\newideas\Cycloside\SDK\IPlugin.cs ---

using System;

namespace Cycloside.Plugins;

public interface IPlugin
{
    string Name { get; }
    string Description { get; }
    Version Version { get; }
    Cycloside.Widgets.IWidget? Widget { get; }

    /// <summary>
    /// Gets a value indicating whether this plugin should block
    /// component-specific skins from being applied, forcing it to
    /// always use the global application theme.
    /// </summary>
    bool ForceDefaultTheme { get; }

    void Start();
    void Stop();
}



--- FILE: D:\github\newideas\Cycloside\SDK\IPluginExtended.cs ---

using System;

namespace Cycloside.Plugins;

public interface IPluginExtended : IPlugin
{
    void OnSettingsSaved();
    void OnCrash(Exception ex);
}



--- FILE: D:\github\newideas\Cycloside\Services\SkinManager.cs ---

using Avalonia;
using Avalonia.Markup.Xaml.Styling;
using Avalonia.Styling;
using System;
using System.IO;
using System.Linq;

namespace Cycloside.Services
{
    public static class SkinManager
    {
        private static string SkinDir => Path.Combine(AppContext.BaseDirectory, "Skins");

        /// <summary>
        /// Applies a specific skin directly to a UI element (like a Window or Control).
        /// This style is layered on top of the global theme.
        /// </summary>
        public static void ApplySkinTo(StyledElement element, string skinName)
        {
            var file = Path.Combine(SkinDir, $"{skinName}.axaml");
            if (!File.Exists(file))
            {
                Logger.Log($"Component skin '{skinName}' not found at '{file}'.");
                return;
            }

            if (IsFileATheme(file))
            {
                Logger.Log($"Warning: The file '{skinName}.axaml' appears to be a global theme but is being applied as a component skin. This may cause unexpected visual results.");
            }

            var skinStyle = new StyleInclude(new Uri("resm:Styles?assembly=Cycloside"))
            {
                Source = new Uri(file)
            };
            element.Styles.Add(skinStyle);
        }

        private static bool IsFileATheme(string path)
        {
            try
            {
                var content = File.ReadAllText(path);
                return content.Contains("ApplicationBackgroundBrush") || content.Contains("ThemeForegroundColor");
            }
            catch
            {
                return false;
            }
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Services\ThemeManager.cs ---

using Avalonia;
using Avalonia.Markup.Xaml.Styling;
using Avalonia.Styling;
using System;
using System.IO;
using System.Linq;

namespace Cycloside.Services
{
    public static class ThemeManager
    {
        private static string ThemeDir => Path.Combine(AppContext.BaseDirectory, "Themes", "Global");

        /// <summary>
        /// Applies a single global theme to the entire application.
        /// It clears any previously loaded global theme first.
        /// </summary>
        public static void LoadGlobalTheme(string themeName)
        {
            if (Application.Current == null) return;

            var file = Path.Combine(ThemeDir, $"{themeName}.axaml");
            if (!File.Exists(file))
            {
                Logger.Log($"Global theme '{themeName}' not found at '{file}'.");
                return;
            }

            var existing = Application.Current.Styles.OfType<StyleInclude>()
                .FirstOrDefault(x => x.Source?.OriginalString.Contains("/Themes/Global/") == true);
            if (existing != null)
            {
                Application.Current.Styles.Remove(existing);
            }

            var newThemeStyle = new StyleInclude(new Uri("resm:Styles?assembly=Cycloside"))
            {
                Source = new Uri(file)
            };
            Application.Current.Styles.Add(newThemeStyle);
        }

        /// <summary>
        /// Applies the global theme configured for a component to a window.
        /// Stub implementation to satisfy build dependencies.
        /// </summary>
        public static void ApplyFromSettings(Window window, string component)
        {
            // This repository snapshot lacks full theming logic, so simply
            // call LoadGlobalTheme with a default value if present.
            LoadGlobalTheme("Default");
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Skins\ConsoleGreen.axaml ---

<Styles xmlns="https://github.com/avaloniaui">
  <Style Selector="Window">
    <Setter Property="Background" Value="#003300" />
    <Setter Property="Foreground" Value="#00FF00" />
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Skins\DeepBlue.axaml ---

<Styles xmlns="https://github.com/avaloniaui">
  <Style Selector="Window">
    <Setter Property="Background" Value="#002b36" />
    <Setter Property="Foreground" Value="#93a1a1" />
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Skins\Default.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Style Selector="Window">
    <Setter Property="Background" Value="#222" />
    <Setter Property="Foreground" Value="White" />
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Skins\MonochromeOrange.axaml ---

<Styles xmlns="https://github.com/avaloniaui">
  <Style Selector="Window">
    <Setter Property="Background" Value="#552200" />
    <Setter Property="Foreground" Value="#FF8800" />
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Themes\Global\ConsoleGreen.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Styles.Resources>
    <Color x:Key="ThemeBackgroundColor">#008000</Color>
    <Color x:Key="ThemeForegroundColor">Black</Color>
    <SolidColorBrush x:Key="ThemeBackgroundBrush" Color="{StaticResource ThemeBackgroundColor}"/>
    <SolidColorBrush x:Key="ThemeForegroundBrush" Color="{StaticResource ThemeForegroundColor}"/>
  </Styles.Resources>

  <Style Selector="Window">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Arrow"/>
  </Style>

  <Style Selector="Button">
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Cursor" Value="Hand"/>
  </Style>

  <Style Selector="TextBox">
      <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
      <Setter Property="Foreground" Value="Black"/>
      <Setter Property="Cursor" Value="Ibeam"/>

  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Themes\Global\DeepBlue.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Styles.Resources>
    <Color x:Key="ThemeBackgroundColor">#002b36</Color>
    <Color x:Key="ThemeForegroundColor">#93a1a1</Color>
    <SolidColorBrush x:Key="ThemeBackgroundBrush" Color="{StaticResource ThemeBackgroundColor}"/>
    <SolidColorBrush x:Key="ThemeForegroundBrush" Color="{StaticResource ThemeForegroundColor}"/>
  </Styles.Resources>

  <Style Selector="Window">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Arrow"/>
  </Style>

  <Style Selector="Button">
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Hand"/>
  </Style>

  <Style Selector="TextBox">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Ibeam"/>
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Themes\Global\Matrix.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Styles.Resources>
    <Color x:Key="ThemeBackgroundColor">Black</Color>
    <Color x:Key="ThemeForegroundColor">#00FF00</Color>
    <SolidColorBrush x:Key="ThemeBackgroundBrush" Color="{StaticResource ThemeBackgroundColor}"/>
    <SolidColorBrush x:Key="ThemeForegroundBrush" Color="{StaticResource ThemeForegroundColor}"/>
  </Styles.Resources>

  <Style Selector="Window">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Arrow"/>
  </Style>

  <Style Selector="Button">
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Cursor" Value="Hand"/>
  </Style>

  <Style Selector="TextBox">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Ibeam"/>

  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Themes\Global\MintGreen.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Styles.Resources>
    <Color x:Key="ThemeBackgroundColor">#98FF98</Color>
    <Color x:Key="ThemeForegroundColor">Black</Color>
    <Color x:Key="EditorRed">Red</Color>
    <Color x:Key="EditorBlue">Blue</Color>
    <SolidColorBrush x:Key="ThemeBackgroundBrush" Color="{StaticResource ThemeBackgroundColor}"/>
    <SolidColorBrush x:Key="ThemeForegroundBrush" Color="{StaticResource ThemeForegroundColor}"/>
    <SolidColorBrush x:Key="EditorRedBrush" Color="{StaticResource EditorRed}"/>
    <SolidColorBrush x:Key="EditorBlueBrush" Color="{StaticResource EditorBlue}"/>
  </Styles.Resources>

  <Style Selector="Window">
      <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
      <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
      <Setter Property="Cursor" Value="Arrow"/>
  </Style>
  <Style Selector="Button">
      <Setter Property="Foreground" Value="Black"/>
      <Setter Property="Cursor" Value="Hand"/>
  </Style>
  <Style Selector="TextBox">
      <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
      <Setter Property="Foreground" Value="Black"/>
      <Setter Property="Cursor" Value="Ibeam"/>

  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Themes\Global\MonochromeOrange.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Styles.Resources>
    <Color x:Key="ThemeBackgroundColor">#FF8800</Color>
    <Color x:Key="ThemeForegroundColor">Black</Color>
    <SolidColorBrush x:Key="ThemeBackgroundBrush" Color="{StaticResource ThemeBackgroundColor}"/>
    <SolidColorBrush x:Key="ThemeForegroundBrush" Color="{StaticResource ThemeForegroundColor}"/>
  </Styles.Resources>

  <Style Selector="Window">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Arrow"/>
  </Style>

  <Style Selector="Button">
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Cursor" Value="Hand"/>
  </Style>

  <Style Selector="TextBox">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Cursor" Value="Ibeam"/>
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\Themes\Global\Orange.axaml ---

<Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Styles.Resources>
    <Color x:Key="ThemeBackgroundColor">#FFA500</Color>
    <Color x:Key="ThemeForegroundColor">Black</Color>
    <SolidColorBrush x:Key="ThemeBackgroundBrush" Color="{StaticResource ThemeBackgroundColor}"/>
    <SolidColorBrush x:Key="ThemeForegroundBrush" Color="{StaticResource ThemeForegroundColor}"/>
  </Styles.Resources>

  <Style Selector="Window">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}"/>
    <Setter Property="Cursor" Value="Arrow"/>
  </Style>

  <Style Selector="Button">
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Cursor" Value="Hand"/>
  </Style>

  <Style Selector="TextBox">
    <Setter Property="Background" Value="{StaticResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Cursor" Value="Ibeam"/>
  </Style>
</Styles>



--- FILE: D:\github\newideas\Cycloside\ViewModels\MainWindowViewModel.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using Cycloside.Plugins;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows.Input;

namespace Cycloside.ViewModels
{
    public partial class MainWindowViewModel : ObservableObject
    {
        public ObservableCollection<IPlugin> AvailablePlugins { get; }

        public ICommand? ExitCommand { get; set; }
        public ICommand? StartPluginCommand { get; set; }

        public MainWindowViewModel(IEnumerable<IPlugin> plugins)
        {
            AvailablePlugins = new ObservableCollection<IPlugin>(plugins);
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\ViewModels\WizardViewModel.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Cycloside; // core models and services
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

namespace Cycloside.ViewModels
{
    public partial class PluginItem : ObservableObject
    {
        [ObservableProperty]
        private string name = string.Empty;

        [ObservableProperty]
        private bool isEnabled;
    }

    public partial class WizardViewModel : ObservableObject
    {
        // --- Properties for UI Binding ---

        [ObservableProperty]
        private int currentStep;

        [ObservableProperty]
        private string selectedTheme = string.Empty;

        [ObservableProperty]
        private string profileName = "Default";

        public ObservableCollection<string> AvailableThemes { get; } = new();
        public ObservableCollection<PluginItem> Plugins { get; } = new();
        
        // --- NEW: Event to communicate with the View ---
        
        /// <summary>
        /// The View (WizardWindow) will listen for this event to know when to close.
        /// </summary>
        public event EventHandler? RequestClose;

        // --- Constructor ---

        public WizardViewModel()
        {
            LoadThemes();
            LoadPlugins();
            if (AvailableThemes.Any())
            {
                // Set the default theme to "Mint" if it exists, otherwise the first in the list.
                SelectedTheme = AvailableThemes.Contains("Mint") ? "Mint" : AvailableThemes[0];
            }
        }
        
        // --- NEW: Commands for the Back/Next Buttons ---

        [RelayCommand]
        private void Back()
        {
            if (CurrentStep > 0)
            {
                CurrentStep--;
            }
        }

        [RelayCommand]
        private void Next()
        {
            // If we are not on the last step, just advance to the next tab.
            if (CurrentStep < 4) // Assuming 5 steps, indexed 0-4
            {
                CurrentStep++;
                return;
            }

            // --- This is the logic from your original Next_Click on the final step ---
            
            // 1. Save all the settings gathered from the wizard
            SettingsManager.Settings.GlobalTheme = SelectedTheme;
            foreach (var item in Plugins)
            {
                SettingsManager.Settings.PluginEnabled[item.Name] = item.IsEnabled;
            }
            
            var profile = new WorkspaceProfile
            {
                Name = ProfileName,
                Plugins = Plugins.ToDictionary(p => p.Name, p => p.IsEnabled)
            };
            WorkspaceProfiles.AddOrUpdate(profile);
            
            SettingsManager.Settings.ActiveProfile = ProfileName;
            SettingsManager.Settings.FirstRun = false;
            SettingsManager.Save();
            
            // 2. Request the window to close by firing the event
            RequestClose?.Invoke(this, EventArgs.Empty);
        }
        
        // --- Private Helper Methods ---

        private void LoadThemes()
        {
            try
            {
                var dir = Path.Combine(AppContext.BaseDirectory, "Skins");
                if (!Directory.Exists(dir)) return;
                
                foreach (var file in Directory.GetFiles(dir, "*.axaml"))
                {
                    AvailableThemes.Add(Path.GetFileNameWithoutExtension(file));
                }
            }
            catch (Exception)
            {
                // Could fail due to permissions, etc. Silently ignore.
            }
        }

        private void LoadPlugins()
        {
            string[] names =
            {
                "Date/Time Overlay", "MP3 Player", "Macro", "Text Editor", "Wallpaper", 
                "Clipboard Manager", "File Watcher", "Process Monitor", "Task Scheduler", 
                "Disk Usage", "Log Viewer", "Environment Editor", "Jezzball", 
                "Widget Host", "Winamp Vis Host", "QBasic Retro IDE"
            };

            foreach (var n in names)
            {
                // By default, enable all plugins for the first run.
                Plugins.Add(new PluginItem { Name = n, IsEnabled = true });
            }
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Views\WizardWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:Cycloside.ViewModels"
        x:Class="Cycloside.Views.WizardWindow"
        x:DataType="vm:WizardViewModel"
        Width="450" Height="350" CanResize="False"
        WindowStartupLocation="CenterScreen"
        Title="Cycloside Setup Wizard"
        Background="{DynamicResource ApplicationBackgroundBrush}">

  <DockPanel Margin="15">

    <DockPanel DockPanel.Dock="Bottom" Margin="0,15,0,0">
      <TextBlock Text="{Binding ProgressText}"
                   DockPanel.Dock="Left"
                   VerticalAlignment="Center"
                   Opacity="0.7"/>
      
      <StackPanel Orientation="Horizontal"
                  HorizontalAlignment="Right"
                  Spacing="8">
        <Button Content="Back"
                Command="{Binding BackCommand}"
                IsEnabled="{Binding CanGoBack}"/>
        <Button Content="{Binding NextButtonText}"
                Command="{Binding NextCommand}"
                IsDefault="True"
                Classes="accent"/> </StackPanel>
    </DockPanel>

    <TabControl SelectedIndex="{Binding CurrentStep, Mode=OneWay}" IsEnabled="False">
      <TabControl.PageTransition>
        <CrossFade Duration="0.25"/>
      </TabControl.PageTransition>

      <TabItem Header="Welcome">
        <TextBlock TextWrapping="Wrap"
                   VerticalAlignment="Center"
                   HorizontalAlignment="Center"
                   Text="Welcome to Cycloside! This wizard will help you configure the basics." />
      </TabItem>

      <TabItem Header="Plugins">
        <StackPanel Spacing="8">
          <TextBlock Text="Enable built-in plugins:" Margin="0,0,0,5" />
          <ScrollViewer Height="200">
            <ItemsControl ItemsSource="{Binding Plugins}">
              <ItemsControl.ItemTemplate>
                <DataTemplate x:DataType="vm:PluginItem">
                  <CheckBox Content="{Binding Name}" IsChecked="{Binding IsEnabled}" Margin="0,2" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ScrollViewer>
        </StackPanel>
      </TabItem>
      
      <TabItem Header="Finish">
          <TextBlock TextWrapping="Wrap"
                     VerticalAlignment="Center"
                     HorizontalAlignment="Center"
                     Text="Setup is complete. Click Finish to launch the application." />
      </TabItem>

    </TabControl>
  </DockPanel>
</Window>


--- FILE: D:\github\newideas\Cycloside\Views\WizardWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Input; // Required for PointerPressedEventArgs
using Avalonia.Markup.Xaml;
using Cycloside.Services;
using Cycloside.ViewModels;

namespace Cycloside.Views
{
    public partial class WizardWindow : Window
    {
        public WizardWindow()
        {
            InitializeComponent();

            var viewModel = new WizardViewModel();
            DataContext = viewModel;

            // Apply custom styling and effects
            CursorManager.ApplyFromSettings(this, "Plugins");
            WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(WizardWindow));

            // Subscribe to the ViewModel's request to close the window.
            viewModel.RequestClose += (sender, e) => Close();

            // *** ADDED: Attach the event handler for dragging the window ***
            this.PointerPressed += Window_PointerPressed;
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }

        /// <summary>
        /// This event handler makes our borderless window draggable.
        /// </summary>
        private void Window_PointerPressed(object? sender, PointerPressedEventArgs e)
        {
            // We only want to drag when the left mouse button is pressed.
            if (e.GetCurrentPoint(this).Properties.IsLeftButtonPressed)
            {
                // Check if the DataContext is our ViewModel and if it's not locked.
                if (DataContext is WizardViewModel vm && !vm.IsLocked)
                {
                    // This command tells the OS to start a drag operation.
                    BeginMoveDrag(e);
                }
            }
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Visuals\VisHostWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Visuals.VisHostWindow"
        Width="400" Height="300"
        Title="Visualization">
</Window>



--- FILE: D:\github\newideas\Cycloside\Visuals\VisHostWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using System;
using Cycloside.Services;

namespace Cycloside.Visuals;

public partial class VisHostWindow : Window
{
    public VisHostWindow()
    {
        InitializeComponent();
        CursorManager.ApplyFromSettings(this, "Plugins");
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public IntPtr GetHandle()
    {
        return this.TryGetPlatformHandle()?.Handle ?? IntPtr.Zero;
    }
}



--- FILE: D:\github\newideas\Cycloside\Visuals\VisPluginManager.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Timers;

namespace Cycloside.Visuals;

public class VisPluginManager : IDisposable
{
    private readonly List<WinampVisPluginAdapter> _plugins = new();
    private WinampVisPluginAdapter? _active;
    private Timer? _renderTimer;
    private VisHostWindow? _window;

    public IReadOnlyList<WinampVisPluginAdapter> Plugins => _plugins;

    public void Load(string directory)
    {
        if (!OperatingSystem.IsWindows())
            return;

        if (!Directory.Exists(directory))
            Directory.CreateDirectory(directory);

        foreach (var dll in Directory.GetFiles(directory, "vis_*.dll"))
        {
            var plugin = new WinampVisPluginAdapter(dll);
            if (plugin.Load())
            {
                _plugins.Add(plugin);
            }
        }
    }

    public bool StartFirst()
    {
        var plugin = _plugins.FirstOrDefault();
        return plugin != null && StartPlugin(plugin);
    }

    public bool StartPlugin(WinampVisPluginAdapter plugin)
    {
        if (!_plugins.Contains(plugin))
            return false;

        _window = new VisHostWindow();
        _window.Show();

        plugin.SetParent(_window.GetHandle());

        if (!plugin.Initialize())
            return false;

        _active = plugin;
        _renderTimer = new Timer(33);
        _renderTimer.Elapsed += (_, _) => plugin.Render();
        _renderTimer.Start();
        return true;
    }

    public void Dispose()
    {
        _renderTimer?.Stop();
        _window?.Close();
        _active?.Quit();
        foreach (var p in _plugins)
            p.Quit();
    }
}



--- FILE: D:\github\newideas\Cycloside\Visuals\VisPluginPickerWindow.cs ---

using Avalonia.Controls;
using Avalonia.Layout;
using System.Collections.Generic;
using System.Linq;
using Cycloside.Services;

namespace Cycloside.Visuals;

public class VisPluginPickerWindow : Window
{
    private readonly VisPluginManager _manager;
    private readonly ListBox _list = new();

    public VisPluginPickerWindow(VisPluginManager manager)
    {
        _manager = manager;
        Title = "Select Visualization";
        Width = 300;
        Height = 200;

        var start = new Button { Content = "Start", HorizontalAlignment = HorizontalAlignment.Right };
        start.Click += (_, _) => StartSelected();
        _list.DoubleTapped += (_, _) => StartSelected();
        _list.ItemsSource = manager.Plugins.Select(p => p.Description).ToList();

        var panel = new StackPanel { Margin = new Thickness(10) };
        panel.Children.Add(_list);
        panel.Children.Add(start);
        Content = panel;

        CursorManager.ApplyFromSettings(this, "Plugins");
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(VisPluginPickerWindow));
    }

    private void StartSelected()
    {
        if (_list.SelectedIndex >= 0 && _list.SelectedIndex < _manager.Plugins.Count)
        {
            var plugin = _manager.Plugins[_list.SelectedIndex];
            _manager.StartPlugin(plugin);
            Close();
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Visuals\WinampVisPluginAdapter.cs ---

using System;
using System.Runtime.InteropServices;
using Cycloside.Interop;

namespace Cycloside.Visuals;

public class WinampVisPluginAdapter
{
    private readonly string _path;
    private IntPtr _library;
    private winampVisModule _module;
    private delegate int InitDelegate(ref winampVisModule m);
    private delegate int RenderDelegate(ref winampVisModule m);
    private delegate void QuitDelegate(ref winampVisModule m);

    private InitDelegate? _init;
    private RenderDelegate? _render;
    private QuitDelegate? _quit;

    public string Description { get; private set; } = string.Empty;

    public void SetParent(IntPtr hwnd)
    {
        _module.hwndParent = hwnd;
    }

    public WinampVisPluginAdapter(string path)
    {
        _path = path;
    }

    public bool Load()
    {
        if (!OperatingSystem.IsWindows())
            return false;

        _library = NativeMethods.LoadLibrary(_path);
        if (_library == IntPtr.Zero)
            return false;

        var proc = NativeMethods.GetProcAddress(_library, "winampVisGetHeader");
        if (proc == IntPtr.Zero)
            return false;

        var getHeader = Marshal.GetDelegateForFunctionPointer<winampVisGetHeaderType>(proc);
        var headerPtr = getHeader();
        var header = Marshal.PtrToStructure<winampVisHeader>(headerPtr);
        Description = header.description ?? string.Empty;
        var getModule = Marshal.GetDelegateForFunctionPointer<getModuleDelegate>(header.getModule);
        var modPtr = getModule(0);
        _module = Marshal.PtrToStructure<winampVisModule>(modPtr);

        _init = Marshal.GetDelegateForFunctionPointer<InitDelegate>(_module.Init);
        _render = Marshal.GetDelegateForFunctionPointer<RenderDelegate>(_module.Render);
        _quit = Marshal.GetDelegateForFunctionPointer<QuitDelegate>(_module.Quit);

        _module.hwndParent = IntPtr.Zero;
        _module.sRate = 44100;
        _module.nCh = 2;
        _module.spectrumData = new byte[1152];
        _module.waveformData = new byte[1152];
        return true;
    }

    public bool Initialize()
    {
        if (_init == null) return false;
        return _init(ref _module) == 0;
    }

    public void Render()
    {
        _render?.Invoke(ref _module);
    }

    public void Quit()
    {
        _quit?.Invoke(ref _module);
        if (_library != IntPtr.Zero)
        {
            NativeMethods.FreeLibrary(_library);
            _library = IntPtr.Zero;
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Widgets\BuiltIn\ClockWidget.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Threading;
using System;

namespace Cycloside.Widgets.BuiltIn;

public class ClockWidget : IWidget
{
    public string Name => "Clock";

    public Control BuildView()
    {
        var text = new TextBlock
        {
            Foreground = Brushes.White,
            FontSize = 14
        };
        var timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) };
        timer.Tick += (_, _) => text.Text = DateTime.Now.ToString("HH:mm:ss");
        timer.Start();
        return new Border
        {
            Background = Brushes.Black,
            Opacity = 0.7,
            Padding = new Thickness(4),
            Child = text
        };
    }
}



--- FILE: D:\github\newideas\Cycloside\Widgets\BuiltIn\Mp3Widget.cs ---

using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Input;
using Avalonia.Interactivity;
using Avalonia.Layout;
using Avalonia.Media;
using Cycloside.Plugins.BuiltIn;
using System;

namespace Cycloside.Widgets.BuiltIn
{
    public class Mp3Widget : IWidget
    {
        private readonly MP3PlayerPlugin _plugin;

        public Mp3Widget(MP3PlayerPlugin plugin)
        {
            _plugin = plugin;
        }

        public string Name => "MP3 Player";

        public Control BuildView()
        {
            // --- Create Controls ---

            var trackDisplay = new TextBlock
            {
                Foreground = Brushes.White,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 0, 0, 4)
            };
            trackDisplay.Bind(TextBlock.TextProperty, new Binding(nameof(MP3PlayerPlugin.CurrentTrackName)));

            // A slider for showing progress and seeking
            var progressSlider = new Slider
            {
                VerticalAlignment = VerticalAlignment.Center,
                Margin = new Thickness(5, 0)
            };
            // We bind the slider's range and value to the TimeSpan properties in the plugin, converting to TotalSeconds.
            progressSlider.Bind(RangeBase.MaximumProperty, new Binding(nameof(MP3PlayerPlugin.TotalTime.TotalSeconds)));
            progressSlider.Bind(RangeBase.ValueProperty, new Binding(nameof(MP3PlayerPlugin.CurrentTime.TotalSeconds)));

            // To implement seeking, we handle when the user releases the slider thumb.
            // This is more performant than updating on every tiny movement.
            progressSlider.AddHandler(InputElement.PointerReleasedEvent, (s, e) =>
            {
                // We execute the SeekCommand with the slider's final value as a TimeSpan.
                if (_plugin.SeekCommand.CanExecute(null))
                {
                    _plugin.SeekCommand.Execute(TimeSpan.FromSeconds(progressSlider.Value));
                }
            }, RoutingStrategies.Tunnel);
            
            // TextBlocks to display "01:23 / 04:56" style time.
            // We use StringFormat in the binding to format the TimeSpan without needing a converter.
            var currentTimeText = new TextBlock { Foreground = Brushes.LightGray, VerticalAlignment = VerticalAlignment.Center };
            currentTimeText.Bind(TextBlock.TextProperty, new Binding(nameof(MP3PlayerPlugin.CurrentTime)) { StringFormat = "mm\\:ss" });

            var totalTimeText = new TextBlock { Foreground = Brushes.LightGray, VerticalAlignment = VerticalAlignment.Center };
            totalTimeText.Bind(TextBlock.TextProperty, new Binding(nameof(MP3PlayerPlugin.TotalTime)) { StringFormat = "mm\\:ss" });

            // Buttons are bound using the type-safe nameof() operator.
            var openButton = new Button { Content = "Open", Command = _plugin.OpenFilesCommand };
            var prevButton = new Button { Content = "◀", Command = _plugin.PreviousCommand };
            var playButton = new Button { Content = "▶", Command = _plugin.PlayCommand };
            var pauseButton = new Button { Content = "❚❚", Command = _plugin.PauseCommand };
            var stopButton = new Button { Content = "■", Command = _plugin.StopCommand };
            var nextButton = new Button { Content = "▶|", Command = _plugin.NextCommand };

            // --- Assemble Layout using a Grid for precise alignment ---

            var mainPanel = new Grid
            {
                DataContext = _plugin, // Set DataContext for all children
                RowDefinitions = new RowDefinitions("Auto,Auto,Auto"), // 3 rows for track, progress, buttons
                ColumnDefinitions = new ColumnDefinitions("Auto,*,Auto"), // 3 columns for time, slider, time
                Margin = new Thickness(4)
            };

            // Row 0: Track Name
            Grid.SetRow(trackDisplay, 0);
            Grid.SetColumn(trackDisplay, 0);
            Grid.SetColumnSpan(trackDisplay, 3);

            // Row 1: Progress Bar and Times
            Grid.SetRow(currentTimeText, 1);
            Grid.SetColumn(currentTimeText, 0);
            Grid.SetRow(progressSlider, 1);
            Grid.SetColumn(progressSlider, 1);
            Grid.SetRow(totalTimeText, 1);
            Grid.SetColumn(totalTimeText, 2);

            // Row 2: Button Panel
            var buttonPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Spacing = 5,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 8, 0, 0)
            };
            buttonPanel.Children.AddRange(new Control[] { openButton, prevButton, playButton, pauseButton, stopButton, nextButton });
            
            Grid.SetRow(buttonPanel, 2);
            Grid.SetColumn(buttonPanel, 0);
            Grid.SetColumnSpan(buttonPanel, 3);
            
            mainPanel.Children.AddRange(new Control[] { trackDisplay, currentTimeText, progressSlider, totalTimeText, buttonPanel });

            return new Border
            {
                Background = Brushes.Black,
                Opacity = 0.75,
                Padding = new Thickness(8),
                CornerRadius = new CornerRadius(5),
                Child = mainPanel
            };
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Widgets\BuiltIn\WeatherSettingsWindow.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Markup.Xaml;
using System;
using Cycloside;
using Cycloside.Services;

namespace Cycloside.Widgets.BuiltIn;

public class WeatherSettingsWindow : Window
{
    private readonly TextBox _latBox;
    private readonly TextBox _lonBox;
    private readonly TextBox _cityBox;
    private readonly Action _onSaved;

    public WeatherSettingsWindow(Action onSaved)
    {
        _onSaved = onSaved;
        Title = "Weather Location";
        Width = 250;
        SizeToContent = SizeToContent.Height;
        WindowStartupLocation = WindowStartupLocation.CenterOwner;

        var panel = new StackPanel { Margin = new Thickness(10), Spacing = 5 };
        panel.Children.Add(new TextBlock { Text = "City (optional):" });
        _cityBox = new TextBox { Text = SettingsManager.Settings.WeatherCity };
        panel.Children.Add(_cityBox);
        panel.Children.Add(new TextBlock { Text = "Latitude:" });
        _latBox = new TextBox { Text = SettingsManager.Settings.WeatherLatitude.ToString() };
        panel.Children.Add(_latBox);
        panel.Children.Add(new TextBlock { Text = "Longitude:" });
        _lonBox = new TextBox { Text = SettingsManager.Settings.WeatherLongitude.ToString() };
        panel.Children.Add(_lonBox);

        var save = new Button { Content = "Save", HorizontalAlignment = HorizontalAlignment.Right };
        save.Click += Save_Click;
        panel.Children.Add(save);

        Content = panel;

        CursorManager.ApplyFromSettings(this, "Plugins");
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(WeatherSettingsWindow));
    }

    private void Save_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        if (double.TryParse(_latBox.Text, out var lat))
            SettingsManager.Settings.WeatherLatitude = lat;
        if (double.TryParse(_lonBox.Text, out var lon))
            SettingsManager.Settings.WeatherLongitude = lon;
        SettingsManager.Settings.WeatherCity = _cityBox.Text ?? string.Empty;
        SettingsManager.Save();
        _onSaved?.Invoke();
        Close();
    }
}



--- FILE: D:\github\newideas\Cycloside\Widgets\BuiltIn\WeatherWidget.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Layout;
using Avalonia.Media;
using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

namespace Cycloside.Widgets.BuiltIn;

public class WeatherWidget : IWidget
{
    public string Name => "Weather";

    public Control BuildView()
    {
        var text = new TextBlock { Foreground = Brushes.White };
        _ = UpdateAsync(text);
        var border = new Border
        {
            Background = Brushes.Black,
            Opacity = 0.7,
            Padding = new Thickness(4),
            Child = text
        };
        border.PointerPressed += (_, e) =>
        {
            if (e.ClickCount == 2)
                new WeatherSettingsWindow(async () => await UpdateAsync(text)).Show();
        };
        return border;
    }

    private async Task UpdateAsync(TextBlock block)
    {
        try
        {
            using var client = new HttpClient();
            var lat = SettingsManager.Settings.WeatherLatitude;
            var lon = SettingsManager.Settings.WeatherLongitude;
            var city = SettingsManager.Settings.WeatherCity;
            if (!string.IsNullOrWhiteSpace(city))
            {
                var geoUrl = $"https://geocoding-api.open-meteo.com/v1/search?name={Uri.EscapeDataString(city)}&count=1";
                var geoJson = await client.GetStringAsync(geoUrl);
                using var geoDoc = JsonDocument.Parse(geoJson);
                if (geoDoc.RootElement.TryGetProperty("results", out var res) && res.GetArrayLength() > 0)
                {
                    var first = res[0];
                    lat = first.GetProperty("latitude").GetDouble();
                    lon = first.GetProperty("longitude").GetDouble();
                }
            }

            var url = $"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true";
            var json = await client.GetStringAsync(url);
            using var doc = JsonDocument.Parse(json);
            var temp = doc.RootElement.GetProperty("current_weather").GetProperty("temperature").GetDouble();
            block.Text = $"Temp: {temp}°C";
        }
        catch
        {
            block.Text = "Weather unavailable";
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\Widgets\IWidget.cs ---

using Avalonia.Controls;

namespace Cycloside.Widgets;

public interface IWidget
{
    string Name { get; }
    Control BuildView();
}



--- FILE: D:\github\newideas\Cycloside\Widgets\WidgetHostWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.Widgets.WidgetHostWindow"
        Width="400" Height="300"
        Title="Widgets">
    <Canvas x:Name="RootCanvas" Background="#66000000" />
</Window>



--- FILE: D:\github\newideas\Cycloside\Widgets\WidgetHostWindow.axaml.cs ---

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using System;

namespace Cycloside.Widgets;

public partial class WidgetHostWindow : Window
{
    public WidgetHostWindow()
    {
        InitializeComponent();
        Topmost = true;
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(WidgetHostWindow));
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public Canvas Root => this.FindControl<Canvas>("RootCanvas")!;

    public IntPtr GetHandle() => this.TryGetPlatformHandle()?.Handle ?? IntPtr.Zero;
}



--- FILE: D:\github\newideas\Cycloside\Widgets\WidgetManager.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Cycloside.Widgets;

public class WidgetManager
{
    private readonly List<IWidget> _widgets = new();
    public IReadOnlyList<IWidget> Widgets => _widgets;

    public void LoadBuiltIn()
    {
        var asm = Assembly.GetExecutingAssembly();
        var types = asm.GetTypes().Where(t => typeof(IWidget).IsAssignableFrom(t) && !t.IsAbstract && !t.IsInterface);
        foreach (var t in types)
        {
            if (Activator.CreateInstance(t) is IWidget w)
                _widgets.Add(w);
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\App.axaml ---

<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="Cycloside.App"
             RequestedThemeVariant="Default">
    <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.Styles>
        <FluentTheme />
    </Application.Styles>

    <!--
      NEW: This is the central resource dictionary for the application.
      It's empty by default.
      Your 'ThemeManager' or 'SkinManager' (in C#) will be responsible for loading 
      the selected skin file (e.g., Mint.axaml) and merging its resources here at runtime.
      This allows resources like 'ApplicationBackgroundBrush' to be found by any window.
    -->
    <Application.Resources>
        <ResourceDictionary>
            <!-- This will be populated by your ThemeManager -->
        </ResourceDictionary>
    </Application.Resources>
    
</Application>



--- FILE: D:\github\newideas\Cycloside\App.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Input;
using Avalonia.Markup.Xaml;
using Avalonia.Platform.Storage;
using Cycloside.Plugins;
using Cycloside.Plugins.BuiltIn;
// Managers and other helpers live in the base Cycloside namespace
using Cycloside.ViewModels;    // For MainWindowViewModel
using Cycloside.Services;
using Cycloside.Views;          // For WizardWindow and MainWindow
using System;
using System.Collections.Generic; // For IReadOnlyList
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;

namespace Cycloside;

public partial class App : Application
{
    private const string TrayIconBase64 = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAGElEQVR4nGNkaGAgCTCRpnxUw6iGoaQBALsfAKDg6Y6zAAAAAElFTkSuQmCC";
    private RemoteApiServer? _remoteServer;

    public override void Initialize()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is not IClassicDesktopStyleApplicationLifetime desktop)
        {
            base.OnFrameworkInitializationCompleted();
            return;
        }

        var settings = SettingsManager.Settings;

        // CRITICAL FIX: Load the global theme right away. This ensures even the
        // wizard is themed correctly.
        ThemeManager.LoadGlobalTheme(settings.GlobalTheme);

        if (settings.FirstRun)
        {
            // Show the wizard and set the main window upon its completion.
            var wiz = new WizardWindow();
            wiz.Closed += (_, _) =>
            {
                desktop.MainWindow = CreateMainWindow(SettingsManager.Settings);
                desktop.MainWindow.Show();
            };
            wiz.Show();
        }
        else
        {
            // Directly create and show the main window.
            desktop.MainWindow = CreateMainWindow(settings);
            desktop.MainWindow.Show();
        }

        base.OnFrameworkInitializationCompleted();
    }

    /// <summary>
    /// NEW: Centralized method to create and configure the main application window.
    /// This is called after the wizard is complete or on a normal startup.
    /// </summary>
    /// <returns>The fully configured MainWindow instance.</returns>
    private MainWindow CreateMainWindow(AppSettings settings)
    {
        // --- Plugin Management ---
        var manager = new PluginManager(Path.Combine(AppContext.BaseDirectory, "Plugins"), msg => Logger.Log(msg));
        var volatileManager = new VolatilePluginManager();
        
        LoadAllPlugins(manager, settings);
        manager.StartWatching();
        
        // --- View & ViewModel Creation ---
        var viewModel = new MainWindowViewModel(manager.Plugins);
        var mainWindow = new MainWindow
        {
            DataContext = viewModel
        };
        
        // Connect ViewModel commands to application logic
        viewModel.ExitCommand = new RelayCommand(() => Shutdown(manager));
        // THIS IS THE MERGED CHANGE: Using EnablePlugin instead of StartPlugin
        viewModel.StartPluginCommand = new RelayCommand(plugin => {
            if(plugin is IPlugin p) manager.EnablePlugin(p);
        });

        // --- Server & Hotkey Setup ---
        _remoteServer = new RemoteApiServer(manager, settings.RemoteApiToken);
        _remoteServer.Start();
        WorkspaceProfiles.Apply(settings.ActiveProfile, manager);
        RegisterHotkeys(manager);
        
        // --- Tray Icon Setup ---
        var trayIcon = new TrayIcon
        {
            Icon = CreateTrayIcon(),
            ToolTipText = "Cycloside",
            Menu = BuildTrayMenu(manager, volatileManager, settings)
        };
        var icons = TrayIcon.GetIcons(this) ?? new TrayIcons();
        TrayIcon.SetIcons(this, icons);
        icons.Add(trayIcon);
        trayIcon.IsVisible = true;
        
        return mainWindow;
    }

    private void LoadAllPlugins(PluginManager manager, AppSettings settings)
    {
        if (settings.DisableBuiltInPlugins) return;

        manager.AddPlugin(new DateTimeOverlayPlugin());
        manager.AddPlugin(new MP3PlayerPlugin());
        manager.AddPlugin(new MacroPlugin());
        manager.AddPlugin(new TextEditorPlugin());
        manager.AddPlugin(new WallpaperPlugin());
        manager.AddPlugin(new ClipboardManagerPlugin());
        manager.AddPlugin(new FileWatcherPlugin());
        manager.AddPlugin(new ProcessMonitorPlugin());
        manager.AddPlugin(new TaskSchedulerPlugin());
        manager.AddPlugin(new DiskUsagePlugin());
        manager.AddPlugin(new LogViewerPlugin());
        manager.AddPlugin(new EnvironmentEditorPlugin());
        manager.AddPlugin(new JezzballPlugin());
        manager.AddPlugin(new WidgetHostPlugin(manager));
        manager.AddPlugin(new WinampVisHostPlugin());
        manager.AddPlugin(new QBasicRetroIDEPlugin());
    }
    
    private void RegisterHotkeys(PluginManager manager)
    {
        HotkeyManager.Register(new KeyGesture(Key.W, KeyModifiers.Control | KeyModifiers.Alt), () =>
        {
            var plugin = manager.Plugins.FirstOrDefault(p => p.Name == "Widget Host");
            if (plugin != null)
            {
                if (manager.IsEnabled(plugin)) manager.DisablePlugin(plugin);
                else manager.EnablePlugin(plugin);
            }
        });
    }
    
    private void Shutdown(PluginManager manager)
    {
        manager.StopAll();
        _remoteServer?.Stop();
        HotkeyManager.UnregisterAll();
        if (Application.Current?.ApplicationLifetime is IClassicDesktopStyleApplicationLifetime appLifetime)
        {
            appLifetime.Shutdown();
        }
    }

    #region Tray Menu and Icon Logic
    
    private NativeMenu BuildTrayMenu(PluginManager manager, VolatilePluginManager volatileManager, AppSettings settings)
    {
        var pluginsMenu = new NativeMenuItem("Plugins") { Menu = new NativeMenu() };
        var newPlugins = manager.Plugins.Where(p => manager.GetStatus(p) != PluginChangeStatus.None).ToList();
        var otherPlugins = manager.Plugins.Except(newPlugins).ToList();

        if (newPlugins.Any())
        {
            var newMenu = new NativeMenuItem("New/Updated") { Menu = new NativeMenu() };
            foreach (var p in newPlugins) newMenu.Menu!.Items.Add(BuildPluginMenuItem(p, manager, settings));
            pluginsMenu.Menu!.Items.Add(newMenu);
            pluginsMenu.Menu!.Items.Add(new NativeMenuItemSeparator());
        }

        foreach (var p in otherPlugins) pluginsMenu.Menu!.Items.Add(BuildPluginMenuItem(p, manager, settings));

        var volatileMenu = new NativeMenuItem("Volatile") { Menu = new NativeMenu() };
        volatileMenu.Menu!.Items.Add(BuildVolatileScriptMenuItem("Run Lua Script...", new FilePickerFileType("Lua Script") { Patterns = new[] { "*.lua" } }, volatileManager.RunLua));
        volatileMenu.Menu!.Items.Add(BuildVolatileScriptMenuItem("Run C# Script...", new FilePickerFileType("C# Script") { Patterns = new[] { "*.csx" } }, volatileManager.RunCSharp));
        volatileMenu.Menu!.Items.Add(new NativeMenuItemSeparator());
        var inlineItem = new NativeMenuItem("Run Inline...");
        inlineItem.Click += (_, _) => new VolatileRunnerWindow(volatileManager).Show();
        volatileMenu.Menu!.Items.Add(inlineItem);

        return new NativeMenu
        {
            Items =
            {
                new NativeMenuItem("Settings") { Menu = new NativeMenu { Items = {
                    new NativeMenuItem("Plugin Manager...") { Command = new RelayCommand(() => new PluginSettingsWindow(manager).Show()) },
                    new NativeMenuItem("Generate New Plugin...") { Command = new RelayCommand(() => new PluginDevWizard().Show()) },
                    new NativeMenuItem("Theme Settings...") { Command = new RelayCommand(() => new ThemeSettingsWindow().Show()) },
                    new NativeMenuItem("Skin/Theme Editor...") { Command = new RelayCommand(() => new SkinThemeEditorWindow().Show()) },
                    new NativeMenuItem("Workspace Profiles...") { Command = new RelayCommand(() => new ProfileEditorWindow(manager).Show()) },
                    new NativeMenuItem("Runtime Settings...") { Command = new RelayCommand(() => new RuntimeSettingsWindow(manager).Show()) }
                }}},
                new NativeMenuItemSeparator(),
                new NativeMenuItem("Launch at Startup") { IsChecked = settings.LaunchAtStartup, ToggleType = NativeMenuItemToggleType.CheckBox, Command = new RelayCommand(o => {
                    var item = (NativeMenuItem)o!;
                    settings.LaunchAtStartup = !settings.LaunchAtStartup;
                    if (settings.LaunchAtStartup) StartupManager.Enable(); else StartupManager.Disable();
                    SettingsManager.Save();
                    item.IsChecked = settings.LaunchAtStartup;
                })},
                new NativeMenuItemSeparator(),
                pluginsMenu,
                volatileMenu,
                new NativeMenuItem("Open Plugins Folder") { Command = new RelayCommand(() => {
                    try { System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo { FileName = manager.PluginDirectory, UseShellExecute = true }); } 
                    catch (Exception ex) { Logger.Log($"Failed to open plugin folder: {ex.Message}"); }
                })},
                new NativeMenuItemSeparator(),
                new NativeMenuItem("Exit") { Command = new RelayCommand(() => Shutdown(manager)) }
            }
        };
    }
    
    private NativeMenuItem BuildPluginMenuItem(IPlugin plugin, PluginManager manager, AppSettings settings)
    {
        var status = manager.GetStatus(plugin);
        string label = plugin.Name + status switch
        {
            PluginChangeStatus.New => " (NEW)",
            PluginChangeStatus.Updated => " (UPDATED)",
            _ => ""
        };

        var menuItem = new NativeMenuItem(label)
        {
            ToggleType = NativeMenuItemToggleType.CheckBox,
            IsChecked = settings.PluginEnabled.TryGetValue(plugin.Name, out var isEnabled) ? isEnabled : true
        };

        if (menuItem.IsChecked && !manager.IsEnabled(plugin)) manager.EnablePlugin(plugin);
        else if (!menuItem.IsChecked && manager.IsEnabled(plugin)) manager.DisablePlugin(plugin);

        menuItem.Command = new RelayCommand(o =>
        {
            if (manager.IsEnabled(plugin)) manager.DisablePlugin(plugin);
            else manager.EnablePlugin(plugin);
            
            menuItem.IsChecked = manager.IsEnabled(plugin);
            settings.PluginEnabled[plugin.Name] = menuItem.IsChecked;
            SettingsManager.Save();
        });

        return menuItem;
    }

    private NativeMenuItem BuildVolatileScriptMenuItem(string title, FilePickerFileType filter, Action<string> scriptRunner)
    {
        var menuItem = new NativeMenuItem(title);
        menuItem.Click += async (_, _) =>
        {
            var window = new Window();
            var files = await window.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
            {
                AllowMultiple = false,
                FileTypeFilter = new[] { filter }
            });

            if (files.FirstOrDefault() is { } file)
            {
                try
                {
                    await using var stream = await file.OpenReadAsync();
                    using var reader = new StreamReader(stream);
                    var code = await reader.ReadToEndAsync();
                    scriptRunner(code);
                }
                catch (Exception ex) { Logger.Log($"Failed to run volatile script {file.Name}: {ex.Message}"); }
            }
        };
        return menuItem;
    }

    private static WindowIcon CreateTrayIcon()
    {
        if (OperatingSystem.IsWindows())
        {
            try
            {
                var systemDir = Environment.GetFolderPath(Environment.SpecialFolder.System);
                var icon = ExtractIconFromDll(Path.Combine(systemDir, "imageres.dll"), 25) ??
                           ExtractIconFromDll(Path.Combine(systemDir, "shell32.dll"), 8);
                if (icon != null)
                {
                    using var stream = new MemoryStream();
                    #pragma warning disable CA1416
                    icon.Save(stream);
                    #pragma warning restore CA1416
                    stream.Position = 0;
                    return new WindowIcon(stream);
                }
            }
            catch (Exception ex) { Logger.Log($"Failed to extract system icon: {ex.Message}"); }
        }
        var bytes = Convert.FromBase64String(TrayIconBase64);
        return new WindowIcon(new MemoryStream(bytes));
    }

    [SupportedOSPlatform("windows")]
    private static Icon? ExtractIconFromDll(string path, int index)
    {
        IntPtr hIcon = ExtractIcon(IntPtr.Zero, path, index);
        if (hIcon == IntPtr.Zero) return null;
        try
        {
            var icon = (Icon)Icon.FromHandle(hIcon).Clone();
            return icon;
        }
        finally
        {
            DestroyIcon(hIcon);
        }
    }

    [DllImport("shell32.dll", CharSet = CharSet.Auto)]
    private static extern IntPtr ExtractIcon(IntPtr hInst, string lpszExeFileName, int nIconIndex);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool DestroyIcon(IntPtr handle);
    
    private class RelayCommand : System.Windows.Input.ICommand
    {
        private readonly Action<object?> _execute;
        public event EventHandler? CanExecuteChanged { add {} remove {} }
        public RelayCommand(Action<object?> execute) => _execute = execute;
        public RelayCommand(Action execute) : this(_ => execute()) {}
        public bool CanExecute(object? parameter) => true;
        public void Execute(object? parameter) => _execute(parameter);
    }
    #endregion
}


--- FILE: D:\github\newideas\Cycloside\CursorManager.cs ---

using Avalonia;
using Avalonia.Input;
using Avalonia.Styling;
using System;

namespace Cycloside;

public static class CursorManager
{
    public static void ApplyCursor(InputElement element, string cursorName)
    {
        if (Enum.TryParse<StandardCursorType>(cursorName, true, out var type))
            element.Cursor = new Cursor(type);
    }

    public static void ApplyFromSettings(InputElement element, string component)
    {
        var map = SettingsManager.Settings.ComponentCursors;
        if (map != null && map.TryGetValue(component, out var cursorName))
            ApplyCursor(element, cursorName);
    }
}




--- FILE: D:\github\newideas\Cycloside\Cycloside.csproj ---

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.1" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.1" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.1" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.1" />
    <PackageReference Include="NAudio" Version="2.2.1" />
    <PackageReference Include="MoonSharp" Version="2.0.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.9.2" />
    <!-- Use the Avalonia.AvaloniaEdit package for text editing controls -->
    <PackageReference Include="Avalonia.AvaloniaEdit" Version="11.3.0" />
    <PackageReference Include="Avalonia.Controls.DataGrid" Version="11.3.1" />
    <PackageReference Include="Avalonia.Markup.Xaml.Loader" Version="11.3.1" />
    <PackageReference Include="CliWrap" Version="3.7.0" /> <!-- prefer latest -->
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.1">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="SharpHook" Version="5.0.0" />
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.0" />
    <PackageReference Include="System.Drawing.Common" Version="8.0.0" />
  </ItemGroup>

  <!-- Exclude built-in plugins to simplify build in this environment -->
  <!--
  <ItemGroup>
    <Compile Remove="Plugins/BuiltIn/**" />
  </ItemGroup>
  -->

</Project>



--- FILE: D:\github\newideas\Cycloside\GlobalUsings.cs ---

global using Cycloside.Effects;
global using Avalonia;
global using Avalonia.Controls;
global using Avalonia.Controls.Primitives;



--- FILE: D:\github\newideas\Cycloside\HotkeyManager.cs ---

using System;
using System.Collections.Generic;
using Avalonia.Input;
using Cycloside.Hotkeys;

namespace Cycloside;

/// <summary>
/// Cross-platform hotkey registration based on Avalonia.Controls.HotKeys.
/// </summary>
public static class HotkeyManager
{
    private static readonly MacGlobalHotkeyManager? _macManager;
    private static readonly Dictionary<KeyGesture, Action> _macCallbacks = new();
    private static readonly SharpGlobalHotkeyManager? _sharpManager;
    private static readonly Dictionary<KeyGesture, Action> _callbacks = new();

    static HotkeyManager()
    {
        if (OperatingSystem.IsMacOS())
        {
            _macManager = new MacGlobalHotkeyManager();
            _macManager.HotKeyPressed += gesture =>
            {
                if (_callbacks.TryGetValue(gesture, out var cb))
                {
                    try { cb(); } catch (Exception ex) { Logger.Log($"Hotkey error: {ex.Message}"); }
                }
            };
        }
        else if (OperatingSystem.IsWindows() || OperatingSystem.IsLinux())
        {
            // Hotkeys are not currently supported on other platforms
            _sharpManager = new SharpGlobalHotkeyManager();
            _sharpManager.HotKeyPressed += gesture =>
            {
                if (_callbacks.TryGetValue(gesture, out var cb))
                {
                    try { cb(); } catch (Exception ex) { Logger.Log($"Hotkey error: {ex.Message}"); }
                }
            };
        }
    }

    /// <summary>
    /// Registers a global hotkey.
    /// </summary>
    public static void Register(KeyGesture gesture, Action callback)
    {
        _callbacks[gesture] = callback;
        if (OperatingSystem.IsMacOS())
        {
            _macManager?.Register(gesture);
        }
        else if (OperatingSystem.IsWindows() || OperatingSystem.IsLinux())
        {
            // Hotkeys not supported on this platform
            _sharpManager?.Register(gesture);
        }
    }

    /// <summary>
    /// Unregisters all registered hotkeys.
    /// </summary>
    public static void UnregisterAll()
    {
        if (OperatingSystem.IsMacOS())
        {
            _macManager?.UnregisterAll();
        }
        else if (OperatingSystem.IsWindows() || OperatingSystem.IsLinux())
        {
            _sharpManager?.UnregisterAll();
        }

        _callbacks.Clear();
    }
}



--- FILE: D:\github\newideas\Cycloside\Logger.cs ---

using System;
using System.IO;

namespace Cycloside;

public static class Logger
{
    private static readonly object _lock = new();
    private static string LogDir => Path.Combine(AppContext.BaseDirectory, "logs");
    private static string LogFile => Path.Combine(LogDir, "app.log");

    public static void Log(string message)
    {
        Directory.CreateDirectory(LogDir);
        lock (_lock)
        {
            if (File.Exists(LogFile) && new FileInfo(LogFile).Length > 1_000_000)
            {
                var backup = LogFile + ".1";
                if (File.Exists(backup))
                    File.Delete(backup);
                File.Move(LogFile, backup);
            }
            File.AppendAllText(LogFile, $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} {message}\n");
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\MacroManager.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace Cycloside;

public class Macro
{
    public string Name { get; set; } = "";
    public List<string> Keys { get; set; } = new();
}

public static class MacroManager
{
    private static readonly string MacroPath = Path.Combine(AppContext.BaseDirectory, "macros.json");
    private static List<Macro> _macros = Load();

    public static IReadOnlyList<Macro> Macros => _macros;

    private static List<Macro> Load()
    {
        try
        {
            if (File.Exists(MacroPath))
            {
                var json = File.ReadAllText(MacroPath);
                var list = JsonSerializer.Deserialize<List<Macro>>(json);
                if (list != null)
                    return list;
            }
        }
        catch { }
        return new List<Macro>();
    }

    public static void Reload()
    {
        _macros = Load();
    }

    public static void Save()
    {
        try
        {
            var json = JsonSerializer.Serialize(_macros, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(MacroPath, json);
        }
        catch { }
    }

    public static void Add(Macro macro)
    {
        _macros.Add(macro);
        Save();
    }

    public static void Remove(Macro macro)
    {
        _macros.Remove(macro);
        Save();
    }
}



--- FILE: D:\github\newideas\Cycloside\MainWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:Cycloside.ViewModels"
        xmlns:p="clr-namespace:Cycloside.Plugins"
        mc:Ignorable="d" d:DesignWidth="1280" d:DesignHeight="720"
        x:Class="Cycloside.MainWindow"
        x:Name="RootWindow"
        x:DataType="vm:MainWindowViewModel"
        Title="Cycloside"
        WindowStartupLocation="CenterScreen"
        Background="{DynamicResource ApplicationBackgroundBrush}">

    <!--
      The main window uses a DockPanel to structure the core UI elements:
      - A Menu is docked to the top.
      - A status bar could be docked to the bottom.
      - The main content area fills the rest of the space.
    -->
    <DockPanel>

        <!-- === Top Menu Bar === -->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <!-- The Exit command will be handled by the ViewModel -->
                <MenuItem Header="E_xit" Command="{Binding ExitCommand}" />
            </MenuItem>
            <MenuItem Header="_Plugins">
                <!-- 
                  This is the dynamic menu for your plugins.
                  It binds to an "AvailablePlugins" collection in the ViewModel.
                  For each plugin, it creates a new menu item.
                -->
                <ItemsControl ItemsSource="{Binding AvailablePlugins}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate x:DataType="p:IPlugin">
                            <MenuItem Header="{Binding Name}"
                                      Command="{Binding DataContext.StartPluginCommand, ElementName=RootWindow}"
                                      CommandParameter="{Binding}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </MenuItem>
        </Menu>

        <!-- === Main Content Area === -->
        <!-- 
          This Canvas acts as the "desktop" or "workspace" for your application.
          Plugins like the Widget Host will add their UI elements here.
          The background is a subtle radial gradient for visual appeal.
        -->
        <Canvas Name="DesktopCanvas">
            <Canvas.Background>
                <RadialGradientBrush Center="50%,50%" GradientOrigin="50%,50%" Radius="0.7">
                    <GradientStop Color="{DynamicResource ThemeAccentColor4}" Offset="0" />
                    <GradientStop Color="{DynamicResource ThemeBackgroundColor}" Offset="1" />
                </RadialGradientBrush>
            </Canvas.Background>
        </Canvas>

    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\MainWindow.axaml.cs ---

using Avalonia.Controls;

namespace Cycloside;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(MainWindow));
    }
}



--- FILE: D:\github\newideas\Cycloside\PluginBus.cs ---

using System;
using System.Collections.Generic;

namespace Cycloside;

public static class PluginBus
{
    private static readonly Dictionary<string,List<Action<object?>>> _subs = new();

    public static void Subscribe(string topic, Action<object?> handler)
    {
        lock(_subs)
        {
            if(!_subs.TryGetValue(topic, out var list))
            {
                list = new();
                _subs[topic] = list;
            }
            list.Add(handler);
        }
    }

    public static void Unsubscribe(string topic, Action<object?> handler)
    {
        lock(_subs)
        {
            if(_subs.TryGetValue(topic, out var list))
            {
                list.RemoveAll(h => h == handler);
                if(list.Count == 0)
                    _subs.Remove(topic);
            }
        }
    }

    public static void Publish(string topic, object? payload = null)
    {
        List<Action<object?>>? list = null;
        lock(_subs)
            _subs.TryGetValue(topic, out list);
        if(list == null) return;
        foreach(var h in list.ToArray())
        {
            try { h(payload); } catch(Exception ex) { Logger.Log($"Bus handler error: {ex.Message}"); }
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\PluginDevWizard.cs ---

using Avalonia;
using Avalonia.Controls;
using System;
using System.IO;
using Cycloside.Services;

namespace Cycloside;

public class PluginDevWizard : Window
{
    private TextBox? _nameBox;
    private ComboBox? _typeBox;

    public PluginDevWizard()
    {
        CursorManager.ApplyFromSettings(this, "Plugins");
        BuildUI();
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(PluginDevWizard));
    }

    private void BuildUI()
    {
        Width = 300;
        Height = 150;
        Title = "Generate Plugin";

        var panel = new StackPanel { Margin = new Thickness(10) };
        _nameBox = new TextBox { Watermark = "Plugin Name" };
        _typeBox = new ComboBox { SelectedIndex = 0 };
        _typeBox.Items.Clear();
        _typeBox.Items.Add("Basic DLL");
        _typeBox.Items.Add("Lua volatile");
        _typeBox.Items.Add("C# volatile");

        var create = new Button { Content = "Create", Margin = new Thickness(0,10,0,0) };
        create.Click += Create_Click;
        panel.Children.Add(_nameBox);
        panel.Children.Add(_typeBox);
        panel.Children.Add(create);
        Content = panel;
    }

    private void Create_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        if (_nameBox == null || _typeBox == null) return;
        var name = _nameBox.Text?.Trim();
        if (string.IsNullOrWhiteSpace(name)) return;

        var dir = Path.Combine(AppContext.BaseDirectory, "Plugins");
        Directory.CreateDirectory(dir);

        switch (_typeBox.SelectedIndex)
        {
            case 0:
                Program.GeneratePluginTemplate(name);
                break;
            case 1:
                File.WriteAllText(Path.Combine(dir, $"{name}.lua"), "print(\"Lua says hi!\")\nreturn os.date()");
                break;
            default:
                File.WriteAllText(Path.Combine(dir, $"{name}.csx"), "namespace Script { public static class Main { public static string Run() => \"RAM-only C# says hi!\"; } }");
                break;
        }

        Close();
    }
}



--- FILE: D:\github\newideas\Cycloside\PluginMarketplace.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text.Json;
using System.Threading.Tasks;

namespace Cycloside;

public class MarketplacePlugin
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string Version { get; set; } = string.Empty;
    public string Url { get; set; } = string.Empty;
    public string Hash { get; set; } = string.Empty;
}

public static class PluginMarketplace
{
    public static async Task<List<MarketplacePlugin>> FetchAsync(string url)
    {
        try
        {
            using var client = new HttpClient();
            var json = await client.GetStringAsync(url);
            var list = JsonSerializer.Deserialize<List<MarketplacePlugin>>(json);
            return list ?? new();
        }
        catch (Exception ex)
        {
            Logger.Log($"Marketplace fetch failed: {ex.Message}");
            return new();
        }
    }

    public static async Task<bool> InstallAsync(MarketplacePlugin plugin, string pluginDirectory)
    {
        try
        {
            using var client = new HttpClient();
            var data = await client.GetByteArrayAsync(plugin.Url);
            var hash = Convert.ToHexString(SHA256.HashData(data));
            if (!hash.Equals(plugin.Hash, StringComparison.OrdinalIgnoreCase))
                return false;

            if (!Directory.Exists(pluginDirectory))
                Directory.CreateDirectory(pluginDirectory);

            var fileName = Path.GetFileName(new Uri(plugin.Url).LocalPath);
            var path = Path.Combine(pluginDirectory, fileName);
            await File.WriteAllBytesAsync(path, data);
            return true;
        }
        catch (Exception ex)
        {
            Logger.Log($"Plugin install failed for {plugin.Name}: {ex.Message}");
            return false;
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\PluginSettingsWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.PluginSettingsWindow"
        Width="400" Height="300"
        Title="Plugin Manager">
    <DockPanel>
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Right" Margin="0,0,0,4">
            <Button Content="Reload" Click="ReloadButton_Click" Margin="0,0,4,0"/>
            <Button Content="Open Folder" Click="OpenButton_Click"/>
        </StackPanel>
        <ScrollViewer>
            <StackPanel x:Name="PluginsPanel" />
        </ScrollViewer>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\PluginSettingsWindow.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;
using Cycloside.Plugins;
using Avalonia.Media;
using System.Linq;
using System;
using System.Diagnostics;
using Cycloside.Services;

namespace Cycloside;

public partial class PluginSettingsWindow : Window
{
    private readonly PluginManager _manager;

    public PluginSettingsWindow()
    {
        InitializeComponent();
        _manager = null!;
    }

    public PluginSettingsWindow(PluginManager manager)
    {
        _manager = manager;
        InitializeComponent();

        CursorManager.ApplyFromSettings(this, "Plugins");
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(PluginSettingsWindow));

        BuildList();
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    private void BuildList()
    {
        var panel = this.FindControl<StackPanel>("PluginsPanel");
        if (panel is null)
            return;
        panel.Children.Clear();

        void AddPluginItem(IPlugin plugin)
        {
            var status = _manager.GetStatus(plugin);
            var label = plugin.Name;
            if (status == Plugins.PluginChangeStatus.New) label += " (NEW)";
            else if (status == Plugins.PluginChangeStatus.Updated) label += " (UPDATED)";

            var cb = new CheckBox
            {
                Content = label + (plugin.Description != null ? $" - {plugin.Description}" : "") +
                          (!string.IsNullOrEmpty(plugin.Version?.ToString()) ? $" ({plugin.Version})" : ""),
                Margin = new Thickness(0, 0, 0, 4),
                IsChecked = _manager.IsEnabled(plugin),
                Tag = plugin
            };
            cb.IsCheckedChanged += Toggle;
            panel.Children.Add(cb);
        }

        var newPlugins = _manager.Plugins.Where(p => _manager.GetStatus(p) != Plugins.PluginChangeStatus.None).ToList();
        if (newPlugins.Count > 0)
        {
            panel.Children.Add(new TextBlock { Text = "New or Updated", FontWeight = FontWeight.Bold, Margin = new Thickness(0,0,0,4) });
            foreach (var p in newPlugins)
                AddPluginItem(p);
            panel.Children.Add(new Separator { Margin = new Thickness(0,4,0,4) });
        }

        foreach (var plugin in _manager.Plugins.Except(newPlugins))
        {
            AddPluginItem(plugin);
        }
    }

    // Handles checkbox toggle
    private void Toggle(object? sender, RoutedEventArgs e)
    {
        if (sender is not CheckBox cb || cb.Tag is not IPlugin plugin)
            return;

        if (cb.IsChecked == true)
            _manager.EnablePlugin(plugin);
        else
            _manager.DisablePlugin(plugin);

        SettingsManager.Settings.PluginEnabled[plugin.Name] = cb.IsChecked == true;
        SettingsManager.Save();
    }

    private void ReloadButton_Click(object? sender, RoutedEventArgs e)
    {
        _manager.ReloadPlugins();
        BuildList();
    }

    private void OpenButton_Click(object? sender, RoutedEventArgs e)
    {
        var path = _manager.PluginDirectory;
        try
        {
            Process.Start(new ProcessStartInfo
            {
                FileName = path,
                UseShellExecute = true
            });
        }
        catch { }
    }
}



--- FILE: D:\github\newideas\Cycloside\ProfileEditorWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.ProfileEditorWindow"
        Width="500" Height="350"
        Title="Workspace Profiles">
    <DockPanel Margin="10" LastChildFill="True">
        <StackPanel Width="150" DockPanel.Dock="Left" Margin="0,0,8,0">
            <ListBox x:Name="ProfileList" Height="200"/>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,4,0,0">
                <Button Content="Add" Width="50" Click="AddProfile" Margin="0,0,4,0"/>
                <Button Content="Remove" Width="70" Click="RemoveProfile"/>
            </StackPanel>
        </StackPanel>
        <ScrollViewer>
            <StackPanel x:Name="EditorPanel" Spacing="4">
                <TextBox x:Name="NameBox" Watermark="Profile Name"/>
                <StackPanel Orientation="Horizontal" Spacing="4">
                    <TextBox x:Name="WallpaperBox" Width="250"/>
                    <Button Content="Browse..." Click="BrowseWallpaper"/>
                </StackPanel>
                <TextBlock Text="Plugins:" Margin="0,6,0,0"/>
                <StackPanel x:Name="PluginPanel"/>
                <Button Content="Save" HorizontalAlignment="Right" Margin="0,8,0,0" Click="SaveProfile"/>
            </StackPanel>
        </ScrollViewer>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\ProfileEditorWindow.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;
using Avalonia.Platform.Storage;
using Cycloside.Plugins;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Cycloside.Services;

namespace Cycloside
{
    public partial class ProfileEditorWindow : Window
    {
        private readonly PluginManager _manager;
        private string _originalName = string.Empty;

        // UI Control references for convenience
        private ListBox? _profileList;
        private TextBox? _nameBox;
        private TextBox? _wallpaperBox;
        private StackPanel? _pluginPanel;
        private TextBlock? _statusBlock;

        // Default constructor is required for the XAML previewer, but should not be used in production.
        public ProfileEditorWindow()
        {
            InitializeComponent();
            // This will cause a crash if used at runtime, which is a good signal
            // that the parameterized constructor is required.
            _manager = null!;
        }

        public ProfileEditorWindow(PluginManager manager)
        {
            _manager = manager ?? throw new ArgumentNullException(nameof(manager));

            InitializeComponent();

            // Apply effects
            CursorManager.ApplyFromSettings(this, "Plugins");
            WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(ProfileEditorWindow));

            // Build the dynamic UI parts
            BuildProfileList();
            BuildPluginList();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
            // Find controls once after the UI is loaded
            _profileList = this.FindControl<ListBox>("ProfileList");
            _nameBox = this.FindControl<TextBox>("NameBox");
            _wallpaperBox = this.FindControl<TextBox>("WallpaperBox");
            _pluginPanel = this.FindControl<StackPanel>("PluginPanel");
            _statusBlock = this.FindControl<TextBlock>("StatusBlock");
        }

        private void BuildProfileList()
        {
            if (_profileList == null) return;

            // Store the currently selected item to restore it after rebuilding the list
            var previouslySelected = _profileList.SelectedItem as string;

            _profileList.ItemsSource = WorkspaceProfiles.Profiles.Keys.OrderBy(name => name).ToList();
            _profileList.SelectionChanged -= OnProfileSelectionChanged; // Prevent event firing during update
            _profileList.SelectionChanged += OnProfileSelectionChanged;

            if (previouslySelected != null && (_profileList.ItemsSource as List<string>)!.Contains(previouslySelected))
            {
                _profileList.SelectedItem = previouslySelected;
            }
            else if (_profileList.Items.Count > 0)
            {
                _profileList.SelectedIndex = 0;
            }
            else
            {
                // No profiles, clear the form
                ClearForm();
            }
        }

        private void BuildPluginList()
        {
            if (_pluginPanel == null) return;

            _pluginPanel.Children.Clear();
            foreach (var plugin in _manager.Plugins.OrderBy(p => p.Name))
            {
                _pluginPanel.Children.Add(new CheckBox
                {
                    Content = plugin.Name,
                    Tag = plugin
                });
            }
        }

        private void OnProfileSelectionChanged(object? sender, SelectionChangedEventArgs e)
        {
            LoadSelectedProfile();
        }

        private void LoadSelectedProfile()
        {
            if (_profileList?.SelectedItem is not string name || !WorkspaceProfiles.Profiles.TryGetValue(name, out var profile))
            {
                ClearForm();
                return;
            }

            _originalName = name;

            if (_nameBox != null) _nameBox.Text = profile.Name;
            if (_wallpaperBox != null) _wallpaperBox.Text = profile.Wallpaper;
            if (_pluginPanel != null)
            {
                foreach (var child in _pluginPanel.Children.OfType<CheckBox>())
                {
                    if (child.Tag is IPlugin p)
                    {
                        child.IsChecked = profile.Plugins.TryGetValue(p.Name, out var isEnabled) && isEnabled;
                    }
                }
            }
            SetStatus($"Loaded profile: {name}");
        }

        private void ClearForm()
        {
            _originalName = string.Empty;
            if (_nameBox != null) _nameBox.Text = string.Empty;
            if (_wallpaperBox != null) _wallpaperBox.Text = string.Empty;
            if (_pluginPanel != null)
            {
                foreach (var child in _pluginPanel.Children.OfType<CheckBox>())
                {
                    child.IsChecked = false;
                }
            }
        }

        private void AddProfile(object? sender, RoutedEventArgs e)
        {
            try
            {
                var baseName = "NewProfile";
                var newName = baseName;
                var index = 1;
                while (WorkspaceProfiles.Profiles.ContainsKey(newName))
                {
                    newName = $"{baseName}{index++}";
                }

                WorkspaceProfiles.AddOrUpdate(new WorkspaceProfile { Name = newName });
                BuildProfileList();
                if (_profileList != null) _profileList.SelectedItem = newName;
                SetStatus($"Added new profile: {newName}");
            }
            catch (Exception ex)
            {
                SetStatus($"Error adding profile: {ex.Message}");
            }
        }

        private async void RemoveProfile(object? sender, RoutedEventArgs e)
        {
            if (_profileList?.SelectedItem is not string name) return;

            // Add a confirmation dialog for safety
            var confirmWindow = new ConfirmationWindow("Delete Profile", $"Are you sure you want to delete the profile '{name}'?");
            var result = await confirmWindow.ShowDialog<bool>(this);

            if (result)
            {
                WorkspaceProfiles.Remove(name);
                BuildProfileList();
                SetStatus($"Removed profile: {name}");
            }
        }

        private async void BrowseWallpaper(object? sender, RoutedEventArgs e)
        {
            try
            {
                var result = await StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions
                {
                    Title = "Select Wallpaper Image",
                    FileTypeFilter = new[] { new FilePickerFileType("Images") { Patterns = new[] { "*.png", "*.jpg", "*.jpeg", "*.bmp" } } }
                });

                if (result.FirstOrDefault()?.TryGetLocalPath() is { } path && _wallpaperBox != null)
                {
                    _wallpaperBox.Text = path;
                }
            }
            catch (Exception ex)
            {
                SetStatus($"Error Browse for wallpaper: {ex.Message}");
            }
        }

        private void SaveProfile(object? sender, RoutedEventArgs e)
        {
            var name = _nameBox?.Text?.Trim();
            if (string.IsNullOrWhiteSpace(name))
            {
                SetStatus("Error: Profile name cannot be empty.");
                return;
            }

            // If the name is being changed, check if the new name already exists
            if (_originalName != name && WorkspaceProfiles.Profiles.ContainsKey(name))
            {
                SetStatus($"Error: A profile named '{name}' already exists.");
                return;
            }

            var wallpaper = _wallpaperBox?.Text ?? string.Empty;
            var pluginMap = new Dictionary<string, bool>();
            if (_pluginPanel != null)
            {
                foreach (var child in _pluginPanel.Children.OfType<CheckBox>())
                {
                    if (child.Tag is IPlugin p && child.IsChecked == true)
                    {
                        pluginMap[p.Name] = true;
                    }
                }
            }

            var profile = new WorkspaceProfile
            {
                Name = name,
                Wallpaper = wallpaper,
                Plugins = pluginMap
            };

            // If renaming, remove the old profile first
            if (!string.IsNullOrEmpty(_originalName) && _originalName != name)
            {
                WorkspaceProfiles.Remove(_originalName);
            }

            WorkspaceProfiles.AddOrUpdate(profile);
            BuildProfileList(); // Rebuild list to reflect changes (e.g., sorting)

            // Ensure the newly saved profile is selected
            if (_profileList != null) _profileList.SelectedItem = name;

            SetStatus($"Profile '{name}' saved successfully.");
        }

        private void SetStatus(string message)
        {
            if (_statusBlock == null) return;
            Avalonia.Threading.Dispatcher.UIThread.InvokeAsync(() => _statusBlock.Text = message);
        }
    }

    /// <summary>
    /// A simple reusable confirmation window.
    /// </summary>
    public class ConfirmationWindow : Window
    {
        public ConfirmationWindow(string title, string message)
        {
            Title = title;
            Width = 350;
            SizeToContent = SizeToContent.Height;
            WindowStartupLocation = WindowStartupLocation.CenterOwner;

            var messageBlock = new TextBlock { Text = message, Margin = new Thickness(15), TextWrapping = Avalonia.Media.TextWrapping.Wrap };

            var yesButton = new Button { Content = "Yes", IsDefault = true, Margin = new Thickness(5) };
            yesButton.Click += (_, _) => Close(true);

            var noButton = new Button { Content = "No", IsCancel = true, Margin = new Thickness(5) };
            noButton.Click += (_, _) => Close(false);

            var buttonPanel = new StackPanel { Orientation = Avalonia.Layout.Orientation.Horizontal, HorizontalAlignment = Avalonia.Layout.HorizontalAlignment.Center };
            buttonPanel.Children.Add(yesButton);
buttonPanel.Children.Add(noButton);

            var mainPanel = new StackPanel { Spacing = 10 };
            mainPanel.Children.Add(messageBlock);
            mainPanel.Children.Add(buttonPanel);

            Content = mainPanel;
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\Program.cs ---

using Avalonia;
using System;
using System.IO;

namespace Cycloside;

class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized yet and stuff might break.
    [STAThread]
    public static void Main(string[] args)
    {
        if (args.Length == 2 && args[0] == "--newplugin")
        {
            GeneratePluginTemplate(args[1]);
            return;
        }

        AppDomain.CurrentDomain.UnhandledException += (_, e) =>
        {
            if (e.ExceptionObject is Exception ex)
                Logger.Log($"Unhandled: {ex}");
        };
        System.Threading.Tasks.TaskScheduler.UnobservedTaskException += (_, e) =>
        {
            Logger.Log($"Unobserved: {e.Exception}");
        };

        BuildAvaloniaApp().StartWithClassicDesktopLifetime(args);
    }

    internal static void GeneratePluginTemplate(string name)
    {
        var dir = Path.Combine("Plugins", name);
        Directory.CreateDirectory(dir);

        var path = Path.Combine(dir, $"{name}.cs");
        if (File.Exists(path))
            return;

        var content = $@"using Cycloside.Plugins;

public class {name} : IPlugin
{{
    public string Name => ""{name}"";
    public string Description => ""Describe your plugin."";
    public Version Version => new(1, 0, 0);

    public void Start()
    {{
        // Plugin startup logic here
    }}

    public void Stop()
    {{
        // Plugin shutdown logic here
    }}
}}";

        File.WriteAllText(path, content);
    }

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .WithInterFont()
            .LogToTrace();
}



--- FILE: D:\github\newideas\Cycloside\README.md ---

# Cycloside

Cycloside lets you pin tiny, useful tools and visualizations right onto your desktop without the bloat of a full-blown shell replacement. Built with Avalonia, it's cross-platform by design and aims to stay fast and friendly for plugin developers.
Cycloside is a background tray application built with Avalonia. It supports a simple plugin system that loads `*.dll` files from the `Plugins` folder at runtime. The tray menu exposes built‑in modules and any external plugins you drop into that directory. Hot reload is provided via file watching so there is no need to restart the app when you update a plugin.

The tray icon image is embedded as a base64 string to keep the repository free of binary assets.

## ✅ Running

```bash
cd Cycloside
dotnet run
```

## 🔌 Plugins

Drop any assemblies implementing `Cycloside.Plugins.IPlugin` into the `Plugins` directory and they will be loaded automatically. The tray menu includes a **Plugins** submenu to toggle modules on or off.

Built-in examples:
- **Date/Time Overlay** – always-on-top clock overlay
- **MP3 Player** – choose songs and control playback with a widget
- **Macro Engine** – record and replay simple keyboard macros
- **Text Editor** – small editor for notes or Markdown
- **Wallpaper Changer** – set wallpapers on Windows, Linux or macOS
- **Widget Host** – surface plugins as dockable widgets
- **Winamp Visual Host** – run classic Winamp visualizer DLLs

## 🗂️ Workspace Profiles

Save wallpaper choices and plugin states into named profiles. You can
switch between profiles from the tray menu or bind them to global
hotkeys for quick swaps when changing tasks.

## 🧨 Volatile Scripts

The **Volatile** tray submenu lets you run Lua or C# scripts from memory. Choose **Run Lua Script...** or **Run C# Script...** and select a `.lua` or `.csx` file. Execution uses MoonSharp or Roslyn and logs results automatically.

## ⚙️ Settings and Auto-start

Stored in `settings.json`. Toggle **Launch at Startup** to register/unregister at boot:
- Uses registry (Windows)
- Adds `cycloside.desktop` to `~/.config/autostart` (Linux)
- Writes a LaunchAgents plist for `launchctl` (macOS)

## 🪵 Logging

Logs rotate in the `logs/` folder after 1 MB. Plugin crashes are logged and trigger a tray notification.
When isolation is enabled, crashes won't take down the entire app and are simply logged.

## 🧰 Plugin Template Generator

Run `dotnet run -- --newplugin MyPlugin` to create a boilerplate class, or use **Settings → Generate New Plugin** from the tray menu.

## 📣 Plugin Bus and Remote API

Plugins can talk to each other through a simple publish/subscribe bus. You can
also POST events to `http://localhost:4123/trigger` to control plugins from
other tools or scripts. Include your pre‑shared token via the `X-Api-Token`
header or `?token=` query string or the request will be rejected with a 401.

## ⌨️ Global Hotkeys

Cycloside registers system-wide shortcuts using Avalonia's hotkey framework.
On macOS a small Swift helper hooks into `NSEvent` so hotkeys fire even when
the application is unfocused. Press **Ctrl+Alt+W** at any time to summon the
widget host. Profiles and other features can be wired up to custom hotkeys.
The helper source lives in `Hotkeys/HotkeyMonitor.swift` and should be built as
`libHotkeyMonitor.dylib` placed next to the application binary.

## 🎨 Theming
See [docs/theming-skinning.md](../docs/theming-skinning.md) for details on applying themes, skins and custom cursors. Example files live in [docs/examples](../docs/examples).

## 🧪 GUI Plugin Manager

Use **Settings → Plugin Manager** to:
- Toggle plugins
- Reload them
- Open the plugin folder

All plugin states are persistently stored.

## 📦 Plugin Marketplace
`PluginMarketplace` can fetch a list of available modules from a remote URL and
install them directly into your `Plugins/` directory. Each download is verified
with a SHA256 hash before it is placed on disk.

## 🎨 Skins
Place Avalonia style files inside the `Skins` folder to customize the interface.
Assign skins to specific plugins using the `ComponentSkins` section of `settings.json`.

## 🌀 Window Effects
Try out wobbly windows, drop shadows and more via **Settings → Runtime Settings**.
Effects are plugin friendly so you can write your own animations.

## 🔄 Auto-update
An optional helper lets Cycloside download and swap in updates when provided
with a download URL and expected checksum.

## 🌟 Why Cycloside?
Cycloside focuses on simplicity. Plugins are regular .NET classes, so you can tap into the entire ecosystem without learning a custom scripting language. Because it's built on Avalonia, the same setup runs on Windows and Linux alike.

## 🖼️ Widgets
See [docs/widget-interface.md](docs/widget-interface.md) for the current design of our dockable, skinnable widget system. Any plugin can expose a widget surface simply by returning one from the `Widget` property. The built-in `Widget Host` plugin demonstrates this with sample Clock, MP3 and Weather widgets. The goal is to surface plugin features directly on your desktop with minimal fuss. See also [docs/plugin-lifecycle.md](docs/plugin-lifecycle.md) for lifecycle hooks, [docs/skin-api.md](docs/skin-api.md) for information on creating new skins, and [docs/windowfx-design.md](docs/windowfx-design.md) for an overview of the planned compositor effects system.


## 🚧 Cycloside vs Rainmeter
Rainmeter is awesome for highly customized desktop skins, but it is Windows-only and relies heavily on its own scripting. Cycloside keeps things lightweight and cross-platform. If you already know C# or want to drop in compiled plugins, you'll feel right at home while still getting a friendly GUI to manage everything.



--- FILE: D:\github\newideas\Cycloside\RemoteApiServer.cs ---

using System;
using System.IO;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Cycloside.Plugins;

namespace Cycloside;

public class RemoteApiServer
{
    private readonly PluginManager _manager;
    private readonly string _token;
    private HttpListener? _listener;
    private CancellationTokenSource? _cts;

    public RemoteApiServer(PluginManager manager, string token)
    {
        _manager = manager;
        _token = token;
    }

    public void Start(int port = 4123)
    {
        if (!HttpListener.IsSupported) return;
        _listener = new HttpListener();
        _listener.Prefixes.Add($"http://localhost:{port}/");
        _listener.Start();
        _cts = new CancellationTokenSource();
        _ = Listen(_cts.Token);
    }

    private async Task Listen(CancellationToken token)
    {
        while (_listener?.IsListening == true && !token.IsCancellationRequested)
        {
            HttpListenerContext? ctx = null;
            try
            {
                var contextTask = _listener.GetContextAsync();
                var completed = await Task.WhenAny(contextTask, Task.Delay(Timeout.Infinite, token));
                if (completed != contextTask)
                    break;
                ctx = await contextTask;
            }
            catch (OperationCanceledException)
            {
                break;
            }
            catch (ObjectDisposedException)
            {
                break;
            }

            if (ctx != null)
            {
                _ = Task.Run(() => Handle(ctx), token);
            }
        }
    }

    private void Handle(HttpListenerContext ctx)
    {
        try
        {
            var auth = ctx.Request.Headers["X-Api-Token"] ?? ctx.Request.QueryString["token"];
            if (auth != _token)
            {
                ctx.Response.StatusCode = 401;
                return;
            }

            var path = ctx.Request.Url?.AbsolutePath?.Trim('/');
            if (path == "trigger" && ctx.Request.HttpMethod == "POST")
            {
                using var sr = new StreamReader(ctx.Request.InputStream);
                var body = sr.ReadToEnd();
                PluginBus.Publish(body);
                ctx.Response.StatusCode = 200;
            }
            else
            {
                ctx.Response.StatusCode = 404;
            }
        }
        catch (Exception ex)
        {
            Logger.Log($"Remote API error: {ex.Message}");
            ctx.Response.StatusCode = 500;
        }
        finally
        {
            try { ctx.Response.Close(); } catch { }
        }
    }

    public void Stop()
    {
        _cts?.Cancel();
        _listener?.Close();
        _listener = null;
        _cts?.Dispose();
        _cts = null;
    }
}



--- FILE: D:\github\newideas\Cycloside\RuntimeSettingsWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.RuntimeSettingsWindow"
        Width="300" Height="200"
        Title="Runtime Settings">
    <StackPanel Margin="10" Spacing="8">
        <CheckBox x:Name="IsolationBox" Content="Plugin Isolation"/>
        <CheckBox x:Name="CrashLogBox" Content="Crash Logging"/>
        <CheckBox x:Name="BuiltInBox" Content="Disable Built-in Plugins (Safe Mode)"/>
        <Button Content="Save" HorizontalAlignment="Right" Click="OnSave"/>
    </StackPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\RuntimeSettingsWindow.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Cycloside.Plugins;
using System;
using System.IO;
using Cycloside.Services;

namespace Cycloside;

public partial class RuntimeSettingsWindow : Window
{
    private readonly PluginManager _manager;

    public RuntimeSettingsWindow(PluginManager manager)
    {
        _manager = manager;
        InitializeComponent();
        CursorManager.ApplyFromSettings(this, "Plugins");
        this.FindControl<CheckBox>("IsolationBox")!.IsChecked = _manager.IsolationEnabled;
        this.FindControl<CheckBox>("CrashLogBox")!.IsChecked = _manager.CrashLoggingEnabled;
        this.FindControl<CheckBox>("BuiltInBox")!.IsChecked = SettingsManager.Settings.DisableBuiltInPlugins;
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(RuntimeSettingsWindow));
    }

    // Parameterless constructor for designer support
    public RuntimeSettingsWindow() : this(new PluginManager(Path.Combine(AppContext.BaseDirectory, "Plugins"), _ => Logger.Log("Designer")))
    {
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    private void OnSave(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        var iso = this.FindControl<CheckBox>("IsolationBox")?.IsChecked ?? true;
        var log = this.FindControl<CheckBox>("CrashLogBox")?.IsChecked ?? true;
        var builtIn = this.FindControl<CheckBox>("BuiltInBox")?.IsChecked ?? false;
        _manager.IsolationEnabled = iso;
        _manager.CrashLoggingEnabled = log;
        SettingsManager.Settings.PluginIsolation = iso;
        SettingsManager.Settings.PluginCrashLogging = log;
        SettingsManager.Settings.DisableBuiltInPlugins = builtIn;
        SettingsManager.Save();
        Close();
    }
}



--- FILE: D:\github\newideas\Cycloside\SettingsManager.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace Cycloside;

public class AppSettings
{
    public bool LaunchAtStartup { get; set; }
    public Dictionary<string, bool> PluginEnabled { get; set; } = new();
    public Dictionary<string, string> PluginVersions { get; set; } = new();
    public bool PluginIsolation { get; set; } = true;
    public bool PluginCrashLogging { get; set; } = true;
    public bool DisableBuiltInPlugins { get; set; } = false;

    // RENAMED: This is now the single, application-wide theme.
    public string GlobalTheme { get; set; } = "MintGreen";

    // RENAMED: This maps components (like plugin names) to specific skins.
    public Dictionary<string, List<string>> ComponentSkins { get; set; } = new();

    public string Cursor { get; set; } = "Arrow";
    public Dictionary<string, string> ComponentCursors { get; set; } = new();
    public Dictionary<string, List<string>> WindowEffects { get; set; } = new();
    public Dictionary<string, ThemeSnapshot> SavedThemes { get; set; } = new();
    public double WeatherLatitude { get; set; } = 35;
    public double WeatherLongitude { get; set; } = 139;
    public string WeatherCity { get; set; } = "";
    public string ActiveProfile { get; set; } = "default";
    public string RemoteApiToken { get; set; } = "secret";
    public bool FirstRun { get; set; } = true;
}

public static class SettingsManager
{
    private static readonly string SettingsPath = Path.Combine(AppContext.BaseDirectory, "settings.json");
    private static AppSettings _settings = Load();

    public static AppSettings Settings => _settings;

    private static AppSettings Load()
    {
        try
        {
            if (File.Exists(SettingsPath))
            {
                var json = File.ReadAllText(SettingsPath);
                var s = JsonSerializer.Deserialize<AppSettings>(json);
                if (s != null) return s;
            }
        }
        catch { }
        return new AppSettings();
    }

    public static void Save()
    {
        try
        {
            var json = JsonSerializer.Serialize(_settings, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(SettingsPath, json);
        }
        catch { }
    }
}



--- FILE: D:\github\newideas\Cycloside\SkinThemeEditorWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.SkinThemeEditorWindow"
        Width="600" Height="450"
        Title="Skin/Theme Editor">
    <DockPanel Margin="10" LastChildFill="True">
        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Spacing="4">
            <ComboBox x:Name="TypeBox" Width="80">
                <ComboBoxItem Content="Theme"/>
                <ComboBoxItem Content="Skin"/>
            </ComboBox>
            <ComboBox x:Name="FileBox" Width="200"/>
            <Button Content="Load" Click="LoadFile"/>
            <Button Content="Save" Click="SaveFile"/>
            <Button Content="Preview" Click="Preview"/>
        </StackPanel>
        <TabControl Margin="0,8,0,0">
            <TabItem Header="Editor">
                <TextBox x:Name="Editor" AcceptsReturn="True" AcceptsTab="True" FontFamily="monospace"/>
            </TabItem>
            <TabItem Header="Cursors">
                <StackPanel Spacing="4">
                    <ComboBox x:Name="CursorBox" Width="150"/>
                    <Border x:Name="CursorPreview" BorderBrush="Gray" BorderThickness="1" Width="100" Height="100" Background="White">
                        <TextBlock Text="Hover here" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </StackPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\SkinThemeEditorWindow.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Markup.Xaml;
using Avalonia.Markup.Xaml.XamlIl;
using Avalonia.Media;
using Avalonia.Styling;
using System;
using System.IO;
using System.Linq;
using Cycloside.Services;

namespace Cycloside;

public partial class SkinThemeEditorWindow : Window
{
    public SkinThemeEditorWindow()
    {
        InitializeComponent();
        CursorManager.ApplyFromSettings(this, "Plugins");
        // WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(SkinThemeEditorWindow));
        BuildFileList();
        BuildCursorList();
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }


    private void BuildFileList()
    {
        TypeBox.SelectionChanged += (_, _) => RefreshFiles();
        TypeBox.SelectedIndex = 0;
        RefreshFiles();
    }

    private void RefreshFiles()
    {
        FileBox.Items.Clear();
        var isTheme = TypeBox.SelectedIndex == 0;
        var dir = isTheme ? Path.Combine(AppContext.BaseDirectory, "Themes/Global") : Path.Combine(AppContext.BaseDirectory, "Skins");
        if (!Directory.Exists(dir))
            return;
        foreach (var file in Directory.GetFiles(dir, "*.axaml"))
            FileBox.Items.Add(Path.GetFileNameWithoutExtension(file));
        if (FileBox.ItemCount > 0)
            FileBox.SelectedIndex = 0;
    }

    private void BuildCursorList()
    {
        foreach (var name in Enum.GetNames(typeof(StandardCursorType)))
            CursorBox.Items.Add(name);
        CursorBox.SelectionChanged += (_, _) =>
        {
            if (CursorBox.SelectedItem is string n)
                CursorManager.ApplyCursor(CursorPreview, n);
        };
        CursorBox.SelectedIndex = 0;
    }

    private string? GetSelectedPath()
    {
        var isTheme = TypeBox.SelectedIndex == 0;
        var name = FileBox.SelectedItem?.ToString();
        if (string.IsNullOrWhiteSpace(name))
            return null;
        var dir = isTheme ? Path.Combine(AppContext.BaseDirectory, "Themes/Global") : Path.Combine(AppContext.BaseDirectory, "Skins");
        return Path.Combine(dir, name + ".axaml");
    }

    private void LoadFile(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        var path = GetSelectedPath();
        if (path != null && File.Exists(path))
            Editor.Text = File.ReadAllText(path);
    }

    private void SaveFile(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        var path = GetSelectedPath();
        if (path != null)
            File.WriteAllText(path, Editor.Text ?? string.Empty);
    }

    private void Preview(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        var xaml = Editor.Text ?? string.Empty;
        var win = new PreviewWindow(xaml);
        win.Show();
    }
}

public class PreviewWindow : Window
{
    public PreviewWindow(string xaml)
    {
        Width = 300;
        Height = 200;
        Title = "Preview";
        try
        {
            Content = AvaloniaRuntimeXamlLoader.Parse<Grid>(xaml);
        }
        catch (Exception ex)
        {
            Content = new ScrollViewer
            {
                Margin = new Thickness(10),
                Content = new TextBlock
                {
                    Text = ex.Message,
                    Foreground = Brushes.Red,
                    TextWrapping = TextWrapping.Wrap
                }
            };
        }
        // WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(PreviewWindow));
    }
}



--- FILE: D:\github\newideas\Cycloside\StartupManager.cs ---

using System;
using System.IO;
using Microsoft.Win32;

namespace Cycloside;

public static class StartupManager
{
    private static string ExecutablePath => System.Diagnostics.Process.GetCurrentProcess().MainModule?.FileName ?? string.Empty;
    private static string LinuxAutostartDir => Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "autostart");
    private static string MacPlistDir => Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "Library/LaunchAgents");
    private static string MacPlistPath => Path.Combine(MacPlistDir, "com.cycloside.app.plist");

    public static bool IsEnabled()
    {
        if (OperatingSystem.IsWindows())
        {
            using var key = Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", false);
            return key?.GetValue("Cycloside") != null;
        }
        else if (OperatingSystem.IsLinux())
        {
            return File.Exists(Path.Combine(LinuxAutostartDir, "cycloside.desktop"));
        }
        else if (OperatingSystem.IsMacOS())
        {
            return File.Exists(MacPlistPath);
        }
        return false;
    }

    public static void Enable()
    {
        if (OperatingSystem.IsWindows())
        {
            using var key = Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true);
            key?.SetValue("Cycloside", $"\"{ExecutablePath}\"");
        }
        else if (OperatingSystem.IsLinux())
        {
            Directory.CreateDirectory(LinuxAutostartDir);
            var path = Path.Combine(LinuxAutostartDir, "cycloside.desktop");
            File.WriteAllText(path, "[Desktop Entry]\nType=Application\nExec=\"" + ExecutablePath + "\"\nHidden=false\nNoDisplay=false\nX-GNOME-Autostart-enabled=true\nName=Cycloside\n");
        }
        else if (OperatingSystem.IsMacOS())
        {
            Directory.CreateDirectory(MacPlistDir);
            var plist = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                        "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n" +
                        "<plist version=\"1.0\"><dict><key>Label</key><string>com.cycloside.app</string><key>ProgramArguments</key><array><string>" + ExecutablePath + "</string></array><key>RunAtLoad</key><true/></dict></plist>";
            File.WriteAllText(MacPlistPath, plist);
            try
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "launchctl",
                    Arguments = $"load -w \"{MacPlistPath}\""
                });
            }
            catch { }
        }
    }

    public static void Disable()
    {
        if (OperatingSystem.IsWindows())
        {
            using var key = Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true);
            key?.DeleteValue("Cycloside", false);
        }
        else if (OperatingSystem.IsLinux())
        {
            var path = Path.Combine(LinuxAutostartDir, "cycloside.desktop");
            if (File.Exists(path))
                File.Delete(path);
        }
        else if (OperatingSystem.IsMacOS())
        {
            try
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "launchctl",
                    Arguments = $"unload -w \"{MacPlistPath}\""
                });
            }
            catch { }
            if (File.Exists(MacPlistPath))
                File.Delete(MacPlistPath);
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\StateManager.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace Cycloside;

public static class StateManager
{
    private static readonly string StatePath = Path.Combine(AppContext.BaseDirectory, "state.json");
    private static Dictionary<string, string> _state = Load();

    private static Dictionary<string, string> Load()
    {
        try
        {
            if (File.Exists(StatePath))
            {
                var json = File.ReadAllText(StatePath);
                var data = JsonSerializer.Deserialize<Dictionary<string, string>>(json);
                if (data != null) return data;
            }
        }
        catch { }
        return new Dictionary<string, string>();
    }

    private static void Save()
    {
        try
        {
            var json = JsonSerializer.Serialize(_state, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(StatePath, json);
        }
        catch { }
    }

    public static void Set(string key, string value)
    {
        _state[key] = value;
        Save();
    }

    public static string? Get(string key)
    {
        return _state.TryGetValue(key, out var v) ? v : null;
    }
}



--- FILE: D:\github\newideas\Cycloside\ThemeSettingsWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.ThemeSettingsWindow"
        Width="300" Height="300"
        Title="Theme Settings">
    <DockPanel Margin="10">
        <ScrollViewer>
            <StackPanel x:Name="ThemePanel" />
        </ScrollViewer>
        <Button DockPanel.Dock="Bottom" HorizontalAlignment="Right" Margin="0,4,0,0" Content="Save" Click="SaveButton_Click"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\ThemeSettingsWindow.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using System.Collections.Generic;
using Cycloside.Services;

namespace Cycloside;

public partial class ThemeSettingsWindow : Window
{
    private readonly string[] _components = new[] { "Cycloside", "TextEditor", "MediaPlayer", "Plugins" };
    private readonly string[] _themes = new[] { "MintGreen", "Matrix", "Orange", "ConsoleGreen", "MonochromeOrange", "DeepBlue" };
    private readonly Dictionary<string, (CheckBox cb, ComboBox box)> _controls = new();

    public ThemeSettingsWindow()
    {
        InitializeComponent();
        CursorManager.ApplyFromSettings(this, "Plugins");
        BuildList();
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(ThemeSettingsWindow));
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    private void BuildList()
    {
        var panel = this.FindControl<StackPanel>("ThemePanel");
        if (panel is null)
            return;
        panel.Children.Clear();
        foreach (var comp in _components)
        {
var row = new StackPanel { Orientation = Avalonia.Layout.Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 4) };
var cb = new CheckBox { Content = comp, VerticalAlignment = Avalonia.Layout.VerticalAlignment.Center };
var box = new ComboBox { SelectedIndex = 0, Margin = new Thickness(4, 0, 0, 0) };

            foreach (var th in _themes)
                box.Items.Add(th);
            row.Children.Add(cb);
            row.Children.Add(box);
            panel.Children.Add(row);
            _controls[comp] = (cb, box);
            if (SettingsManager.Settings.ComponentSkins.TryGetValue(comp, out var skins) && skins.Count > 0)
            {
                cb.IsChecked = true;
                box.SelectedItem = skins[0];
            }
        }
    }

    private void SaveButton_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        var map = SettingsManager.Settings.ComponentSkins;
        map.Clear();
        foreach (var (comp, pair) in _controls)
        {
            if (pair.cb.IsChecked == true)
                map[comp] = new List<string> { pair.box.SelectedItem?.ToString() ?? _themes[0] };
        }
        SettingsManager.Save();
        Close();
    }
}




--- FILE: D:\github\newideas\Cycloside\ThemeSnapshot.cs ---

using System.Collections.Generic;

namespace Cycloside;

public class ThemeSnapshot
{
    public string Theme { get; set; } = "MintGreen";
    public Dictionary<string, List<string>> ComponentSkins { get; set; } = new();
}



--- FILE: D:\github\newideas\Cycloside\Updater.cs ---

using System;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace Cycloside;

public static class Updater
{
    public static async Task<bool> CheckAndUpdate(string url, string expectedHash)
    {
        try
        {
            using var client = new HttpClient();
            var data = await client.GetByteArrayAsync(url);
            var hash = Convert.ToHexString(SHA256.HashData(data));
            if (!hash.Equals(expectedHash, StringComparison.OrdinalIgnoreCase))
                return false;

            var exe = System.Diagnostics.Process.GetCurrentProcess().MainModule?.FileName;
            if (string.IsNullOrEmpty(exe)) return false;
            var temp = exe + ".new";
            await File.WriteAllBytesAsync(temp, data);
            File.Replace(temp, exe, null);
            return true;
        }
        catch (Exception ex)
        {
            Logger.Log($"Update failed: {ex.Message}");
            return false;
        }
    }
}



--- FILE: D:\github\newideas\Cycloside\VolatilePluginManager.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using MoonSharp.Interpreter;

namespace Cycloside;

public class VolatilePluginManager
{
    private readonly List<object> _running = new();

    public IReadOnlyList<object> Running => _running.AsReadOnly();

    public void RunLua(string luaCode)
    {
        try
        {
            var script = new Script();
            var result = script.DoString(luaCode);
            _running.Add(script);
            Logger.Log($"Lua result: {result}");
        }
        catch (Exception ex)
        {
            Logger.Log($"Lua error: {ex.Message}");
        }
    }

    public void RunCSharp(string csharpCode)
    {
        try
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(csharpCode);
            var references = AppDomain.CurrentDomain.GetAssemblies()
                .Where(a => !a.IsDynamic && !string.IsNullOrEmpty(a.Location))
                .Select(a => MetadataReference.CreateFromFile(a.Location));
            var compilation = CSharpCompilation.Create(
                "InMemoryAssembly",
                new[] { syntaxTree },
                references,
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
            using var ms = new MemoryStream();
            var emitResult = compilation.Emit(ms);
            if (!emitResult.Success)
            {
                foreach (var d in emitResult.Diagnostics)
                    Logger.Log(d.ToString());
                return;
            }
            ms.Seek(0, SeekOrigin.Begin);
            var asm = Assembly.Load(ms.ToArray());
            _running.Add(asm);
            var type = asm.GetType("Script.Main");
            var method = type?.GetMethod("Run", BindingFlags.Public | BindingFlags.Static);
            var result = method?.Invoke(null, null);
            Logger.Log($"C# result: {result}");
        }
        catch (Exception ex)
        {
            Logger.Log($"C# error: {ex.Message}");
        }
    }
}




--- FILE: D:\github\newideas\Cycloside\VolatileRunnerWindow.axaml ---

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Cycloside.VolatileRunnerWindow"
        Width="400" Height="300"
        Title="Run Script">
    <DockPanel Margin="5">
        <ComboBox DockPanel.Dock="Top" x:Name="LangBox">
            <ComboBoxItem Content="Lua"/>
            <ComboBoxItem Content="C#"/>
        </ComboBox>
        <TextBox x:Name="CodeBox" AcceptsReturn="True" FontFamily="monospace"/>
        <Button DockPanel.Dock="Bottom" Content="Run" HorizontalAlignment="Right" Click="OnRun"/>
    </DockPanel>
</Window>



--- FILE: D:\github\newideas\Cycloside\VolatileRunnerWindow.axaml.cs ---

using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using System;

namespace Cycloside;

public partial class VolatileRunnerWindow : Window
{
    private readonly VolatilePluginManager _manager;

    // Parameterless constructor is required for the Avalonia XAML loader.
    // It creates a standalone manager for design-time usage.
    public VolatileRunnerWindow() : this(new VolatilePluginManager()) { }

    public VolatileRunnerWindow(VolatilePluginManager manager)
    {
        // Manager is now guaranteed to be valid by the constructor.
        _manager = manager ?? throw new ArgumentNullException(nameof(manager));

        InitializeComponent();

        var langBox = this.FindControl<ComboBox>("LangBox");
        if (langBox != null)
            langBox.SelectedIndex = 0;

        // Assuming WindowEffectsManager is a valid part of your project
        WindowEffectsManager.Instance.ApplyConfiguredEffects(this, nameof(VolatileRunnerWindow));
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    private void OnRun(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        // --- Optimized Logic ---
        // 1. Find controls first to ensure they exist.
        var langBox = this.FindControl<ComboBox>("LangBox");
        var codeBox = this.FindControl<TextBox>("CodeBox");

        // 2. Guard Clause: If either essential control is missing, do nothing.
        //    This prevents the app from crashing.
        if (langBox == null || codeBox == null)
        {
            Console.WriteLine("Error: UI controls 'LangBox' or 'CodeBox' could not be found.");
            return;
        }

        // 3. Safely get the text, defaulting to an empty string if it's null.
        var code = codeBox.Text ?? string.Empty;

        // 4. Execute the appropriate code based on the selected language.
        if (langBox.SelectedIndex == 0)
        {
            _manager.RunLua(code);
        }
        else
        {
            _manager.RunCSharp(code);
        }
    }
}


--- FILE: D:\github\newideas\Cycloside\WallpaperHelper.cs ---

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Cycloside;

public static class WallpaperHelper
{
    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);

    public static void SetWallpaper(string path)
    {
        try
        {
            if (OperatingSystem.IsWindows())
            {
                const int SPI_SETDESKWALLPAPER = 20;
                const int SPIF_UPDATEINIFILE = 1;
                const int SPIF_SENDWININICHANGE = 2;
                SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, path, SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
            }
            else if (OperatingSystem.IsMacOS())
            {
                try
                {
                    var psi = new ProcessStartInfo
                    {
                        FileName = "osascript"
                    };
                    psi.ArgumentList.Add("-e");
                    psi.ArgumentList.Add($"tell application \"System Events\" to set picture of every desktop to POSIX file \"{path}\"");
                    Process.Start(psi);
                }
                catch (Exception ex)
                {
                    Logger.Log($"Mac wallpaper command failed: {ex.Message}");
                }
            }
            else if (OperatingSystem.IsLinux())
            {
                var desktop = Environment.GetEnvironmentVariable("XDG_CURRENT_DESKTOP") ??
                               Environment.GetEnvironmentVariable("DESKTOP_SESSION") ?? string.Empty;
                var lowered = desktop.ToLowerInvariant();
                var recognized = true;
                var safePath = path.Replace("\"", "\\\"").Replace("'", "\\'");
                try
                {
                    if (lowered.Contains("kde"))
                    {
                        var script = $"var Desktops = desktops();for (i=0;i<Desktops.length;i++){{d=Desktops[i];d.wallpaperPlugin='org.kde.image';d.currentConfigGroup=['Wallpaper','org.kde.image','General'];d.writeConfig('Image','file://{safePath}');}}";
                        Process.Start("qdbus", $"org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript \"{script}\"");
                    }
                    else if (lowered.Contains("gnome") || lowered.Contains("unity") || lowered.Contains("cinnamon"))
                    {
                        Process.Start("gsettings", $"set org.gnome.desktop.background picture-uri \"file://{path}\"");
                    }
                    else if (lowered.Contains("xfce"))
                    {
                        Process.Start("xfconf-query", $"-c xfce4-desktop -p /backdrop/screen0/monitor0/image-path -s \"{path}\"");
                    }
                    else if (lowered.Contains("lxde"))
                    {
                        Process.Start("pcmanfm", $"--set-wallpaper={path}");
                    }
                    else
                    {
                        recognized = false;
                        Process.Start("feh", $"--bg-scale {path}");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Log($"Linux wallpaper command failed: {ex.Message}");
                }
                if (!recognized)
                    Logger.Log($"Unsupported desktop '{desktop}', used feh fallback");
            }
        }
        catch (Exception ex)
        {
            Logger.Log($"Wallpaper set failed: {ex.Message}");
        }
    }
}




--- FILE: D:\github\newideas\Cycloside\WorkspaceProfiles.cs ---

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using Cycloside.Plugins;

namespace Cycloside;

public class WorkspaceProfile
{
    public string Name { get; set; } = string.Empty;
    public Dictionary<string,bool> Plugins { get; set; } = new();
    public string Wallpaper { get; set; } = string.Empty;
}

public static class WorkspaceProfiles
{
    private static readonly string ProfilePath = Path.Combine(AppContext.BaseDirectory, "profiles.json");
    private static Dictionary<string,WorkspaceProfile> _profiles = Load();

    public static IReadOnlyDictionary<string,WorkspaceProfile> Profiles => _profiles;

    private static Dictionary<string,WorkspaceProfile> Load()
    {
        try
        {
            if(File.Exists(ProfilePath))
            {
                var json = File.ReadAllText(ProfilePath);
                var p = JsonSerializer.Deserialize<Dictionary<string,WorkspaceProfile>>(json);
                if(p != null) return p;
            }
        }
        catch {}
        return new();
    }

    public static void Save()
    {
        try
        {
            var json = JsonSerializer.Serialize(_profiles, new JsonSerializerOptions{WriteIndented=true});
            File.WriteAllText(ProfilePath, json);
        }
        catch {}
    }

    public static void Apply(string name, PluginManager manager)
    {
        if(!_profiles.TryGetValue(name, out var profile))
            return;

        foreach(var plugin in manager.Plugins)
        {
            var enable = profile.Plugins.TryGetValue(plugin.Name, out var e) && e;
            if(enable && !manager.IsEnabled(plugin))
                manager.EnablePlugin(plugin);
            else if(!enable && manager.IsEnabled(plugin))
                manager.DisablePlugin(plugin);
        }

        if(!string.IsNullOrWhiteSpace(profile.Wallpaper))
            WallpaperHelper.SetWallpaper(profile.Wallpaper);

        SettingsManager.Settings.ActiveProfile = name;
        SettingsManager.Save();
    }

    public static void AddOrUpdate(WorkspaceProfile profile)
    {
        _profiles[profile.Name] = profile;
        Save();
    }

    public static void Remove(string name)
    {
        if(_profiles.Remove(name))
            Save();
    }
}



